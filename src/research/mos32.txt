{"payload":{"allShortcutsEnabled":false,"fileTree":{"docs":{"items":[{"name":"circuit_diagrams","path":"docs/circuit_diagrams","contentType":"directory"},{"name":"asm6809.vim","path":"docs/asm6809.vim","contentType":"file"},{"name":"forth.asm.txt","path":"docs/forth.asm.txt","contentType":"file"},{"name":"forthwords.txt","path":"docs/forthwords.txt","contentType":"file"},{"name":"jonesforth.S","path":"docs/jonesforth.S","contentType":"file"},{"name":"jonesforth.f","path":"docs/jonesforth.f","contentType":"file"},{"name":"mos32.lst","path":"docs/mos32.lst","contentType":"file"},{"name":"mos32.txt","path":"docs/mos32.txt","contentType":"file"},{"name":"mos32data.gnumeric","path":"docs/mos32data.gnumeric","contentType":"file"},{"name":"mos32notes.txt","path":"docs/mos32notes.txt","contentType":"file"},{"name":"notes.txt","path":"docs/notes.txt","contentType":"file"},{"name":"rom.lst","path":"docs/rom.lst","contentType":"file"},{"name":"technical.txt","path":"docs/technical.txt","contentType":"file"}],"totalCount":13},"":{"items":[{"name":"asm","path":"asm","contentType":"directory"},{"name":"asm09","path":"asm09","contentType":"directory"},{"name":"disasm","path":"disasm","contentType":"directory"},{"name":"docs","path":"docs","contentType":"directory"},{"name":"miditerm","path":"miditerm","contentType":"directory"},{"name":"miragedisk","path":"miragedisk","contentType":"directory"},{"name":"sim6809-0.1","path":"sim6809-0.1","contentType":"directory"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"LICENSE","path":"LICENSE","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"}],"totalCount":10}},"fileTreeProcessingTime":4.009661,"foldersToFetch":[],"reducedMotionEnabled":null,"repo":{"id":4988400,"defaultBranch":"master","name":"miragetools","ownerLogin":"gordonjcp","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2012-07-11T11:59:20.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/147207?v=4","public":true,"private":false,"isOrgOwned":false},"refInfo":{"name":"master","listCacheKey":"v0:1613523311.748527","canEdit":false,"refType":"branch","currentOid":"6c6f6861f51c5d74a6be2dfc3e71a88fd04a409d"},"path":"docs/mos32.txt","currentUser":null,"blob":{"rawLines":["irqvec EQU $8008\r","firqvec EQU $800B\r","osvec EQU $800E\r","irqentry EQU $893C\r","firqentry EQU $A151\r","osentry EQU $B920\r","fdcreadsector EQU $F000\r","fdcskipsector EQU $F013\r","fdcwritesector EQU $F024\r","fdcfillsector EQU $F037\r","fdcreadtrack EQU $F04A\r","fdcwritetrack EQU $F058\r","fdcrestore EQU $F066\r","fdcseektrack EQU $F06F\r","fdcseekin EQU $F07D\r","fdcseekout EQU $F086\r","fdcforceinterrupt EQU $F08F\r","countdown EQU $F0A7\r","nmivec EQU $F0B0\r","coldstart EQU $F0F0\r","runopsys EQU $F146\r","hwsetup EQU $F15D\r","qchipsetup EQU $F1BB\r","clearram EQU $F1E5\r","loadopsys EQU $F20D\r","readsysparams EQU $F2AF\r","checkos EQU $F306\r","showerrcode EQU $F33C\r","preparefd EQU $F38C\r","loadossector EQU $F3AC\r","gototrack EQU $F3F1\r","seterrcode EQU $F413\r","saveparams EQU $F425\r","restoreparams EQU $F437\r","readsector EQU $F448\r","writesector EQU $F476\r","gototrack2 EQU $F4A4\r","enablefd EQU $F4C6\r","disablefd EQU $F4D6\r","timer2int EQU $F4DF\r","unknown1 EQU $F514\r","unknown2 EQU $F52D\r","unknown3 EQU $F541\r","copybytes EQU $F55B\r","swapbytes EQU $F564\r","swponefilt EQU $F571\r","unknown5 EQU $F5BE\r","unknown6 EQU $F5DC\r","setfilterdac EQU $F5E7\r","unknown8 EQU $F5F1\r","unknown9 EQU $F6DD\r","resetvec EQU $FC7F\r","ospanic EQU $FC91\r","\r","ORG $8000\r","\r","*** Ensoniq Mirage OS 3.2\r","8000: 88 09 0B 05 00 00 00 00 \r","\r","irqvec:\r","8008: 7E 89 3C    JMP   irqentry\r","\r","firqvec:\r","800B: 7E A1 51    JMP   firqentry\r","\r","osvec:\r","800E: 7E B9 20    JMP   osentry\r","\r","*** OS parameters\r","* $8012 tuning\r","* $8013 bend range\r","* $8014 velocity sens\r","* $8015 upper/lower?\r","\r","8011: 00 32 02 1E 40 00 22 A0 00 30 00 01 01 01 7E \r","\r","8020: 01 00 00 02 00 00 60 01 00 00 00 32 00 00 00 00 \r","8030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","8040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","8050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 B2 BE \r","8060: 00 00 00 00 00 FF FF FF 00 00 00 00 00 00 32 00 \r","8070: 00 00 00 00 00 32 00 00 00 00 00 00 32 3F FF FF \r","8080: 00 00 00 00 00 00 00 00 00 00 00 15 01 00 00 00 \r","8090: 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 \r","80A0: 00 00 00 00 00 B7 6F B4 FE 00 00 00 00 11 0B F0 \r","80B0: 0F 0F 00 DA 60 00 00 00 00 00 00 00 82 25 82 25 \r","80C0: A2 4A 00 00 00 00 A1 BC 00 00 00 00 00 00 00 FF \r","80D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","\r","* variables for disk routines\r","* $80d5 - first track\r","* $80d6 - first sector\r","* $80d7 - last track\r","* $80d8 - last sector\r","\r","80E0: FF FF FF FF 00 C0 00 00 FF FF FF 01 B8 0A AB 2A \r","80F0: FF FF FF FF 01 02 04 08 10 20 40 80 FE FD FB F7 \r","8100: EF DF BF 7F 00 00 00 00 00 00 00 00 00 00 00 00 \r","8110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","8120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","8130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","8140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","8150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","8160: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","8170: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","8180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","8190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","81A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","81B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","81C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","81D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","81E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","81F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 \r","8200: 00 00 00 00 00 00 00 01 00 10 20 00 02 00 01 04 \r","8210: 08 0C 05 09 0D 06 0A 0E 07 0B 0F 80 81 82 83 00 \r","8220: 00 00 08 03 00 00 00 00 00 00 00 00 00 00 00 00 \r","8230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","8240: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","8250: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","8260: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","8270: FF FF FF FF FF FF FF FF 82 80 82 7C 10 11 01 0A \r","8280: 00 00 00 00 00 00 00 00 00 00 00 00 \r","\r","* appears to be some sort of linked list task loop\r","\r","828C: 34 01       PSHS  CC\r","828E: 0F 4E       CLR   $4E\t* task list counter?\r","8290: 1A 50       ORCC  #$50\t* disable interrupts\r","8292: 96 4E       LDA   $4E\t* get task list counter?\r","8294: 26 07       BNE   $829D\t* zero? return\r","8296: 10 9E 59    LDY   $59\t* some 16-bit variable\r","8299: 26 04       BNE   $829F\t* zero? continue\r","829B: 0F 38       CLR   $38\t* clear some variable\r","829D: 35 81       PULS  CC,PC ;(PUL? PC=RTS)\r","\r","829F: EC A4       LDD   ,Y\t* fetch value pointed to by Y\r","82A1: DD 59       STD   $59\t* store value back\r","82A3: 26 02       BNE   $82A7\t* zero?\r","82A5: DD 5B       STD   $5B\t* no, store it here too\r","82A7: 1C AF       ANDCC #$AF\t* enable interrupts\r","82A9: AD B8 02    JSR   [$02,Y]\t* jump to next task in list?\r","82AC: 20 E2       BRA   $8290\t* and loop\r","\r","* unknown\r","* $80fc is a table of values that runs\r","* FE FD FB F7 EF DF BF 7F\r","* bit set\r","82AE: E6 24       LDB   $0004,Y\t* get a value (voice params?)\r","82B0: C0 24       SUBB  #$24\t* subtract 36 (three octaves?)\r","82B2: CE 80 4F    LDU   #$804F\t* some table of values\r","82B5: 1F 98       TFR   B,A\t* copy B\r","82B7: 44          LSRA  \t\r","82B8: 44          LSRA  \r","82B9: 44          LSRA  \t* A=B/8\r","82BA: C4 07       ANDB  #$07\t* mask lower 3 bits of A\r","82BC: 8E 80 FC    LDX   #$80FC\t\r","82BF: E6 85       LDB   B,X\t* b now contains 255-(2^b)\r","82C1: E4 C6       ANDB  A,U\t* mask that bit off\r","82C3: E7 C6       STB   A,U\t* save it\r","82C5: A6 25       LDA   $0005,Y\t\r","82C7: 97 4D       STA   $4D\t* some variable\r","82C9: E6 24       LDB   $0004,Y\r","82CB: A6 27       LDA   $0007,Y\r","82CD: BD 87 38    JSR   $8738\t* call\r","82D0: 9E 45       LDX   $45\t* some variable\r","82D2: 27 21       BEQ   $82F5\t* \r","82D4: D1 7D       CMPB  $7D\t* some variable\r","82D6: 25 1D       BCS   $82F5\r","82D8: A7 05       STA   $0005,X\r","82DA: E7 06       STB   $0006,X\r","82DC: 96 7D       LDA   $7D\r","82DE: 80 24       SUBA  #$24\r","82E0: 34 02       PSHS  A\r","82E2: 8D 68       BSR   $834C\r","82E4: 86 FF       LDA   #$FF\r","82E6: B7 81 06    STA   $8106\r","82E9: 24 52       BCC   $833D\r","82EB: CB 24       ADDB  #$24\r","82ED: E7 06       STB   $0006,X\r","82EF: F7 81 06    STB   $8106\r","82F2: 7E 84 23    JMP   $8423\r","\r","82F5: 9E 47       LDX   $47\t* some variable\r","82F7: 27 21       BEQ   $831A\t* 0? skip\r","82F9: D1 7D       CMPB  $7D\t* some variable\r","82FB: 24 1D       BCC   $831A\t* >=, skip\r","82FD: A7 05       STA   $0005,X\t\r","82FF: E7 06       STB   $0006,X\r","8301: 6F E2       CLR   ,-S\r","8303: 8D 47       BSR   $834C\r","8305: 86 FF       LDA   #$FF\r","8307: B7 81 05    STA   $8105\r","830A: 24 31       BCC   $833D\r","830C: CB 24       ADDB  #$24\r","830E: D1 7D       CMPB  $7D\r","8310: 24 2B       BCC   $833D\r","8312: E7 06       STB   $0006,X\r","8314: F7 81 05    STB   $8105\r","8317: 7E 84 23    JMP   $8423\r","\r","* unknown, probably part of previous routine\r","* X = ? probably voice parameter table\r","831A: 9E 3D       LDX   $3D\t* some variable\r","831C: 27 2D       BEQ   $834B\t* 0? rts\r","831E: 10 A3 05    CMPD  $0005,X\t\r","8321: 26 24       BNE   $8347\r","8323: D6 4D       LDB   $4D\r","8325: E7 09       STB   $0009,X\r","8327: CE 80 3D    LDU   #$803D\r","832A: BD 86 F6    JSR   $86F6\r","832D: CE 80 43    LDU   #$8043\r","8330: BD 87 22    JSR   $8722\r","8333: 86 41       LDA   #$41\r","8335: A7 07       STA   $0007,X\r","8337: EE 04       LDU   $0004,X\r","8339: A6 43       LDA   $0003,U\r","833B: 26 09       BNE   $8346\r","833D: 86 40       LDA   #$40\r","833F: A7 07       STA   $0007,X\r","8341: 1F 12       TFR   X,Y\r","8343: BD 8E 05    JSR   $8E05\t* calculate release times\r","8346: 39          RTS   \r","\r","8347: AE 84       LDX   ,X\r","8349: 20 D1       BRA   $831C\r","\r","834B: 39          RTS   \r","\r","* unknown\r","* clears A and B\r","* loops around some table, eight times\r","* if it runs out (b=64) then drop value from stack and return\r","834C: CE 80 4F    LDU   #$804F\t* some table?\r","834F: 4F          CLRA  \r","8350: 5F          CLRB  \r","8351: A6 C0       LDA   ,U+\t* get value\r","8353: 26 0E       BNE   $8363\t* 0, skip\r","8355: CB 08       ADDB  #$08\t* increment B by 8\r","8357: C1 40       CMPB  #$40\t* done it 8 times?\r","8359: 26 F6       BNE   $8351\t* no, loop\r","835B: EE E4       LDU   ,S\t* U contains return address\r","835D: 32 63       LEAS  $0003,S\t* unstack three bytes (return addr and ?)\r","835F: 1C FE       ANDCC #$FE\t* carry clear\r","8361: 6E C4       JMP   ,U\t* return to calling routine\r","\r","8363: 34 02       PSHS  A\t* save A\r","8365: 4F          CLRA  \t* clear A\r","8366: 67 E4       ASR   ,S\t* divide saved A by 2\r","8368: 24 0C       BCC   $8376\t* bottom bit 0?\r","836A: E1 63       CMPB  $0003,S * compare with value on stack\r","836C: 25 08       BCS   $8376\t* less, skip\r","836E: EE 61       LDU   $0001,S * return address\r","8370: 32 64       LEAS  $0004,S\t* unstack four bytes\r","8372: 1A 01       ORCC  #$01\t* carry set\r","8374: 6E C4       JMP   ,U\t* return\r","\r","8376: 5C          INCB  \r","8377: 4C          INCA  \r","8378: 81 08       CMPA  #$08\t* a!=8, loop back\r","837A: 26 EA       BNE   $8366\r","837C: 32 61       LEAS  $0001,S\t* unstack saved A\r","837E: 20 D7       BRA   $8357\t* loop back to B=64?\r","\r","8380: E6 24       LDB   $0004,Y\r","8382: C0 24       SUBB  #$24\r","8384: CE 80 4F    LDU   #$804F\r","8387: 1F 98       TFR   B,A\r","8389: 44          LSRA  \r","838A: 44          LSRA  \r","838B: 44          LSRA  \r","838C: C4 07       ANDB  #$07\r","838E: 8E 80 F4    LDX   #$80F4\t* table of values\r","* table at $80F4 runs\r","* 01 02 04 08 10 20 40 80\r","8391: E6 85       LDB   B,X\r","8393: EA C6       ORB   A,U\r","8395: E7 C6       STB   A,U\r","8397: E6 24       LDB   $0004,Y\r","8399: D1 7D       CMPB  $7D\r","839B: 25 20       BCS   $83BD\r","839D: A6 9F 80 A5 LDA   [$80A5,X]\r","83A1: 27 18       BEQ   $83BB\r","83A3: F1 81 06    CMPB  $8106\r","83A6: 25 04       BCS   $83AC\r","83A8: BD 87 38    JSR   $8738\r","83AB: 39          RTS   \r","\r","83AC: F7 81 06    STB   $8106\r","83AF: 86 01       LDA   #$01\r","83B1: B7 81 04    STA   $8104\r","83B4: 9E 45       LDX   $45\r","83B6: 27 37       BEQ   $83EF\r","83B8: 7E 84 1B    JMP   $841B\r","\r","83BB: 20 1E       BRA   $83DB\r","\r","83BD: A6 9F 80 A7 LDA   [$80A7,X]\r","83C1: 27 18       BEQ   $83DB\r","83C3: F1 81 05    CMPB  $8105\r","83C6: 25 04       BCS   $83CC\r","83C8: BD 87 38    JSR   $8738\r","83CB: 39          RTS   \r","\r","83CC: F7 81 05    STB   $8105\r","83CF: 86 02       LDA   #$02\r","83D1: B7 81 04    STA   $8104\r","83D4: 9E 47       LDX   $47\r","83D6: 27 17       BEQ   $83EF\r","83D8: 7E 84 1B    JMP   $841B\r","\r","83DB: 7F 81 04    CLR   $8104\r","83DE: A6 27       LDA   $0007,Y\r","83E0: 9E 41       LDX   $41\r","83E2: 27 0B       BEQ   $83EF\r","83E4: 10 A3 05    CMPD  $0005,X\r","83E7: 26 02       BNE   $83EB\r","83E9: 20 18       BRA   $8403\r","\r","83EB: AE 84       LDX   ,X\r","83ED: 20 F3       BRA   $83E2\r","\r","83EF: 9E 39       LDX   $39\t* voice parameter table?\r","83F1: 27 0C       BEQ   $83FF\t* 0? skip\r","83F3: BD 84 32    JSR   $8432\t* call\r","83F6: CE 80 39    LDU   #$8039\r","83F9: BD 86 F6    JSR   $86F6\r","83FC: 7E 84 43    JMP   $8443\r","\r","83FF: 9E 41       LDX   $41\r","8401: 27 0A       BEQ   $840D\t* 0? skip\r","8403: 8D 2D       BSR   $8432\t* call\r","8405: CE 80 41    LDU   #$8041\t* used in routine that calls release envs\r","8408: BD 86 F6    JSR   $86F6\r","840B: 20 36       BRA   $8443\r","\r","840D: 9E 3D       LDX   $3D\r","840F: 27 FE       BEQ   $840F\t* 0? hang!\r","8411: 8D 1F       BSR   $8432\r","8413: CE 80 3D    LDU   #$803D\r","8416: BD 86 F6    JSR   $86F6\r","8419: 20 28       BRA   $8443\r","\r","841B: 27 12       BEQ   $842F\r","841D: 8D 13       BSR   $8432\r","841F: A6 07       LDA   $0007,X\r","8421: 2A 0A       BPL   $842D\r","8423: EE 0C       LDU   $000C,X\r","8425: 1F 12       TFR   X,Y\r","8427: BD 8B CD    JSR   $8BCD\r","842A: 7E 8C 34    JMP   $8C34\r","\r","842D: 20 31       BRA   $8460\r","\r","842F: 7E 83 EF    JMP   $83EF\r","\r","* unknown\r","* probably to do with voice params?\r","8432: EC 24       LDD   $0004,Y\r","8434: A7 06       STA   $0006,X\r","8436: E7 08       STB   $0008,X\r","8438: A6 27       LDA   $0007,Y\r","843A: A7 05       STA   $0005,X\r","843C: 6F 88 18    CLR   $18,X\t* \r","843F: BD 87 38    JSR   $8738\t* \"mash values about\"\r","8442: 39          RTS   \r","\r","* unknown\r","8443: B6 81 04    LDA   $8104\r","8446: 81 00       CMPA  #$00\r","8448: 26 08       BNE   $8452\r","844A: CE 80 3F    LDU   #$803F\t* pointer to something?\r","844D: BD 87 22    JSR   $8722\r","8450: 20 0E       BRA   $8460\r","\r","8452: 81 01       CMPA  #$01\r","8454: 26 04       BNE   $845A\r","8456: 9F 45       STX   $45\r","8458: 20 06       BRA   $8460\r","\r","845A: 81 02       CMPA  #$02\r","845C: 26 02       BNE   $8460\r","845E: 9F 47       STX   $47\r","8460: 86 80       LDA   #$80\r","8462: A7 07       STA   $0007,X\r","8464: 1F 12       TFR   X,Y\r","8466: BD 8E 45    JSR   $8E45\r","8469: BD 8D 03    JSR   $8D03\r","846C: EE 2C       LDU   $000C,Y\r","846E: BD 8B CD    JSR   $8BCD\r","8471: EE 2C       LDU   $000C,Y\r","8473: AE 2E       LDX   $000E,Y\r","8475: 1A 10       ORCC  #$10\r","8477: 86 03       LDA   #$03\r","8479: AA A8 41    ORA   $41,Y\r","847C: A7 88 21    STA   $21,X\r","847F: A7 88 22    STA   $22,X\r","8482: 86 03       LDA   #$03\r","8484: AA A8 4C    ORA   $4C,Y\r","8487: A7 88 23    STA   $23,X\r","848A: A7 88 24    STA   $24,X\r","848D: 6F A8 17    CLR   $17,Y\r","8490: 34 10       PSHS  X\r","8492: BD 8C 34    JSR   $8C34\r","8495: EE 2C       LDU   $000C,Y\r","8497: AE 2E       LDX   $000E,Y\r","8499: BD 8A 78    JSR   $8A78\r","849C: 1A 10       ORCC  #$10\r","849E: 6C A8 19    INC   $19,Y\r","84A1: 31 A8 37    LEAY  $37,Y\r","84A4: 8D 1F       BSR   $84C5\r","84A6: 32 62       LEAS  $0002,S\r","84A8: 31 A8 C9    LEAY  -$37,Y\r","84AB: AE 2A       LDX   $000A,Y\r","84AD: A6 0B       LDA   $000B,X\r","84AF: 27 03       BEQ   $84B4\r","84B1: 33 C8 18    LEAU  $18,U\t* 36 bytes, ws?\r","84B4: EC 2E       LDD   $000E,Y\r","84B6: C3 00 02    ADDD  #$0002\r","84B9: 34 06       PSHS  B,A\r","84BB: 31 A8 42    LEAY  $42,Y\r","84BE: 8D 05       BSR   $84C5\r","84C0: 32 62       LEAS  $0002,S\r","84C2: 1C AF       ANDCC #$AF\r","84C4: 39          RTS   \r","\r","* unknown\r","84C5: AE C4       LDX   ,U\r","84C7: EC 81       LDD   ,X++\r","84C9: DD 49       STD   $49\r","84CB: EC 81       LDD   ,X++\r","84CD: DD 4B       STD   $4B\r","84CF: AF 22       STX   $0002,Y\r","84D1: AE 62       LDX   $0002,S\r","84D3: DC 49       LDD   $49\r","84D5: 6F 88 C1    CLR   -$3F,X\r","84D8: 6F 88 C2    CLR   -$3E,X\r","84DB: A7 01       STA   $0001,X\r","84DD: E7 88 41    STB   $41,X\r","84E0: DC 4B       LDD   $4B\r","84E2: A7 02       STA   $0002,X\r","84E4: E7 88 42    STB   $42,X\r","84E7: EC 44       LDD   $0004,U\r","84E9: ED 24       STD   $0004,Y\r","84EB: EC 46       LDD   $0006,U\r","84ED: ED 26       STD   $0006,Y\r","84EF: EC 42       LDD   $0002,U\r","84F1: ED 28       STD   $0008,Y\r","84F3: A6 48       LDA   $0008,U\r","84F5: 27 47       BEQ   $853E\r","84F7: A6 C8 14    LDA   $14,U\r","84FA: 27 05       BEQ   $8501\r","84FC: CC 88 A6    LDD   #$88A6\r","84FF: 20 03       BRA   $8504\r","\r","8501: CC 88 94    LDD   #$8894\r","8504: ED A4       STD   ,Y\r","8506: EC 22       LDD   $0002,Y\r","8508: 10 A3 42    CMPD  $0002,U\r","850B: 25 13       BCS   $8520\r","850D: EC 44       LDD   $0004,U\r","850F: ED 22       STD   $0002,Y\r","8511: EC 42       LDD   $0002,U\r","8513: A3 C4       SUBD  ,U\r","8515: C1 02       CMPB  #$02\r","8517: 26 07       BNE   $8520\r","8519: DC 49       LDD   $49\r","851B: A7 02       STA   $0002,X\r","851D: E7 88 42    STB   $42,X\r","8520: A6 C8 14    LDA   $14,U\r","8523: 27 0B       BEQ   $8530\r","8525: EC 44       LDD   $0004,U\r","8527: 10 A3 C4    CMPD  ,U\r","852A: 26 04       BNE   $8530\r","852C: 86 01       LDA   #$01\r","852E: 20 02       BRA   $8532\r","\r","8530: 86 0F       LDA   #$0F\r","8532: AA 2A       ORA   $000A,Y\r","8534: A7 88 22    STA   $22,X\r","8537: 84 FE       ANDA  #$FE\r","8539: A7 88 21    STA   $21,X\r","853C: 20 40       BRA   $857E\r","\r","853E: EC 42       LDD   $0002,U\r","8540: A3 C4       SUBD  ,U\r","8542: C1 02       CMPB  #$02\r","8544: 26 0E       BNE   $8554\r","8546: CC 88 E3    LDD   #$88E3\r","8549: ED A4       STD   ,Y\r","854B: 86 0A       LDA   #$0A\r","854D: AA 2A       ORA   $000A,Y\r","854F: A7 88 21    STA   $21,X\r","8552: 20 2A       BRA   $857E\r","\r","8554: C1 04       CMPB  #$04\r","8556: 26 15       BNE   $856D\r","8558: CC 88 DE    LDD   #$88DE\r","855B: ED A4       STD   ,Y\r","855D: 86 0B       LDA   #$0B\r","855F: AA 2A       ORA   $000A,Y\r","8561: A7 88 22    STA   $22,X\r","8564: 86 0E       LDA   #$0E\r","8566: AA 2A       ORA   $000A,Y\r","8568: A7 88 21    STA   $21,X\r","856B: 20 11       BRA   $857E\r","\r","856D: CC 88 C2    LDD   #$88C2\r","8570: ED A4       STD   ,Y\r","8572: 86 0F       LDA   #$0F\r","8574: AA 2A       ORA   $000A,Y\r","8576: A7 88 22    STA   $22,X\r","8579: 84 FE       ANDA  #$FE\r","857B: A7 88 21    STA   $21,X\r","857E: 39          RTS   \r","\r","* unknown, possibly voice param related\r","857F: A6 27       LDA   $0007,Y\r","8581: E6 24       LDB   $0004,Y\r","8583: 9E 3D       LDX   $3D\r","8585: 27 10       BEQ   $8597\r","8587: 10 A3 05    CMPD  $0005,X\r","858A: 26 07       BNE   $8593\r","858C: A6 25       LDA   $0005,Y\r","858E: A7 88 18    STA   $18,X\r","8591: 20 22       BRA   $85B5\r","\r","8593: AE 84       LDX   ,X\r","8595: 20 EE       BRA   $8585\r","\r","8597: 9E 45       LDX   $45\r","8599: 27 0C       BEQ   $85A7\r","859B: 10 A3 05    CMPD  $0005,X\r","859E: 26 07       BNE   $85A7\r","85A0: A6 25       LDA   $0005,Y\r","85A2: A7 88 18    STA   $18,X\r","85A5: 20 0E       BRA   $85B5\r","\r","85A7: 9E 47       LDX   $47\r","85A9: 26 0A       BNE   $85B5\r","85AB: 10 A3 05    CMPD  $0005,X\r","85AE: 26 05       BNE   $85B5\r","85B0: A6 25       LDA   $0005,Y\r","85B2: A7 88 18    STA   $18,X\r","85B5: BD 87 38    JSR   $8738\r","85B8: 39          RTS   \r","\r","85B9: AE 24       LDX   $0004,Y\r","85BB: A6 88 17    LDA   $17,X\r","85BE: 26 07       BNE   $85C7\r","85C0: 6C 88 17    INC   $17,X\r","85C3: BD 87 38    JSR   $8738\r","85C6: 39          RTS   \r","\r","85C7: 20 02       BRA   $85CB\r","\r","* unknown, $87e7 sets U to this\r","85C9: AE 24       LDX   $0004,Y\r","85CB: A6 26       LDA   $0006,Y\r","85CD: BD 87 38    JSR   $8738\r","85D0: A1 88 19    CMPA  $19,X\r","85D3: 27 01       BEQ   $85D6\r","85D5: 39          RTS   \r","\r","85D6: BD 8B C1    JSR   $8BC1\r","85D9: CE 00 00    LDU   #$0000\r","85DC: 9C 45       CPX   $45\r","85DE: 26 06       BNE   $85E6\r","85E0: DF 45       STU   $45\r","85E2: 8D 33       BSR   $8617\r","85E4: 20 23       BRA   $8609\r","\r","85E6: 9C 47       CPX   $47\r","85E8: 26 06       BNE   $85F0\r","85EA: DF 47       STU   $47\r","85EC: 8D 51       BSR   $863F\r","85EE: 20 19       BRA   $8609\r","\r","85F0: A6 07       LDA   $0007,X\r","85F2: 2A 08       BPL   $85FC\r","85F4: CE 80 3D    LDU   #$803D\r","85F7: BD 86 F6    JSR   $86F6\r","85FA: 20 0D       BRA   $8609\r","\r","85FC: 85 40       BITA  #$40\r","85FE: 27 08       BEQ   $8608\r","8600: CE 80 41    LDU   #$8041\t* used in routine that calls release envs\r","8603: BD 86 F6    JSR   $86F6\r","8606: 20 01       BRA   $8609\r","\r","8608: 39          RTS   \r","\r","8609: 86 00       LDA   #$00\r","860B: A7 07       STA   $0007,X\r","860D: CE 80 3B    LDU   #$803B\t* start of voice table?\r","8610: BD 87 22    JSR   $8722\t\r","8613: BD 88 44    JSR   $8844\t* set values in voice param?\r","8616: 39          RTS   \r","\r","* unknown\r","8617: 86 61       LDA   #$61\r","8619: 34 02       PSHS  A\r","861B: CE 80 56    LDU   #$8056\r","861E: C6 1F       LDB   #$1F\r","8620: A6 E4       LDA   ,S\r","8622: 91 7D       CMPA  $7D\r","8624: 25 11       BCS   $8637\r","8626: 1F 98       TFR   B,A\r","8628: A4 C4       ANDA  ,U\r","862A: A7 C4       STA   ,U\r","862C: 54          LSRB  \r","862D: 25 04       BCS   $8633\r","862F: C6 7F       LDB   #$7F\r","8631: 33 5F       LEAU  $FFFF,U\r","8633: 6A E4       DEC   ,S\r","8635: 20 E9       BRA   $8620\r","\r","8637: 35 02       PULS  A\r","8639: 86 FF       LDA   #$FF\r","863B: B7 81 06    STA   $8106\r","863E: 39          RTS   \r","\r","863F: 86 24       LDA   #$24\r","8641: 34 02       PSHS  A\r","8643: C6 FE       LDB   #$FE\r","8645: CE 80 4F    LDU   #$804F\r","8648: A6 E4       LDA   ,S\r","864A: 91 7D       CMPA  $7D\r","864C: 24 11       BCC   $865F\r","864E: 1F 98       TFR   B,A\r","8650: A4 C4       ANDA  ,U\r","8652: A7 C4       STA   ,U\r","8654: 58          ASLB  \r","8655: 25 04       BCS   $865B\r","8657: 33 41       LEAU  $0001,U\r","8659: C6 FE       LDB   #$FE\r","865B: 6C E4       INC   ,S\r","865D: 20 E9       BRA   $8648\r","\r","865F: 35 02       PULS  A\r","8661: 86 FF       LDA   #$FF\r","8663: B7 81 05    STA   $8105\r","8666: 39          RTS   \r","\r","* unknown\r","* zeros out seven bytes at $804f\r","8667: CE 80 4F    LDU   #$804F\r","866A: 6F C0       CLR   ,U+\r","866C: 11 83 80 56 CMPU  #$8056\r","8670: 23 F8       BLS   $866A\r","8672: 86 FF       LDA   #$FF\r","8674: B7 81 06    STA   $8106\r","8677: B7 81 05    STA   $8105\r","867A: 39          RTS   \r","\r","* unknown, $87dd sets U to this\r","* Y seems to point to voice parameter tables\r","867B: A6 25       LDA   $0005,Y\r","867D: BD 87 38    JSR   $8738\r","8680: 10 9E 41    LDY   $41\t* where is this set, and to what?\r","8683: 27 1A       BEQ   $869F\t* 0, rts\r","8685: E6 27       LDB   $0007,Y\r","8687: C5 01       BITB  #$01\r","8689: 27 0F       BEQ   $869A\t* 0, skip to next entry\r","868B: A1 25       CMPA  $0005,Y\r","868D: 26 0B       BNE   $869A\t* not the same, skip to next entry\r","868F: 34 02       PSHS  A\r","8691: BD 8E 05    JSR   $8E05\t* calculate release times\r","8694: 86 40       LDA   #$40\r","8696: A7 27       STA   $0007,Y * set to $40, why?\r","8698: 35 02       PULS  A\r","869A: 10 AE A4    LDY   ,Y\t* get next entry in voice table\r","869D: 20 E4       BRA   $8683\t* loop around\r","\r","869F: 39          RTS   \r","\r","* unknown, $87e2 sets U to this\r","* used to stop all voices?\r","86A0: AE 24       LDX   $0004,Y\r","86A2: 34 30       PSHS  Y,X\r","86A4: 10 9E 3D    LDY   $3D\r","86A7: 27 26       BEQ   $86CF\r","86A9: EC E4       LDD   ,S\r","86AB: 10 A3 24    CMPD  $0004,Y\r","86AE: 26 1A       BNE   $86CA\r","86B0: BD 8E 05    JSR   $8E05\t* calculate release times\r","86B3: 1F 21       TFR   Y,X\r","86B5: 86 40       LDA   #$40\r","86B7: A7 07       STA   $0007,X\r","86B9: CE 80 3D    LDU   #$803D\r","86BC: BD 86 F6    JSR   $86F6\r","86BF: CE 80 43    LDU   #$8043\r","86C2: BD 87 22    JSR   $8722\r","86C5: 10 9E 3D    LDY   $3D\r","86C8: 20 03       BRA   $86CD\r","\r","86CA: 10 AE A4    LDY   ,Y\r","86CD: 20 D8       BRA   $86A7\r","\r","86CF: BD 86 67    JSR   $8667\r","86D2: 10 9E 45    LDY   $45\r","86D5: 27 0A       BEQ   $86E1\r","86D7: EC E4       LDD   ,S\r","86D9: 10 A3 24    CMPD  $0004,Y\r","86DC: 26 03       BNE   $86E1\r","86DE: BD 8E 05    JSR   $8E05\t* calculate release times\r","86E1: 10 9E 47    LDY   $47\r","86E4: 27 0A       BEQ   $86F0\r","86E6: EC E4       LDD   ,S\r","86E8: 10 A3 24    CMPD  $0004,Y\r","86EB: 26 03       BNE   $86F0\r","86ED: BD 8E 05    JSR   $8E05\t* calculate release times\r","86F0: 35 30       PULS  X,Y\r","86F2: BD 87 38    JSR   $8738\r","86F5: 39          RTS   \r","\r","* unknown\r","86F6: 34 40       PSHS  U\t* save U\r","86F8: 33 42       LEAU  $0002,U\t* add 2\r","86FA: 34 40       PSHS  U\t* save U\r","86FC: EE 02       LDU   $0002,X\t* load u with (X+2)\r","86FE: 27 10       BEQ   $8710\t* 0? skip\r","8700: 10 AE 84    LDY   ,X\t* get value at X in Y\r","8703: 10 AF C4    STY   ,U\t* save Y in address at U\r","8706: 26 04       BNE   $870C\t* skip if zero\r","8708: EF F4       STU   [,S]\t* save U in address pointed to address at S\r","\r","870A: 20 02       BRA   $870E\t* skip\r","\r","870C: EF 22       STU   $0002,Y\t* store U at Y+2\r","870E: 20 0F       BRA   $871F\t* finish\r","\r","8710: 10 AE 84    LDY   ,X\r","8713: 10 AF F8 02 STY   [$02,S]\r","8717: 27 04       BEQ   $871D\r","8719: EF 22       STU   $0002,Y\r","871B: 20 02       BRA   $871F\r","\r","871D: EF F4       STU   [,S]\r","871F: 32 64       LEAS  $0004,S\t* unwind stack\r","8721: 39          RTS   \r","\r","* unknown\r","* called with U=$803B, $803F or $8043\r","* X = ?\r","8722: 10 AE C4    LDY   ,U\t* Y = (U)\r","8725: 26 04       BNE   $872B\t* skip if not 0\r","8727: AF 5E       STX   $FFFE,U\t* (U-2)=X\r","8729: 20 02       BRA   $872D\t* skip\r","\r","872B: AF A4       STX   ,Y\t* (Y)=X\r","872D: AF C4       STX   ,U\t* (U)=X \r","872F: 10 AF 02    STY   $0002,X\t* (X+2) = Y\r","8732: CE 00 00    LDU   #$0000\t* (X)=0\r","8735: EF 84       STU   ,X\r","8737: 39          RTS   \r","\r","* not sure, called from 9 places\r","* something to do with the keyboard?\r","* Y contains voice parameter table\r","8738: 1A 50       ORCC  #$50\t* disable interrupts\r","873A: 34 02       PSHS  A\t* save A\r","873C: B6 82 07    LDA   $8207\t* some variable\r","873F: 26 19       BNE   $875A\t* not zero? finish\r","8741: DE 57       LDU   $57\t* some variable\r","8743: 10 9F 57    STY   $57\t* set it to current voice parameter table\r","8746: EF A4       STU   ,Y\t* save U to address in Y (next table?)\r","8748: 96 5D       LDA   $5D\t* some variable\r","874A: 4C          INCA  \r","874B: 97 5D       STA   $5D\r","874D: 81 04       CMPA  #$04\t* is it 4?\r","874F: 23 09       BLS   $875A\t* <= 4, finish\r","8751: 96 64       LDA   $64\t* some variable\r","8753: 27 05       BEQ   $875A\t* zero? finish\r","8755: 0F 64       CLR   $64\t* zero it\r","8757: BD 89 76    JSR   $8976\t* ackkybd\r","875A: 1C AF       ANDCC #$AF\t* finish, enable ints\r","875C: 35 82       PULS  A,PC ;(PUL? PC=RTS)\r","\r","* constructs a couple of linked lists\r","* there is a list at $8107 with 30 entries of 8 bytes\r","* and the voice parameter list at $b052, 8 entries of 77 bytes\r","startup875e:\r","875E: BD AE 17    JSR   zerofilter\r","8761: 8E 80 38    LDX   #$8038\r","startup875e1:\r","8764: 6F 80       CLR   ,X+\t* clear 32 bytes\r","8766: 8C 80 57    CMPX  #$8057\r","8769: 25 F9       BCS   $8764\t* loop\r","876B: 86 FF       LDA   #$FF\r","876D: B7 81 05    STA   $8105\r","8770: B7 81 06    STA   $8106\r","8773: CC 81 07    LDD   #$8107\r","8776: DD 57       STD   $57\r","8778: 1F 01       TFR   D,X\t* save D in X\r","*** build some sort of linked list?\r","\r","* both D and X now contain $8107\r","\r","startup875e2:\r","877A: C3 00 08    ADDD  #$0008\t* X=$8107, D=$810f\r","877D: ED 84       STD   ,X\t* store\t\r","877F: 1F 01       TFR   D,X\t* move on 8 bytes\r","8781: 8C 81 FF    CMPX  #$81FF\t* end of table, 30 entries?\r","8784: 26 F4       BNE   $877A\t* no, loop\r","*** at this point $8107 contains #$810f, $810f contains #$8117 and so on\r","* it's a list of 30 entries with the first word pointing to the next\r","* block of eight bytes\r","\r","8786: 86 1F       LDA   #$1F\t* \r","8788: 97 5D       STA   $5D\t* some variable\r","878A: B7 82 07    STA   $8207\t* some variable\r","878D: CC 00 00    LDD   #$0000\r","8790: ED 84       STD   ,X\t* $81ff set to zero\r","8792: 8E B0 52    LDX   #$B052\t* voice parameter table?\r","8795: 9F 39       STX   $39\t* some variable\r","8797: 1F 10       TFR   X,D\t* save X in D\r","8799: 1F 13       TFR   X,U\t* save X in U\r","879B: C3 00 4D    ADDD  #$004D\t* 77 bytes per entry\r","879E: ED 84       STD   ,X\t* save at X\r","87A0: 9F 3B       STX   $3B\t* some variable\r","87A2: 34 06       PSHS  B,A\t* stack address of next entry\r","87A4: BD 88 44    JSR   $8844\t* X=$b052, d=next entry\r","87A7: 35 06       PULS  A,B\t* unstack address of next entry\r","87A9: 1F 01       TFR   D,X\t* save in X\r","87AB: EF 02       STU   $0002,X * second word of table contains $b052\r","87AD: 10 83 B2 BA CMPD  #$B2BA\t* eight entries yet?\r","87B1: 25 E4       BCS   $8797\t* loop\r","\r","*** at startup\r","*** by now all 32 osc control registers have been set up\r","*** in sets of four, channel from 0 to 15, one-shot, halted\r","* really? I don't think so...\r","\r","87B3: CC 00 00    LDD   #$0000\r","87B6: FD B0 54    STD   $B054\t* second word of first entry zeroed\r","87B9: CC 00 00    LDD   #$0000\r","87BC: ED C4       STD   ,U\t* first word of last entry zeroed\r","87BE: 39          RTS   \r","\r","* unknown\r","87BF: CE 82 AE    LDU   #$82AE\t* points to some routine\r","87C2: 20 0F       BRA   $87D3\r","\r","* unknown\r","* called after local on/off switch so safeish to say it enables a note\r","87C4: 34 02       PSHS  A\t* save A\r","87C6: 96 5D       LDA   $5D\t* some variable\r","87C8: 81 04       CMPA  #$04\t* 4?\r","87CA: 22 02       BHI   $87CE\t* higher? skip\r","87CC: 35 82       PULS  A,PC ;(PUL? PC=RTS)\r","\r","87CE: 35 02       PULS  A\t* restore A\r","87D0: CE 83 80    LDU   #$8380\t* points to some routine\r","87D3: 1E 10       EXG   X,D\t* not sure what's in either\r","87D5: 7E 87 F7    JMP   $87F7\t* jump\r","\r","87D8: CE 85 7F    LDU   #$857F\t* some routine\r","87DB: 20 F6       BRA   $87D3\r","\r","; called from FIRQ ISR\r","87DD: CE 86 7B    LDU   #$867B\t* points to some function\r","87E0: 20 15       BRA   $87F7\r","\r","; called from lots of places including FIRQ ISR\r","87E2: CE 86 A0    LDU   #$86A0\t* points to some function\r","87E5: 20 10       BRA   $87F7\r","\r","87E7: CE 85 C9    LDU   #$85C9\t* points to some function\r","87EA: 20 08       BRA   $87F4\r","\r","* is $37 the offset of the interrupt into RAM?\r","87EC: 1F 31       TFR   U,X\t* keep U in X\r","87EE: CE 85 B9    LDU   #$85B9\t* points to some function\r","87F1: 30 88 C9    LEAX  -$37,X\t* subtract 37 from X, why 37?\r","87F4: A6 88 19    LDA   $19,X\t* 25 bytes further on\r","\r","* called from further back\r","* handles routine pointed to earlier\r","87F7: 34 01       PSHS  CC\t* save state\r","87F9: 1A 50       ORCC  #$50\t; mask FIRQ, IRQ\r","87FB: BD 88 1F    JSR   $881F\t* call\r","87FE: 9E 5B       LDX   $5B\t* some variable\r","8800: 27 05       BEQ   $8807\t* skip\r","8802: 10 AF 84    STY   ,X\t* save Y into value at X\r","8805: 20 03       BRA   $880A\t* skip\r","\r","8807: 10 9F 59    STY   $59\t* save Y into some variable\r","880A: 10 9F 5B    STY   $5B\t* save Y into some variable\r","880D: CC 00 00    LDD   #$0000\r","8810: ED A4       STD   ,Y\t* clear whatever was at Y\r","8812: 96 38       LDA   $38\t* some variable\r","8814: 27 02       BEQ   $8818\t* return if not zero\r","8816: 35 81       PULS  CC,PC ;(PUL? PC=RTS)\r","\r","8818: 0A 38       DEC   $38\t* some variable\r","881A: 1C AF       ANDCC #$AF\t* enable interrupts\r","881C: 7E 82 90    JMP   $8290\t* jump to some routine\r","\r","* unknown\r","* something in that list must get poked at?\r","881F: 10 9E 57    LDY   $57\t* points at $8107 linked list\r","8822: 26 10       BNE   $8834\t* not zero, skip\r","8824: 34 56       PSHS  U,X,B,A\t* save regs\r","8826: BD 9F 60    JSR   $9F60\t* call\r","8829: BD 9F 6F    JSR   $9F6F\t* call\r","882C: 1A 50       ORCC  #$50\t* mask ints\r","882E: 0A 38       DEC   $38\t* some variable\r","8830: 35 56       PULS  A,B,X,U\t* restore regs\r","8832: 20 EB       BRA   $881F\t* loop\r","\r","8834: AF 24       STX   $0004,Y\t* pointers in wavesample block?\r","8836: ED 26       STD   $0006,Y\r","8838: EF 22       STU   $0002,Y\r","883A: AE A4       LDX   ,Y\t* X = next entry\r","883C: 9F 57       STX   $57\t* save in some variable\r","883E: 0A 5D       DEC   $5D\t* count down some variable\r","8840: 7F 82 07    CLR   $8207\t* clear some variable\r","8843: 39          RTS   \r","\r","* called from routine that sets up table\r","* addresses assume X = $b052\r","8844: 10 AE 0E    LDY   $000E,X\t* y=($b060)\r","8847: 86 03       LDA   #$03\r","8849: AA 88 41    ORA   $41,X\t* $b093\r","884C: A7 A8 21    STA   $21,Y\r","884F: A7 A8 22    STA   $22,Y\r","8852: 86 03       LDA   #$03\r","8854: AA 88 4C    ORA   $4C,X\t* $b095\r","8857: A7 A8 23    STA   $23,Y\r","885A: A7 A8 24    STA   $24,Y\r","885D: 39          RTS   \r","\r","* task list?\r","885E: 9E 5E       LDX   $5E\r","8860: 10 EF 81    STS   ,X++\r","8863: 8C B2 C6    CMPX  #$B2C6\t* run out of values?\r","8866: 25 03       BCS   $886B\t* no, continue\r","\r","*** jumped to from thing that fills in weird blocks\r","8868: 8E B2 BE    LDX   #$B2BE\tpoint to the prepared list\r","886B: 9F 5E       STX   $5E\tsave it in the variables\r","886D: 10 EE 84    LDS   ,X\tpoint the system stack at it\r","8870: 39          RTS   \tand jump to the first address\r","\r","docinterrupt:\r","8871: 4F          CLRA  \t* clear A\r","8872: 1F 02       TFR   D,Y\t* Y = $00, ($ECE0)\r","8874: EE A9 88 BB LDU   $88BB,Y\t* DOC quirk, add 0x41 for \"real\" address\r","8878: 57          ASRB  \r","8879: 10 8E EC 5F LDY   #$EC5F\t\t\r","887D: 31 A5       LEAY  B,Y\r","887F: AD D4       JSR   [,U]\t* jump to routine pointed to by value at U\r","\r","8881: 1C BF       ANDCC #$BF\r","8883: 1A 40       ORCC  #$40\r","8885: F6 EC E0    LDB   $ECE0\t\tinterrupt register\r","8888: 2B 07       BMI   $8891\t\tnot an interrupt\r","888A: 0C 60       INC   $60\t\tbump a counter\r","888C: 26 E3       BNE   docinterrupt\r","888E: BD F1 BB    JSR   qchipsetup\r","8891: 0F 60       CLR   $60\t\tclear the counter\r","8893: 3B          RTI   \r","\r","8894: AE 42       LDX   $0002,U\r","8896: EC 81       LDD   ,X++\r","8898: A7 21       STA   $0001,Y\r","889A: E7 A8 41    STB   $41,Y\r","889D: AC 46       CPX   $0006,U\r","889F: 26 02       BNE   $88A3\r","88A1: AE 44       LDX   $0004,U\r","88A3: AF 42       STX   $0002,U\r","88A5: 39          RTS   \r","\r","88A6: AE 42       LDX   $0002,U\r","88A8: EC 81       LDD   ,X++\r","88AA: A7 21       STA   $0001,Y\r","88AC: E7 A8 41    STB   $41,Y\r","88AF: AC 46       CPX   $0006,U\r","88B1: 26 0C       BNE   $88BF\r","88B3: 86 01       LDA   #$01\r","88B5: AA 4A       ORA   $000A,U\r","88B7: A7 A8 21    STA   $21,Y\r","88BA: CC 88 A5    LDD   #$88A5\r","88BD: A7 C4       STA   ,U\r","88BF: AF 42       STX   $0002,U\r","88C1: 39          RTS   \r","\r","88C2: AE 42       LDX   $0002,U\r","88C4: EC 81       LDD   ,X++\r","88C6: A7 21       STA   $0001,Y\r","88C8: E7 A8 41    STB   $41,Y\r","88CB: AF 42       STX   $0002,U\r","88CD: AC 48       CPX   $0008,U\r","88CF: 26 0C       BNE   $88DD\r","88D1: CC 88 DE    LDD   #$88DE\r","88D4: ED C4       STD   ,U\r","88D6: 86 0B       LDA   #$0B\r","88D8: AA 4A       ORA   $000A,U\r","88DA: A7 A8 21    STA   $21,Y\r","88DD: 39          RTS   \r","\r","88DE: CC 88 E3    LDD   #$88E3\r","88E1: 20 F1       BRA   $88D4\r","\r","88E3: 8E 88 A5    LDX   #$88A5\r","88E6: AF C4       STX   ,U\r","88E8: 86 03       LDA   #$03\r","88EA: AA 4A       ORA   $000A,U\r","88EC: A7 A8 21    STA   $21,Y\r","88EF: 4F          CLRA  \r","88F0: 58          ASLB  \r","88F1: C4 F8       ANDB  #$F8\r","88F3: 1F 02       TFR   D,Y\r","88F5: EE A9 88 BC LDU   $88BC,Y\r","88F9: 7E 87 EC    JMP   $87EC\r","\r","* voice interrupt vector pointers\r","* 32 words, 16 pairs of words\r","* these point to values in the voice parameter table\r","88FC: B0 89 B0 89 \r","8900: B0 94 B0 94 B0 D6 B0 D6 B0 E1 B0 E1 B1 23 B1 23 \r","8910: B1 2E B1 2E B1 70 B1 70 B1 7B B1 7B B1 BD B1 BD \r","8920: B1 C8 B1 C8 B2 0A B2 0A B2 15 B2 15 B2 57 B2 57 \r","8930: B2 62 B2 62 B2 A4 B2 A4 B2 AF B2 AF \r","\r","irqentry:\r","893C: 1A 40       ORCC  #$40\t\tmask firq\r","893E: B6 E2 0D    LDA   $E20D\t\tget VIA IFR\r","8941: 2A 1F       BPL   irqentry3\twasn't the VIA\r","8943: 85 04       BITA  #$04\t\tshift register\r","8945: 27 03       BEQ   irqentry1\tno, next...\r","8947: 7E 89 89    JMP   $8989\t\thandle shift register\r","\r","irqentry1:\r","894A: 85 20       BITA  #$20\t\ttimer 2?\r","894C: 27 03       BEQ   irqentry2\tno, next\r","894E: 7E F4 DF    JMP   timer2int\thandle timer2 interrupt\r","\r","irqentry2:\r","8951: 85 02       BITA  #$02\t\tca1 interrupt?\r","8953: 27 0D       BEQ   irqentry3\tno, next\r","8955: B6 E2 01    LDA   $E201\t* get VIA IORA\r","8958: 96 25       LDA   $25\t* ext seq clock jack\r","895A: 27 05       BEQ   $8961\t* 0? rts\r","895C: 0C E9       INC   $E9\t* increment clock\r","895E: BD A1 16    JSR   $A116\t* send MIDI clock\r","8961: 3B          RTI\r","\r","irqentry3:\r","8962: F6 EC E0    LDB   $ECE0\t\t* which osc triggered the int?\r","8965: 2B 03       BMI   irqentryend\t* none, finish up\r","8967: 7E 88 71    JMP   $8871\t\t* docinterrupt\r","irqentryend:\r","896A: 3B          RTI   \r","\r","*** called just after startup\r","* acknowledges keyboard controller\r","* sets up \"voice task\" to message parser\r","* loads A with the shift register value\r","896B: 8D 09       BSR   $8976\t* ackkybd\r","896D: CC 89 A1    LDD   #$89A1\t* note parser\r","8970: DD 61       STD   $61\t* voice task\r","8972: B6 E2 0A    LDA   $E20A\t* get shift register\r","8975: 39          RTS   \r","\r","*** disable interrupts, pulse CA2 low\r","*** acknowledge message from kybd controller\r","ackkybd:\r","8976: 34 01       PSHS  CC\r","8978: 1A 50       ORCC  #$50\r","897A: B6 E2 0C    LDA   $E20C\t\tfetch peripheral control reg\r","897D: 84 FD       ANDA  #$FD\t\tset CA2 low\r","897F: B7 E2 0C    STA   $E20C\t\twrite reg\r","8982: 8A 0E       ORA   #$0E\t\tset CA2 high\r","8984: B7 E2 0C    STA   $E20C\t\twrite reg\r","8987: 35 81       PULS  CC,PC \t\tsneaky trick to return\r","\r","* handle kybd shift register?\r","* what is X set to, surely if it was non-zero the jump would fail\r","8989: F6 E2 0A    LDB   $E20A\t* fetch shift register\r","898C: 1C BF       ANDCC #$BF\t* enable interrupts\r","898E: AD 9F 80 61 JSR   [$8061,X]\t* jump to stored voice task\r","8992: 1A 50       ORCC  #$50\t* disable interrupts\r","8994: 96 5D       LDA   $5D\t* some variable\r","8996: 81 04       CMPA  #$04\r","8998: 25 04       BCS   $899E\t* lower than 4?\r","899A: 8D DA       BSR   $8976\t* ackkybd\r","899C: 20 02       BRA   $89A0\t* bra rti\r","\r","899E: 0A 64       DEC   $64\t* some variable\r","89A0: 3B          RTI   \r","\r","* unknown\r","* parse MIDI?\r","89A1: C1 90       CMPB  #$90\t* note on?\r","89A3: 26 07       BNE   $89AC\t* no, next\r","89A5: CC 8A 25    LDD   #$8A25\t* set up note on?\r","89A8: DD 61       STD   $61\t* voice task?\r","89AA: 20 3F       BRA   $89EB\t* bra rts\r","\r","89AC: C1 80       CMPB  #$80\t* note off?\r","89AE: 26 07       BNE   $89B7\t* no, next\r","89B0: CC 89 EC    LDD   #$89EC\t* set up note off?\t\r","89B3: DD 61       STD   $61\t* voice task?\r","89B5: 20 34       BRA   $89EB\t* bra rts\r","\r","89B7: C1 B8       CMPB  #$B8\t* not sure \r","89B9: 26 19       BNE   $89D4\t* no, skip\r","89BB: 96 28       LDA   $28\t* pedal?\r","89BD: 26 0E       BNE   $89CD\t* non-zero\r","89BF: 86 01       LDA   #$01\t\r","89C1: 97 6B       STA   $6B\t* footswitch flag\r","89C3: C6 7F       LDB   #$7F\r","89C5: BD A0 DA    JSR   $A0DA\t* send MIDI sustain off\r","89C8: BD AD B6    JSR   $ADB6\t* call\r","89CB: 20 05       BRA   $89D2\t* bra rts\r","\r","89CD: 86 1B       LDA   #$1B\t\r","89CF: BD A4 04    JSR   $A404\t* put A in keystroke ringbuffer\r","89D2: 20 17       BRA   $89EB\t* bra rts\r","\r","89D4: C1 B9       CMPB  #$B9\t\r","89D6: 26 13       BNE   $89EB\t* no, jump rts\r","89D8: 96 28       LDA   $28\t* some variable\r","89DA: 26 0F       BNE   $89EB\t* non-zero, rts\r","89DC: 0F 6B       CLR   $6B\t* some variable\r","89DE: 5F          CLRB  \r","89DF: BD A0 DA    JSR   $A0DA\t* send MIDI sustain off\r","89E2: BD AD B6    JSR   $ADB6\t* call\r","89E5: 8E 80 68    LDX   #$8068\t* points to where modwheel is stored?\r","89E8: BD 87 DD    JSR   $87DD\t* call\r","89EB: 39          RTS   \r","\r","* set up note off?\r","89EC: CB 24       ADDB  #$24\r","89EE: D7 63       STB   $63\r","89F0: CC 89 F6    LDD   #$89F6\t* next task\r","89F3: DD 61       STD   $61\r","89F5: 39          RTS   \r","\r","* look up log curve\r","* note off velocity?\r","89F6: 8E FB FE    LDX   #$FBFE\t* log-ish scale in ROM\r","89F9: E6 85       LDB   B,X\r","89FB: 96 14       LDA   $14\t* velocity sensitivity\r","89FD: 80 1E       SUBA  #$1E\t* -30\r","89FF: 34 02       PSHS  A\r","8A01: EB E0       ADDB  ,S+\r","8A03: 28 02       BVC   $8A07\t* overflowed velocity?\r","8A05: C6 7F       LDB   #$7F\t* clamp\r","8A07: 2E 02       BGT   $8A0B\t* underflow?\r","8A09: C6 01       LDB   #$01\t* clamp\r","8A0B: 96 63       LDA   $63\t* note? velocity?\r","8A0D: CE 89 A1    LDU   #$89A1\t* note parser\r","8A10: DF 61       STU   $61\t* save it\r","8A12: BD A0 C5    JSR   $A0C5\t* send MIDI note off\r","8A15: BD AD BC    JSR   $ADBC\t* put note in sequencer\r","8A18: 96 63       LDA   $63\r","8A1A: 8E 80 68    LDX   #$8068\t* points to where modwheel is stored\r","8A1D: 0D 1C       TST   $1C\r","8A1F: 27 03       BEQ   $8A24\r","8A21: 7E 87 BF    JMP   $87BF\r","\r","8A24: 39          RTS   \r","\r","* set up note on?\r","8A25: CB 24       ADDB  #$24\r","8A27: D7 63       STB   $63\r","8A29: CC 8A 2F    LDD   #$8A2F\r","8A2C: DD 61       STD   $61\r","8A2E: 39          RTS   \r","\r","* unknown, velocity?\r","* note on velocity?\r","8A2F: 8E FB F8    LDX   #$FBF8\t* table of values in ROM\r","8A32: E6 85       LDB   B,X\t* get value\r","8A34: 96 14       LDA   $14\t* velocity sensitivity\r","8A36: 80 1E       SUBA  #$1E\t* -30\r","8A38: 34 02       PSHS  A\t* stack\r","8A3A: EB E0       ADDB  ,S+\t* add note velocity, drop\r","8A3C: 28 02       BVC   $8A40\t* too high?\r","8A3E: C6 7F       LDB   #$7F\t* clamp\r","8A40: 2E 02       BGT   $8A44\t* too low\r","8A42: C6 01       LDB   #$01\t* clamp\r","8A44: 96 63       LDA   $63\t* computed note\r","8A46: CE 89 A1    LDU   #$89A1\t* note parser\r","8A49: DF 61       STU   $61\t* voice task? \r","8A4B: BD A0 B9    JSR   $A0B9\t* send MIDI note on\r","8A4E: BD AD BA    JSR   $ADBA\t* call\r","8A51: 96 63       LDA   $63\t* computed note\r","8A53: 8E 80 68    LDX   #$8068\t* points to where modwheel is stored\r","8A56: 0D 1C       TST   $1C\t* local on/off\r","8A58: 27 03       BEQ   $8A5D\t* 0? skip to rts\r","8A5A: 7E 87 C4    JMP   $87C4\t* call\r","\r","8A5D: 39          RTS   \r","\r","* voice routing, suggested by Rainer Buchty\r","8A5E: 8E B0 52    LDX   #$B052\t* points to voice table\r","8A61: 10 8E EC 7F LDY   #$EC7F\t* points at top of DOC\r","8A65: CE E4 18    LDU   #$E418\t* points at first filter\r","8A68: 8D 23       BSR   $8A8D\t* call\r","8A6A: 30 88 4D    LEAX  $4D,X\t* add 77\r","8A6D: 31 24       LEAY  $0004,Y\t* add 4\r","8A6F: 8C B2 BA    CMPX  #$B2BA\t* funny table\r","8A72: 25 F4       BCS   $8A68\t* less, loop\r","8A74: 4F          CLRA  \r","8A75: A7 5F       STA   $FFFF,U\t* set DAC to zero\r","8A77: 39          RTS   \r","\r","8A78: 34 60       PSHS  U,Y\r","8A7A: 1E 12       EXG   X,Y\r","8A7C: 1F 20       TFR   Y,D\r","8A7E: 83 EC 7F    SUBD  #$EC7F\r","8A81: 54          LSRB  \r","8A82: 54          LSRB  \r","8A83: CE E4 18    LDU   #$E418\r","8A86: 33 C5       LEAU  B,U\r","8A88: 8D 03       BSR   $8A8D\r","8A8A: 35 60       PULS  Y,U\r","8A8C: 39          RTS   \r","\r","* unknown\r","* called from voice handler\r","8A8D: 1A 50       ORCC  #$50\t* mask ints\r","8A8F: EC 88 1A    LDD   $1A,X\t* task pointer?\r","8A92: 6E 98 1C    JMP   [$1C,X]\t* call next task\r","\r","* calculate envelope attack phase\r","8A95: E3 88 1E    ADDD  $1E,X\t* VCF attack\r","8A98: 25 05       BCS   $8A9F\t* lower, skip\r","8A9A: A1 88 20    CMPA  $20,X\t* VCF peak\r","8A9D: 25 0A       BCS   $8AA9\t* lower, skip\r","8A9F: CC 8A AE    LDD   #$8AAE\t* envelope decay\r","8AA2: ED 88 1C    STD   $1C,X\t* set task\r","8AA5: A6 88 20    LDA   $20,X\t* something in voice table\r","8AA8: 5F          CLRB  \r","8AA9: ED 88 1A    STD   $1A,X\t* something in voice table\r","8AAC: 20 29       BRA   $8AD7\t* update filter task\r","\r","* calculate envelope decay task\r","8AAE: A3 88 21    SUBD  $21,X\t* VCF Decay Time\r","8AB1: 25 05       BCS   $8AB8\t* lower, skip\r","8AB3: A1 88 23    CMPA  $23,X\t* VCF sustain\r","8AB6: 22 0A       BHI   $8AC2\t* skip\r","8AB8: CC 8A D7    LDD   #$8AD7\t* update filter task\r","8ABB: ED 88 1C    STD   $1C,X\t* set in voice table\r","8ABE: A6 88 23    LDA   $23,X\t* VCF sustain level\r","8AC1: 5F          CLRB\r","8AC2: ED 88 1A    STD   $1A,X\t* something in voice table\r","8AC5: 20 10       BRA   $8AD7\t* update filter task\r","\r","* calculate envelope release task\r","8AC7: A3 88 24    SUBD  $24,X\t* subtract Release A value\r","8ACA: 24 08       BCC   $8AD4\t* skip\r","8ACC: CC 8A D7    LDD   #$8AD7\t* update filter task\r","8ACF: ED 88 1C    STD   $1C,X\t* set in voice table\r","8AD2: 4F          CLRA  \r","8AD3: 5F          CLRB  \r","8AD4: ED 88 1A    STD   $1A,X\t* something in voice table (cleared)\r","\r","* update voice filter task\r","* X points to voice parameter table\r","* what does A contain, max filter?\r","8AD7: 1C AF       ANDCC #$AF\t\t; unmask IRQ and FIRQ\r","8AD9: A1 88 27    CMPA  $27,X\t\t; resonance (max is 40?)\r","8ADC: 23 03       BLS   $8AE1\t\t; less than stored value\r","8ADE: A6 88 27    LDA   $27,X\t\t; cutoff\r","8AE1: E6 88 28    LDB   $28,X\t\t; resonance\r","8AE4: BD F5 E7    JSR   setfilterdac\t; set DAC\r","8AE7: 1A 50       ORCC  #$50\t\t; mask interrupts\r","8AE9: EC 88 29    LDD   $29,X\t\t; address of next task?\r","8AEC: 6E 98 2B    JMP   [$2B,X]\t\t; go to it and good luck\r","\r","* task pointer can be set to this\r","8AEF: E3 88 2D    ADDD  $2D,X\r","8AF2: 25 05       BCS   $8AF9\r","8AF4: A1 88 2F    CMPA  $2F,X\r","8AF7: 25 11       BCS   $8B0A\r","8AF9: CC 8B 0F    LDD   #$8B0F\r","8AFC: ED 88 2B    STD   $2B,X\r","8AFF: A6 88 2F    LDA   $2F,X\r","8B02: 44          LSRA  \r","8B03: A7 88 2D    STA   $2D,X\r","8B06: A6 88 2F    LDA   $2F,X\r","8B09: 5F          CLRB  \r","8B0A: ED 88 29    STD   $29,X\r","8B0D: 20 72       BRA   $8B81\r","\r","* task pointer can be set to this\r","8B0F: A3 88 30    SUBD  $30,X\r","8B12: 25 05       BCS   $8B19\r","8B14: A1 88 32    CMPA  $32,X\r","8B17: 22 15       BHI   $8B2E\r","8B19: CC 8B 81    LDD   #$8B81\r","8B1C: ED 88 2B    STD   $2B,X\r","8B1F: 5F          CLRB  \r","8B20: A6 88 32    LDA   $32,X\r","8B23: 27 2C       BEQ   $8B51\r","8B25: 44          LSRA  \r","8B26: A7 88 2D    STA   $2D,X\r","8B29: A6 88 32    LDA   $32,X\r","8B2C: 20 16       BRA   $8B44\r","\r","8B2E: A1 88 2D    CMPA  $2D,X\r","8B31: 22 11       BHI   $8B44\r","8B33: 64 88 30    LSR   $30,X\r","8B36: 66 88 31    ROR   $31,X\r","8B39: 6C 88 31    INC   $31,X\r","8B3C: 34 02       PSHS  A\r","8B3E: 44          LSRA  \r","8B3F: A7 88 2D    STA   $2D,X\r","8B42: 35 02       PULS  A\r","8B44: ED 88 29    STD   $29,X\r","8B47: 20 38       BRA   $8B81\r","\r","* task pointer can be set to this\r","8B49: A3 88 33    SUBD  $33,X\r","8B4C: 25 03       BCS   $8B51\r","8B4E: 4D          TSTA  \r","8B4F: 26 17       BNE   $8B68\r","8B51: CC 8B BE    LDD   #$8BBE\t* unmask ints and return\r","8B54: ED 88 2B    STD   $2B,X\t* task pointer?\r","8B57: 5F          CLRB  \r","8B58: 4F          CLRA  \r","8B59: ED 88 29    STD   $29,X\r","8B5C: 34 70       PSHS  U,Y,X\r","8B5E: BD 87 E7    JSR   $87E7\r","8B61: EC 88 29    LDD   $29,X\r","8B64: 35 70       PULS  X,Y,U\r","8B66: 20 19       BRA   $8B81\r","\r","8B68: A1 88 2D    CMPA  $2D,X\r","8B6B: 22 11       BHI   $8B7E\r","8B6D: 64 88 33    LSR   $33,X\r","8B70: 66 88 34    ROR   $34,X\r","8B73: 6C 88 34    INC   $34,X\r","8B76: 34 02       PSHS  A\r","8B78: 44          LSRA  \r","8B79: A7 88 2D    STA   $2D,X\r","8B7C: 35 02       PULS  A\r","8B7E: ED 88 29    STD   $29,X\r","* task pointer can be set to this\r","8B81: E6 88 36    LDB   $36,X\r","8B84: 26 11       BNE   $8B97\r","8B86: D6 1E       LDB   $1E\t* mix mod source\r","8B88: C1 09       CMPB  #$09\t* poly aftertouch\r","8B8A: 26 05       BNE   $8B91\t* no\r","8B8C: E6 88 18    LDB   $18,X\t* could be VCF offset?\r","8B8F: 20 03       BRA   $8B94\r","\r","8B91: E6 98 04    LDB   [$04,X]\r","8B94: 58          ASLB  \r","8B95: 20 02       BRA   $8B99\r","\r","8B97: C0 01       SUBB  #$01\r","8B99: 58          ASLB  \r","8B9A: 25 0F       BCS   $8BAB\r","8B9C: 34 46       PSHS  U,B,A\r","8B9E: 3D          MUL   \r","8B9F: 8B 07       ADDA  #$07\r","8BA1: A7 61       STA   $0001,S\r","8BA3: A6 E4       LDA   ,S\r","8BA5: 8B 07       ADDA  #$07\r","8BA7: A7 E4       STA   ,S\r","8BA9: 20 0E       BRA   $8BB9\r","\r","8BAB: 34 42       PSHS  U,A\r","8BAD: 53          COMB  \r","8BAE: 3D          MUL   \r","8BAF: 8B 07       ADDA  #$07\r","8BB1: 34 02       PSHS  A\r","8BB3: A6 61       LDA   $0001,S\r","8BB5: 8B 07       ADDA  #$07\r","8BB7: A7 61       STA   $0001,S\r","8BB9: BD F6 DD    JSR   unknown9\r","8BBC: 35 40       PULS  U\r","* task pointer can be set to this\r","8BBE: 1C AF       ANDCC #$AF\t; unmask FIRQ and IRQ\r","8BC0: 39          RTS   \r","\r","8BC1: 86 40       LDA   #$40\t* set filter release time?\r","8BC3: A7 88 24    STA   $24,X\t* this points to VCF release A\r","8BC6: CC 8A C7    LDD   #$8AC7\t* envelope release task\r","8BC9: ED 88 1C    STD   $1C,X\t* set task\r","8BCC: 39          RTS   \r","\r","* calculate tuning from note number\r","* Y points to voice param block\r","8BCD: E6 26       LDB   $0006,Y\t* note\r","8BCF: D1 7D       CMPB  $7D\t* max note = 125?\r","8BD1: 25 02       BCS   $8BD5\t* lower?\r","8BD3: C0 18       SUBB  #$18\t* no, subtract 24\r","8BD5: 4F          CLRA  \t* counter\r","8BD6: 4C          INCA  \t* add 1\r","8BD7: C0 0C       SUBB  #$0C\t* subtract 12 semitones\r","8BD9: 2A FB       BPL   $8BD6\t* if it's greater than zero, loop\r","8BDB: 4A          DECA  \t* back off one\r","8BDC: CB 0C       ADDB  #$0C\t* add the last octave back\r","8BDE: 8E 8B F1    LDX   #$8BF1\t* point to the lookup table\r","8BE1: E6 85       LDB   B,X\t* fetch the corresponding value\r","8BE3: 83 03 B1    SUBD  #$03B1\t* 945?\r","8BE6: E3 49       ADDD  $0009,U\t* not sure what's here, prog?\r","8BE8: 2A 01       BPL   $8BEB\t* skip if positive\r","8BEA: 4F          CLRA  \r","8BEB: ED A8 10    STD   $10,Y\t* save tuning word in voice params\r","8BEE: 7E 8C A0    JMP   $8CA0\t* jump\r","\r","* lookup table\r","8BF1: 00 15 2B 40 55 6B 80 95 AB C0 D5 EB \r","\r","8BFD: 8E 80 68    LDX   #$8068\t* points to where modwheel is stored\r","8C00: FC 80 11    LDD   $8011\t* tuning in B?\r","8C03: E3 01       ADDD  $0001,X\t* add to tuning\r","8C05: ED 05       STD   $0005,X\t* save\r","8C07: 30 07       LEAX  $0007,X\t* move on 7 bytes\r","8C09: 8C 80 7D    CMPX  #$807D\r","8C0C: 25 F2       BCS   $8C00\t* not 21 bytes yet\r","8C0E: 10 8E B0 52 LDY   #$B052\t* voice parameter table\r","8C12: 0C 4E       INC   $4E\t* some variable\r","8C14: BD 8C 34    JSR   $8C34\t* \"lfo\" routine?\r","8C17: 31 A8 4D    LEAY  $4D,Y\t* next voice\r","8C1A: 34 20       PSHS  Y\t* save y\r","8C1C: BD 82 8C    JSR   $828C\t* some routine\r","8C1F: 10 AE E4    LDY   ,S\t* reload Y but don't pop\r","8C22: 10 8C B1 86 CMPY  #$B186\t* four voices done?\r","8C26: 26 03       BNE   $8C2B\t* no, skip\r","8C28: BD 88 5E    JSR   $885E\t* handle some sort of task list?\r","8C2B: 35 20       PULS  Y\t* unstack Y\r","8C2D: 10 8C B2 BA CMPY  #$B2BA\t* eight voices done?\r","8C31: 25 DF       BCS   $8C12\t* no, loop\r","8C33: 39          RTS\r","\r","* unknown\r","* lfo?\r","* calculate pitch?\r","8C34: EE 24       LDU   $0004,Y\r","8C36: E6 A8 14    LDB   $14,Y\t* \r","8C39: 26 14       BNE   $8C4F\r","8C3B: 96 1D       LDA   $1D\t* lfo mod source\r","8C3D: 81 09       CMPA  #$09\t* poly aftertouch\r","8C3F: 26 05       BNE   $8C46\r","8C41: E6 A8 18    LDB   $18,Y\t* \r","8C44: 20 02       BRA   $8C48\r","\r","8C46: E6 44       LDB   $0004,U\t* if U is program-for-voice, osc mix?\r","8C48: 8E F7 7D    LDX   #$F77D\t* points to a curve lookup table\r","8C4B: E6 85       LDB   B,X\r","8C4D: 20 01       BRA   $8C50\r","\r","8C4F: 5A          DECB  \r","8C50: A6 A8 13    LDA   $13,Y\r","8C53: AB A8 12    ADDA  $12,Y\r","8C56: A7 A8 12    STA   $12,Y\r","8C59: 8E F8 CD    LDX   #$F8CD\t* lookup table?\r","8C5C: A6 86       LDA   A,X\r","8C5E: 2A 05       BPL   $8C65\r","8C60: 40          NEGA  \r","8C61: 3D          MUL   \r","8C62: 40          NEGA  \r","8C63: 20 01       BRA   $8C66\r","\r","8C65: 3D          MUL   \r","8C66: 1F 89       TFR   A,B\r","8C68: 1D          SEX   \r","8C69: E3 45       ADDD  $0005,U\r","8C6B: E3 A8 10    ADDD  $10,Y\r","8C6E: BD F5 14    JSR   unknown1\t* odd lookup routine\r","8C71: 34 06       PSHS  B,A\r","8C73: EB A8 15    ADDB  $15,Y\t* detune value?\r","8C76: 89 00       ADCA  #$00\r","8C78: 34 06       PSHS  B,A\r","8C7A: AE 2E       LDX   $000E,Y\r","8C7C: BD F5 F1    JSR   unknown8\r","8C7F: 39          RTS   \r","\r","* initialise voice params\r","8C80: 10 8E B0 52 LDY   #$B052\t* voice params\r","8C84: CC 8A D7    LDD   #$8AD7\t* update filter task\r","8C87: ED A8 1C    STD   $1C,Y\t* voice task pointer\r","8C8A: 6F A8 1A    CLR   $1A,Y\t* unknown\r","8C8D: CC 8B BE    LDD   #$8BBE\t* unmask ints and return\r","8C90: ED A8 2B    STD   $2B,Y\t* next task?\r","8C93: 6F A8 29    CLR   $29,Y\t* unknown\r","8C96: 31 A8 4D    LEAY  $4D,Y\t* next voice, 77 bytes\r","8C99: 10 8C B2 BA CMPY  #$B2BA\t* last voice?\r","8C9D: 25 E5       BCS   $8C84\t* loop\r","8C9F: 39          RTS   \r","\r","* unknown\r","* Y might point to voice params\r","* U might point to wavesample params?\r","8CA0: AE 2A       LDX   $000A,Y\r","8CA2: A6 26       LDA   $0006,Y\t* note?\r","8CA4: 80 18       SUBA  #$18\t* subtract 24\r","8CA6: 2A 01       BPL   $8CA9\t* too low?\r","8CA8: 4F          CLRA  \t* clamp\r","8CA9: E6 08       LDB   $0008,X\t* keyboard track\r","8CAB: 3D          MUL \t\t* \r","8CAC: 46          RORA\r","8CAD: 56          RORB\t\t* /2  \r","8CAE: 34 04       PSHS  B\t* b = computed filter\r","8CB0: E6 A8 16    LDB   $16,Y\t* filter offset, if Y starts at $b052\r","8CB3: 1D          SEX   \t* extend sign bit, now it's 16 bit\r","8CB4: EB E0       ADDB  ,S+\t* add B to previously stacked B\r","8CB6: 89 00       ADCA  #$00\t* propagate carry\r","8CB8: EB 06       ADDB  $0006,X\t* cutoff\r","8CBA: 89 00       ADCA  #$00\t* propagate carry\r","8CBC: EB 4C       ADDB  $000C,U\t* relative filter freq\r","8CBE: 89 00       ADCA  #$00\t* propagate carry, sets zero?\r","8CC0: 27 07       BEQ   $8CC9\t* skip if zero\r","8CC2: 2A 03       BPL   $8CC7\t* below zero?\r","8CC4: 5F          CLRB\t\t* clamp\r","8CC5: 20 02       BRA   $8CC9\t* skip\r","\r","8CC7: C6 FF       LDB   #$FF\t* overflow, clamp\r","8CC9: D7 65       STB   $65\t* cutoff\r","8CCB: A6 A8 1A    LDA   $1A,Y\t* thing the envelope fiddles with\r","8CCE: A0 A8 26    SUBA  $26,Y\t* \r","8CD1: 9B 65       ADDA  $65\t* add velocity\r","8CD3: 24 02       BCC   $8CD7\t* too large?\r","8CD5: 86 FF       LDA   #$FF\t* clamp\r","8CD7: A7 A8 1A    STA   $1A,Y\t* store\r","8CDA: A6 A8 20    LDA   $20,Y\t* VCF peak\r","8CDD: A0 A8 26    SUBA  $26,Y\t* ? \r","8CE0: 9B 65       ADDA  $65\t* add velocity\r","8CE2: 24 02       BCC   $8CE6\t* too large\r","8CE4: 86 FF       LDA   #$FF\t* clamp\r","8CE6: A7 A8 20    STA   $20,Y\t* store\r","8CE9: A6 A8 23    LDA   $23,Y\t* VCF sustain\r","8CEC: A0 A8 26    SUBA  $26,Y\t* subtract \r","8CEF: 9B 65       ADDA  $65\t* add velocity\r","8CF1: 24 02       BCC   $8CF5\t* too large\r","8CF3: 86 FF       LDA   #$FF\t* clamp\r","8CF5: A7 A8 23    STA   $23,Y\t* store in VCF sustain\r","8CF8: E7 A8 26    STB   $26,Y\t* store velocity?\r","8CFB: A6 4D       LDA   $000D,U\t* max filter frequency\r","8CFD: 8B 39       ADDA  #$39\r","8CFF: A7 A8 27    STA   $27,Y\t* cutoff?\r","8D02: 39          RTS   \r","\r","* voice assigner maybe?\r","* Y probably points to voice\r","* X points to program? program+1?\r","8D03: AE 2A       LDX   $000A,Y * X points to program\r","8D05: EE 2C       LDU   $000C,Y * U points to wavesample\r","8D07: B6 80 15    LDA   $8015\t* keyboard balance\r","8D0A: 8C B7 6F    CMPX  #$B76F\t* some table?\r","8D0D: 24 0C       BCC   $8D1B\t* higher or same, skip\r","8D0F: 48          ASLA \t\t* multiply by 2 \r","8D10: 81 80       CMPA  #$80\r","8D12: 22 04       BHI   $8D18\t* >128, skip\r","8D14: 86 7F       LDA   #$7F\t* clamp\r","8D16: 20 01       BRA   $8D19\t* skip\r","\r","8D18: 40          NEGA  \r","8D19: 20 05       BRA   $8D20\t* skip\r","\r","8D1B: 48          ASLA \t\t* keyboard balance * 2 \r","8D1C: 2A 02       BPL   $8D20\t* bit 7 set, skip\r","8D1E: 86 7F       LDA   #$7F\t* clamp\r","8D20: 8B 20       ADDA  #$20\t* add 32, why?\r","8D22: E6 4B       LDB   $000B,U\t* \r","8D24: 58          ASLB  \r","8D25: 58          ASLB \t\t* multiply by 4 \r","8D26: 3D          MUL   \t* multiply by A\r","8D27: 97 67       STA   $67\t* some variable\r","8D29: A6 28       LDA   $0008,Y\t* voice velocity?\r","8D2B: 97 65       STA   $65\t* key velocity\r","8D2D: A6 26       LDA   $0006,Y * voice note\r","8D2F: 80 24       SUBA  #$24\t* subtract offset\r","8D31: 97 66       STA   $66\t* note, lowest is 0\r","8D33: E6 03       LDB   $0003,X * detune\r","8D35: C1 01       CMPB  #$01\r","8D37: 27 05       BEQ   $8D3E\t* 1?\r","8D39: 81 10       CMPA  #$10\r","8D3B: 24 01       BCC   $8D3E\t* >=16\r","8D3D: 57          ASRB  \r","8D3E: E7 A8 15    STB   $15,Y\t* detune amount?\r","8D41: A6 07       LDA   $0007,X\t* resonance\r","8D43: A7 A8 28    STA   $28,Y\r","8D46: A6 01       LDA   $0001,X\t* LFO frequency\r","8D48: A7 A8 13    STA   $13,Y\r","8D4B: A6 02       LDA   $0002,X\t* LFO Depth\r","8D4D: A7 A8 14    STA   $14,Y\r","8D50: 6F A8 12    CLR   $12,Y\r","8D53: A6 05       LDA   $0005,X\t* mix vel sens\r","8D55: 27 0E       BEQ   $8D65\r","8D57: 80 04       SUBA  #$04\r","8D59: D6 65       LDB   $65\t* velocity\r","8D5B: 48          ASLA  \r","8D5C: 58          ASLB  \r","8D5D: 3D          MUL   \r","8D5E: 4C          INCA  \r","8D5F: AB 04       ADDA  $0004,X\t* osc mix\r","8D61: 24 02       BCC   $8D65\t* too high\r","8D63: 86 FF       LDA   #$FF\t* clamp\r","8D65: A7 A8 36    STA   $36,Y\t* mix?\r","8D68: 4F          CLRA  \r","8D69: 5F          CLRB  \r","8D6A: ED A8 29    STD   $29,Y\t\r","8D6D: ED A8 1A    STD   $1A,Y\r","8D70: A7 A8 26    STA   $26,Y\r","8D73: CC 8A 95    LDD   #$8A95\r","8D76: ED A8 1C    STD   $1C,Y\r","8D79: CC 8A EF    LDD   #$8AEF\r","8D7C: ED A8 2B    STD   $2B,Y\r","8D7F: CE F7 FD    LDU   #$F7FD\r","8D82: BD 8D A1    JSR   $8DA1 \t* calculate filter envelope\r","8D85: 30 0A       LEAX  $000A,X\t* move X for amplitude\r","8D87: 31 2F       LEAY  $000F,Y * move Y\r","8D89: BD 8D A1    JSR   $8DA1\t* calculate amplitude envelope\r","8D8C: 31 31       LEAY  $FFF1,Y\t* put Y back\r","8D8E: 96 67       LDA   $67\t* some variable\r","8D90: E6 A8 2F    LDB   $2F,Y\t* offset into voice param\r","8D93: 3D          MUL   \r","8D94: A7 A8 2F    STA   $2F,Y\t* save\r","8D97: 96 67       LDA   $67\t* some variable\r","8D99: E6 A8 32    LDB   $32,Y\t* voice param\r","8D9C: 3D          MUL   \r","8D9D: A7 A8 32    STA   $32,Y\t* save\r","8DA0: 39          RTS   \r","\r","* calculate envelope?\r","* assume X is program param block\r","* and Y is voice param block\r","8DA1: A6 88 11    LDA   $11,X\t* attack vel sense\r","8DA4: D6 65       LDB   $65\t* note velocity\r","8DA6: 3D          MUL   \r","8DA7: 40          NEGA \t\t* because the harder the note, the faster \r","8DA8: AB 0C       ADDA  $000C,X\t* add attack rate\r","8DAA: 8D 4A       BSR   $8DF6\t* call \r","8DAC: ED A8 1E    STD   $1E,Y\t* attack time\r","8DAF: A6 88 12    LDA   $12,X\t* Peak vel sense\r","8DB2: D6 65       LDB   $65\t* note velocity\r","8DB4: 3D          MUL   \r","8DB5: AB 0D       ADDA  $000D,X\t* Peak level\r","8DB7: 2A 01       BPL   $8DBA\t* gone negative?\r","8DB9: 4F          CLRA  \t* clamp to zero\r","8DBA: 81 1F       CMPA  #$1F\t* offscale?\r","8DBC: 23 02       BLS   $8DC0\t* no\r","8DBE: 86 1F       LDA   #$1F\t* yes, clamp\r","8DC0: 34 02       PSHS  A\t* save a\r","8DC2: 48          ASLA  \t* multiply by 8?\r","8DC3: 48          ASLA  \r","8DC4: 48          ASLA  \r","8DC5: A7 A8 20    STA   $20,Y\t* save in parameter block\r","8DC8: A6 88 13    LDA   $13,X\t* decay keyscale\r","8DCB: D6 66       LDB   $66\t* note number?\r","8DCD: 3D          MUL   \r","8DCE: 40          NEGA \t\t* shortens note \r","8DCF: 67 E4       ASR   ,S\t* divide top of stack by 4\r","8DD1: 67 E4       ASR   ,S\r","8DD3: A0 E0       SUBA  ,S+\t* subtract and discard\r","8DD5: 8B 08       ADDA  #$08\t* add 8\r","8DD7: AB 0E       ADDA  $000E,X\t* decay time\r","8DD9: 8D 1B       BSR   $8DF6\t* call\r","8DDB: ED A8 21    STD   $21,Y\t* save in parameter block\r","8DDE: A6 88 14    LDA   $14,X\t* sustain velocity\r","8DE1: D6 65       LDB   $65\t* velocity\r","8DE3: 3D          MUL   \r","8DE4: AB 0F       ADDA  $000F,X\t* sustain level\r","8DE6: 2A 01       BPL   $8DE9\t* clamp\r","8DE8: 4F          CLRA  \r","8DE9: 81 1F       CMPA  #$1F\t* offscale?\r","8DEB: 23 02       BLS   $8DEF\t* clamp\r","8DED: 86 1F       LDA   #$1F\r","8DEF: 48          ASLA  \r","8DF0: 48          ASLA  \r","8DF1: 48          ASLA  \r","8DF2: A7 A8 23    STA   $23,Y\t* save in parameter block\r","8DF5: 39          RTS   \r","\r","* unknown\r","* called from envelope calculation, seems to clamp values?\r","* called with a value from 0 to 31 in A and table pointer in U\r","* returns value from table in D\r","* table runs:\r","* $ff80 $0040 $002e $e020 $0017 $7010 $000b $b808\r","* $0006\t$6605 $1e04 $1003 $3302 $8f02 $1901 $9901\r","* $9901 $4701 $0600 $cf00 $a300 $8300 $6800 $5300\r","* $4200 $3600 $2900 $2100 $1a00 $1400 $1000 $0e00\r","\r","8DF6: 2A 03       BPL   $8DFB\t* greater than 0?\r","8DF8: 4F          CLRA\t\t* no, clamp\r","8DF9: 20 06       BRA   $8E01\t* skip\r","\r","8DFB: 81 1F       CMPA  #$1F\t* 31?\r","8DFD: 23 02       BLS   $8E01\t* <31, skip\r","8DFF: 86 1F       LDA   #$1F\t* clamp\r","8E01: 48          ASLA\t\t* *2\r","8E02: EC C6       LDD   A,U\t* base address of table\r","8E04: 39          RTS   \r","\r","* calculate release velocity\r","* Y points to voice parameter table\r","8E05: AE 2A       LDX   $000A,Y\t* X holds program-for-voice addr\r","8E07: CE F7 FD    LDU   #$F7FD\t* points to envelope lookup table\r","8E0A: CC 8A C7    LDD   #$8AC7\t* envelope release task\r","8E0D: ED A8 1C    STD   $1C,Y\t* store in update routine\r","8E10: CC 8B 49    LDD   #$8B49\t* points to some routine\r","8E13: ED A8 2B    STD   $2B,Y\t* store in end routine?\r","8E16: E6 29       LDB   $0009,Y\t* release velocity for voice?\r","8E18: A6 88 15    LDA   $15,X\t* VCF Release Velocity\r","8E1B: 3D          MUL   \r","8E1C: 40          NEGA  \r","8E1D: AB 88 10    ADDA  $10,X\t* VCF releasee\r","8E20: 8D D4       BSR   $8DF6\t* envelope lookup\r","8E22: ED A8 24    STD   $24,Y\t* VCF release word\r","8E25: E6 29       LDB   $0009,Y\t* release velocity for voice?\r","8E27: A6 88 1F    LDA   $1F,X\t* DCA release velocity\r","8E2A: 3D          MUL\r","8E2B: 40          NEGA  \r","8E2C: AB 88 1A    ADDA  $1A,X\t* DCA release\r","8E2F: E6 A8 29    LDB   $29,Y\t* some voice variable\r","8E32: 54          LSRB  \t* divide by 2\r","8E33: E7 A8 2D    STB   $2D,Y\t* some voice variable\r","8E36: 54          LSRB  \r","8E37: 54          LSRB  \r","8E38: 54          LSRB  \t* divide by 8\r","8E39: C0 08       SUBB  #$08\t* subtract 8\r","8E3B: 34 04       PSHS  B\t* save B\r","8E3D: A0 E0       SUBA  ,S+\t* subtract top of stack from a and drop\r","8E3F: 8D B5       BSR   $8DF6\t* table lookup\r","8E41: ED A8 33    STD   $33,Y\t* DCA release word\r","8E44: 39          RTS   \r","\r","8E45: E6 26       LDB   $0006,Y\r","8E47: C1 24       CMPB  #$24\r","8E49: 24 02       BCC   $8E4D\r","8E4B: C6 24       LDB   #$24\r","8E4D: C1 61       CMPB  #$61\r","8E4F: 23 02       BLS   $8E53\r","8E51: C6 61       LDB   #$61\r","8E53: CE 8E 4D    LDU   #$8E4D\r","8E56: A6 C5       LDA   B,U\r","8E58: 84 0F       ANDA  #$0F\r","8E5A: D1 7D       CMPB  $7D\r","8E5C: 24 07       BCC   $8E65\r","8E5E: 9E A7       LDX   $A7\r","8E60: CE 8E AF    LDU   #$8EAF\r","8E63: 20 05       BRA   $8E6A\r","\r","8E65: 9E A5       LDX   $A5\r","8E67: CE 8E BF    LDU   #$8EBF\r","8E6A: AF 2A       STX   $000A,Y\r","8E6C: EE C6       LDU   A,U\r","8E6E: EF 2C       STU   $000C,Y\r","8E70: 39          RTS   \r","\r","8E71: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","\r","8E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","8E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","8EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","\r","8EAF: B3 1E B3 36 B3 4E B3 66 B3 7E B3 96 B3 AE B3 C6\r","8EBF: B5 8F B5 A7 B5 BF B5 D7 B5 EF B6 07 B6 1F B6 37 \r","\r","* unknown\r","8ECF: 10 9E A7    LDY   $A7\t* lower program pointer\r","8ED2: 8E 8E AF    LDX   #$8EAF\t* lower ws addresses\r","8ED5: CE 8E 71    LDU   #$8E71\t* empty buffer?\r","8ED8: 4F          CLRA  \r","8ED9: 8D 11       BSR   $8EEC\t* call\r","8EDB: 34 02       PSHS  A\r","8EDD: 10 9E A5    LDY   $A5\t* upper program\r","8EE0: 8E 8E BF    LDX   #$8EBF\t* upper ws addresses\r","8EE3: 8D 07       BSR   $8EEC\t* call \r","8EE5: 35 02       PULS  A\r","8EE7: 8B 24       ADDA  #$24\t* +36\r","8EE9: 97 7D       STA   $7D\t* save in some variable\r","8EEB: 39          RTS   \r","\r","* find wavesample for key?\r","* takes program pointer in Y\r","* seems to get the initial wavesample value\r","* then checks to see if A > top key for ws\r","* loops around incrementing and storing A\r","8EEC: E6 2A       LDB   $000A,Y\t* initial wavesample\r","8EEE: 58          ASLB\r","8EEF: AE 85       LDX   B,X\t* fetch ws param addr\r","8EF1: A1 0E       CMPA  $000E,X * top key\r","8EF3: 22 05       BHI   $8EFA\t* higher, skip\r","8EF5: E7 C6       STB   A,U\t* save B into that empty buffer\r","8EF7: 4C          INCA  \t* bump a\r","8EF8: 20 F7       BRA   $8EF1\t* loop\r","\r","8EFA: 30 88 18    LEAX  $18,X\t* 36 bytes, next ws buffer\r","8EFD: CB 02       ADDB  #$02\t* next wavesample addr\r","8EFF: 6D 2B       TST   $000B,Y\t* mix mode sw?\r","8F01: 27 05       BEQ   $8F08\t* off?\r","8F03: 30 88 18    LEAX  $18,X\t* 36 bytes, next buffer\r","8F06: CB 02       ADDB  #$02\t* next wavesample addr\r","8F08: 81 3C       CMPA  #$3C\t* max top key is 61\r","8F0A: 22 04       BHI   $8F10\t* higher, skip\r","8F0C: C1 0E       CMPB  #$0E\t* last wavesample (14, 0-7*2)\r","8F0E: 23 E1       BLS   $8EF1\t* lower, loop back\r","8F10: 39          RTS   \r","\r","* unknown, something to do with loop values\r","* a contains value?\r","* b might be parameter to edit?\r","* looks up something\r","* 8FF9: 00 01 03 07 0F 1F 3F \r","8F11: 34 26       PSHS  Y,B,A\t* save regs\r","8F13: 4F          CLRA\r","8F14: 10 8C B5 8F CMPY  #$B58F\t* Y points to upper params?\r","8F18: 25 02       BCS   $8F1C\t* lower, jump\r","8F1A: 86 40       LDA   #$40\r","8F1C: 97 7E       STA   $7E\t* some variable\r","8F1E: BD 98 EB    JSR   $98EB\t* call\r","8F21: 35 26       PULS  A,B,Y\t* restore regs\r","8F23: 8E 8F F9    LDX   #$8FF9\t* points to a table\r","8F26: EE A4       LDU   ,Y\r","8F28: C1 08       CMPB  #$08\t* loop switch?\r","8F2A: 26 02       BNE   $8F2E\t* no, skip\r","8F2C: A7 A5       STA   B,Y\t* if (b=8) (Y+b)=a\r","8F2E: C1 0F       CMPB  #$0F\t* wavesample start?\r","8F30: 26 09       BNE   $8F3B\t* no, skip\r","8F32: A1 A8 10    CMPA  $10,Y\t\r","8F35: 22 21       BHI   $8F58\t* a>(y+16)? (ws end?)\r","8F37: A7 A5       STA   B,Y\t* (y+b)=a \r","8F39: 20 0A       BRA   $8F45\t* jump\r","\r","8F3B: C1 10       CMPB  #$10\t* wavesample end?\r","8F3D: 26 1D       BNE   $8F5C\t* no, jump\r","8F3F: A1 2F       CMPA  $000F,Y * a=ws start?\r","8F41: 23 15       BLS   $8F58\t* a<(y+15) (ws start?)\r","8F43: A7 A5       STA   B,Y\t* (b+y)=a\r","8F45: 6F 28       CLR   $0008,Y * loop switch off\r","8F47: 86 FF       LDA   #$FF\r","8F49: A7 A8 13    STA   $13,Y\t* loop end fine = $ff\r","8F4C: A6 A8 10    LDA   $10,Y\t* a=ws end\r","8F4F: 4A          DECA  \t* a--\r","8F50: A7 A8 11    STA   $11,Y\t* loop start\r","8F53: A7 A8 12    STA   $12,Y\t* loop end\r","8F56: 20 2F       BRA   $8F87\t* jump\r","\r","8F58: BD 99 41    JSR   $9941\t* call thing that sorts loop params\r","8F5B: 39          RTS   \r","\r","8F5C: C1 11       CMPB  #$11\t* loop start\r","8F5E: 26 0B       BNE   $8F6B\t* no, skip\r","8F60: A1 2F       CMPA  $000F,Y\t* higher or same than ws start?\r","8F62: 25 F4       BCS   $8F58\t* yes, sort it\r","8F64: A1 A8 12    CMPA  $12,Y\t* loop end? \r","8F67: 22 EF       BHI   $8F58\t* a>loop end?\r","8F69: A7 A5       STA   B,Y\t* no, set it\r","8F6B: C1 12       CMPB  #$12\t* loop end?\r","8F6D: 26 11       BNE   $8F80\t* no, skip\r","8F6F: A1 A8 11    CMPA  $11,Y\t* loop start\r","8F72: 25 E4       BCS   $8F58\t* a<loop start? sort it\r","8F74: A1 A8 10    CMPA  $10,Y\t* ws end\r","8F77: 22 DF       BHI   $8F58\t* higher? sort it\r","8F79: A7 A5       STA   B,Y\t* set loop end\r","8F7B: 86 FF       LDA   #$FF\t\r","8F7D: A7 A8 13    STA   $13,Y\t* set loop end fine to $ff\r","8F80: C1 13       CMPB  #$13\t* loop end fine?\r","8F82: 26 03       BNE   $8F87\t* no, skip\r","8F84: A7 A8 13    STA   $13,Y\t* just save it\r","8F87: A6 2F       LDA   $000F,Y\t* a=ws start\r","8F89: 0F 81       CLR   $81\t* some variable\r","8F8B: 6D 28       TST   $0008,Y\t* loop switch?\r","8F8D: 27 1B       BEQ   $8FAA\t* off, jump\r","8F8F: A1 A8 11    CMPA  $11,Y\t\r","8F92: 27 0A       BEQ   $8F9E\t* loop start = ws start? jump\r","8F94: 97 7F       STA   $7F\t* some variable\r","8F96: A6 A8 12    LDA   $12,Y\t* a=loop end\r","8F99: 97 80       STA   $80\t* some variable\r","8F9B: BD 8F C8    JSR   $8FC8\t* call\r","8F9E: 0C 81       INC   $81\t* some variable\r","8FA0: EF 24       STU   $0004,Y\t* loop start pointer = u?\r","8FA2: A6 A8 11    LDA   $11,Y\t* loop start\r","8FA5: E6 A8 12    LDB   $12,Y\t* loop end\r","8FA8: 20 03       BRA   $8FAD\t* jump\r","* loop is off\r","8FAA: E6 A8 10    LDB   $10,Y\t* b=ws end\r","8FAD: 97 7F       STA   $7F\t* some variable\r","8FAF: D7 80       STB   $80\t* some variable\r","8FB1: BD 8F C8    JSR   $8FC8\t* call\r","8FB4: EF 26       STU   $0006,Y * loop end pointer = u\r","8FB6: EF 22       STU   $0002,Y\t* sample end pointer = u\r","8FB8: 96 81       LDA   $81\t* some variable\r","8FBA: E6 A8 13    LDB   $13,Y\t* loop end fine\r","8FBD: 5C          INCB\r","8FBE: 27 01       BEQ   $8FC1\t* call\r","8FC0: 4F          CLRA  \r","8FC1: A7 A8 14    STA   $14,Y\t* free run flag\r","\r","8FC4: BD 99 41    JSR   $9941\t* fix loop params?\r","8FC7: 39          RTS   \r","\r","* called while setting loop params\r","8FC8: 96 7F       LDA   $7F\t* some variable\r","8FCA: A7 C0       STA   ,U+\t* (u++)=a\r","8FCC: 8A 80       ORA   #$80\t* ensure this terminates\r","8FCE: 5F          CLRB\t\t* b=0\r","8FCF: 44          LSRA  \t* shift a left into carry\r","8FD0: 25 04       BCS   $8FD6\t* if we've shifted all 0s out jump\r","8FD2: 5C          INCB  \t* b++\r","8FD3: 44          LSRA  \t* shift a left into carry\r","8FD4: 20 FA       BRA   $8FD0\t* loop\r","\r","8FD6: 96 7F       LDA   $7F\t* some variable\r","8FD8: AB 85       ADDA  B,X\t* a += (x+b)\r","8FDA: 0D 81       TST   $81\t* some variable\r","8FDC: 27 07       BEQ   $8FE5\t* 0? jump\r","8FDE: 91 80       CMPA  $80\t* some variable\r","8FE0: 23 03       BLS   $8FE5\t* less? Jump\r","8FE2: 5A          DECB  \t* b--\r","8FE3: 20 F1       BRA   $8FD6\t* loop\r","\r","8FE5: CB 08       ADDB  #$08\t* a+=8\r","8FE7: E6 85       LDB   B,X\t* b=(x+b)\r","8FE9: DA 7E       ORB   $7E\t* some variable\r","8FEB: E7 C0       STB   ,U+\t* (u++)=b\r","8FED: 91 80       CMPA  $80\r","8FEF: 24 07       BCC   $8FF8\t* a>=$80? end\r","8FF1: 4C          INCA  \t* a++\r","8FF2: 97 7F       STA   $7F\t* some variable\r","8FF4: 0F 81       CLR   $81\t* some variable\r","8FF6: 20 D2       BRA   $8FCA\t* loop right back\r","\r","8FF8: 39          RTS   \r","\r","8FF9: 00 01 03 07 0F 1F 3F \r","\r","9000: 7F 00 09 12 1B 24 2D 36 3F 40 00 00 00 00 00 \r","\r","*** called from weird jumping-off routine\r","900F: 96 2F       LDA   $2F\t* ISR counter, counts down at 200Hz?\r","9011: 2A 07       BPL   $901A\r","9013: 0C 2F       INC   $2F\t* ISR counter\r","9015: BD 8A 5E    JSR   $8A5E\t* voice routing update?\r","9018: 20 03       BRA   $901D\r","\r","901A: BD 88 5E    JSR   $885E\t* handle some sort of task list?\r","901D: 20 F0       BRA   $900F\r","\r","901F: BD 88 5E    JSR   $885E\t* handle some sort of task list?\r","9022: 96 30       LDA   $30\t* ISR counter, dec every 2nd int?\r","9024: 2A F9       BPL   $901F\r","9026: 0F 30       CLR   $30\t* decremented in isr as $36 increments\r","9028: BD 90 39    JSR   $9039\r","902B: BD 88 5E    JSR   $885E\t* handle some sort of task list?\r","902E: 96 30       LDA   $30\t* ISR counter, dec every 2nd int?\r","9030: 2A F9       BPL   $902B\r","9032: 0F 30       CLR   $30\r","9034: BD 8B FD    JSR   $8BFD\r","9037: 20 E6       BRA   $901F\r","\r","* handle pitch bend and mod wheel\r","9039: 1A 50       ORCC  #$50\t* mask interrupts\r","903B: B6 E2 00    LDA   $E200\t* VIA IORB\r","903E: 84 FB       ANDA  #$FB\t* AN0 = low\r","9040: 8A 08       ORA   #$08\t* AN1 = play\r","9042: B7 E2 00    STA   $E200\t* select pitch wheel\r","9045: 1C AF       ANDCC #$AF\r","9047: B6 EC E1    LDA   $ECE1\t* oscillator enable register\r","904A: B6 EC E2    LDA   $ECE2\t* DAC register, start conversion?\r","904D: BD 88 5E    JSR   $885E\t* handle some sort of task list?\r","9050: 1A 50       ORCC  #$50\r","9052: F6 EC E2    LDB   $ECE2\t* DAC register\r","9055: B6 E2 00    LDA   $E200\t* VIA IORB\r","9058: 8A 0C       ORA   #$0C\t* AN0, AN1 = high\r","905A: B7 E2 00    STA   $E200\t* select mod wheel\r","905D: 1C AF       ANDCC #$AF\r","905F: F7 90 0C    STB   $900C\t* save pitch wheel value\t\r","9062: 4F          CLRA  \r","9063: FB 90 0D    ADDB  $900D\t* add in previous value\r","9066: 89 00       ADCA  #$00\t* and carry into D\r","9068: FB 90 0E    ADDB  $900E\t* add the one before that\r","906B: 89 00       ADCA  #$00\t* and carry into D\r","906D: 47          ASRA\t\t* 16-bit divide by four  \t\r","906E: 56          RORB\r","906F: 47          ASRA\r","9070: 56          RORB\t\t* D now contains the average of the last three readings\r","9071: B6 EC E1    LDA   $ECE1\t* read the ADC\r","9074: B6 EC E2    LDA   $ECE2\t* read the ADC\r","9077: F0 90 0A    SUBB  $900A\t* offset computed at startup\r","907A: 2A 07       BPL   $9083\t* if it's over zero, skip ahead\r","907C: CB 08       ADDB  #$08\t* +8 for dead band\r","907E: 2B 01       BMI   $9081\t* still negative? skip ahead\r","9080: 5F          CLRB  \t* clear the value\r","9081: 20 05       BRA   $9088\r","\r","9083: C0 08       SUBB  #$08\t* -8 for dead band\r","9085: 2A 01       BPL   $9088\t* still positive, skip ahead\r","9087: 5F          CLRB  \t* clear the value\r","9088: CB 40       ADDB  #$40\t* out of dead band, get it between 0-$7f\r","908A: 28 02       BVC   $908E\t* too high?\r","908C: C6 7F       LDB   #$7F\t* clamp\r","908E: 2A 01       BPL   $9091\t* too low?\r","9090: 5F          CLRB  \t* clamp\r","9091: F1 90 09    CMPB  $9009\t* same as previous value?\r","9094: 27 0D       BEQ   $90A3\t* yes, skip ahead\r","9096: F7 90 09    STB   $9009\t* save new value\r","9099: BD A0 CF    JSR   $A0CF\t* send pitch bend message\r","909C: BD AD AF    JSR   $ADAF\t* ring buffer? A=0\r","909F: 8D 1F       BSR   $90C0\t* calculate pitch bend amount\r","90A1: DD 69       STD   $69\t* save computed pitch bend\r","90A3: FC 90 0C    LDD   $900C\r","90A6: FD 90 0D    STD   $900D\t* shift values for averaging\r","90A9: F6 EC E2    LDB   $ECE2\t* read ADC, pitch wheel?\r","90AC: 54          LSRB \t\t* divide by 2 \r","90AD: F1 90 0B    CMPB  $900B\t* has it changed?\r","90B0: 27 0D       BEQ   $90BF\t* no, rts\r","90B2: F7 90 0B    STB   $900B\t* yes, save it\r","90B5: D7 68       STB   $68\t* modwheel?\r","90B7: D7 6C       STB   $6C\t* modwheel?\r","90B9: BD A0 E2    JSR   $A0E2\t* MIDI control change\r","90BC: BD AD B2    JSR   $ADB2\t* ring buffer? A=1\r","90BF: 39          RTS   \r","\r","* unknown\r","* calculate pitch bend amount?\r","90C0: 86 AB       LDA   #$AB\t* 171?\r","90C2: C0 40       SUBB  #$40\t* subtract 64 from bend val\r","90C4: 2A 05       BPL   $90CB\t* >0? jump\r","90C6: 3D          MUL\r","90C7: 80 2B       SUBA  #$2B\t* subtract 43, why? 172/43=4, significant?\r","90C9: 20 06       BRA   $90D1\t* jump\r","\r","90CB: C1 3F       CMPB  #$3F\t* 63?\t\r","90CD: 26 01       BNE   $90D0\t* no, jump\r","90CF: 5C          INCB \t\t* b++\r","90D0: 3D          MUL  \t\t* d=a*b\r","90D1: 58          ASLB  \t* b*2\r","90D2: D6 13       LDB   $13\t* pitch bend range?\r","90D4: 49          ROLA  \r","90D5: 2A 05       BPL   $90DC\t* bit 7 set, jump\r","90D7: 3D          MUL   \r","90D8: 90 13       SUBA  $13\t* subtract bendrange\r","90DA: 20 01       BRA   $90DD\r","\r","90DC: 3D          MUL  \t\t* must admit I don't get this 16-bit /4?\r","90DD: 47          ASRA \t\t* A/2 \r","90DE: 56          RORB  \t* B/2 shifting in carry\r","90DF: 47          ASRA  \t* A/2\r","90E0: 56          RORB  \t* B/2 shifting in carry\r","90E1: 39          RTS   \r","\r","* pointed to by weird list\r","90E2: BD 9D 4B    JSR   $9D4B\r","90E5: 8D 02       BSR   $90E9\t* handle current keystroke\r","90E7: 20 F9       BRA   $90E2\r","\r","* unknown\r","* interpret keystroke\r","90E9: 96 AE       LDA   $AE\t* current keystroke\r","90EB: 81 0A       CMPA  #$0A\t* 10?\r","90ED: 24 04       BCC   $90F3\t* not a digit, try functions?\r","90EF: BD 92 58    JSR   $9258\t* call\r","90F2: 39          RTS   \r","\r","90F3: 96 AE       LDA   $AE\t* current keystroke\r","90F5: 81 10       CMPA  #$10\t* LOAD UPPER?\r","90F7: 25 08       BCS   $9101\t* less\r","90F9: 81 17       CMPA  #$17\t* SAVE SEQ?\r","90FB: 22 04       BHI   $9101\t* >, jump\r","90FD: BD 94 3B    JSR   $943B\t* call load/save button routine\r","9100: 39          RTS   \r","\r","9101: 96 AE       LDA   $AE\t* keystroke\r","9103: 81 18       CMPA  #$18\t* 24 keys\r","9105: 25 04       BCS   $910B\t* < 24, continue\r","9107: BD 95 F0    JSR   $95F0\t* call\r","910A: 39          RTS   \r","\r","910B: 8D 09       BSR   $9116\t* handle keypress\r","910D: 81 0E       CMPA  #$0E\t* ? maybe was it UP\r","910F: 27 D8       BEQ   $90E9\t* yes, max val?\r","9111: 81 0F       CMPA  #$0F\t* was it DOWN\r","9113: 27 D4       BEQ   $90E9\t* yes, min val?\r","9115: 39          RTS  \r","\r","* unknown, seems to get bit pattern for LEDs?\r","* handle keypresses?\r","9116: 96 AE       LDA   $AE\t* current keystroke\r","9118: 81 0B       CMPA  #$0B\t* CANCEL/STOP\r","911A: 26 08       BNE   $9124\t* no, skip\r","911C: BD AB 90    JSR   $AB90\t* something to do with sequencer\r","911F: BD 92 49    JSR   $9249\t* clear a bunch of variables to zero\r","9122: 20 07       BRA   $912B\t* skip\r","\r","9124: 81 0C       CMPA  #$0C\t* PARAM\r","9126: 26 13       BNE   $913B\t* no, skip\r","9128: BD 92 49    JSR   $9249\t* clear a bunch of variables to zero\r","912B: D6 8B       LDB   $8B\t* edit parameter\r","912D: BD 9D 2D    JSR   $9D2D\t* divide it by 10\r","9130: CE FB 4D    LDU   #$FB4D\t* LED patterns for 0-F\r","9133: A6 C6       LDA   A,U\t* get the values\r","9135: E6 C5       LDB   B,U\r","9137: DD B3       STD   $B3\t* LED bit pattern\r","9139: 4F          CLRA  \r","913A: 39          RTS   \r","\r","913B: 81 0D       CMPA  #$0D\t* VALUE\r","913D: 26 09       BNE   $9148\t* no, skip\r","913F: BD 92 49    JSR   $9249\t* clear a bunch of variables to zero\r","9142: 0C 83       INC   $83\t* some variable\r","9144: BD 99 8B    JSR   $998B\t* call\r","9147: 39          RTS   \r","\r","9148: 81 0E       CMPA  #$0E\t* UP\r","914A: 26 0C       BNE   $9158\t* no, skip\r","914C: 0D 83       TST   $83\t* some variable\r","914E: 27 F2       BEQ   $9142\t* 0, jump back to increment variable and call\r","9150: 97 88       STA   $88\t* some variable\r","9152: 86 01       LDA   #$01\r","9154: 97 84       STA   $84\t* editable? some variable\r","9156: 20 12       BRA   $916A\r","\r","9158: 81 0F       CMPA  #$0F\t* DOWN\r","915A: 10 26 00 3A LBNE  $9198\t* no, skip\r","915E: 0D 83       TST   $83\t* some variable\r","9160: 27 E0       BEQ   $9142\t* 0, jump back to increment and call\r","9162: 97 88       STA   $88\t* some variable\r","9164: 86 80       LDA   #$80\t* editable flag?\r","9166: 97 84       STA   $84\r","9168: 20 00       BRA   $916A\r","\r","916A: 86 C8       LDA   #$C8\r","916C: 97 87       STA   $87\t* decremented in timer handler\r","916E: 96 87       LDA   $87\r","9170: 97 32       STA   $32\t* decremented in timer handler\r","9172: BD 99 8B    JSR   $998B\t* edit values\r","9175: 7D 82 08    TST   $8208\t\r","9178: 27 02       BEQ   $917C\r","917A: 4F          CLRA  \r","917B: 39          RTS   \r","\r","917C: BD 9D 4B    JSR   $9D4B\r","917F: 96 88       LDA   $88\r","9181: 91 AE       CMPA  $AE\r","9183: 26 12       BNE   $9197\r","9185: 0D 32       TST   $32\t* some variable\r","9187: 26 F3       BNE   $917C\r","9189: C6 14       LDB   #$14\r","918B: D1 87       CMPB  $87\r","918D: 27 DF       BEQ   $916E\r","918F: D6 87       LDB   $87\r","9191: C0 3C       SUBB  #$3C\r","9193: D7 87       STB   $87\r","9195: 20 D7       BRA   $916E\r","\r","9197: 39          RTS   \r","\r","9198: 81 0A       CMPA  #$0A\r","919A: 10 26 00 A9 LBNE  $9247\r","919E: 96 82       LDA   $82\r","91A0: 81 04       CMPA  #$04\r","91A2: 10 26 00 96 LBNE  $923C\r","91A6: 96 85       LDA   $85\r","91A8: 81 03       CMPA  #$03\r","91AA: 26 01       BNE   $91AD\r","91AC: 39          RTS   \r","\r","91AD: 81 04       CMPA  #$04\r","91AF: 26 0E       BNE   $91BF\r","91B1: 96 E7       LDA   $E7\r","91B3: 81 06       CMPA  #$06\r","91B5: 26 06       BNE   $91BD\r","91B7: BD AB 60    JSR   $AB60\r","91BA: BD 96 F4    JSR   $96F4\t* show \"rS\"\r","91BD: 4F          CLRA  \r","91BE: 39          RTS   \r","\r","91BF: 81 08       CMPA  #$08\r","91C1: 26 10       BNE   $91D3\r","91C3: BD 9F B4    JSR   $9FB4\r","91C6: 0D BA       TST   $BA\r","91C8: 2B 06       BMI   $91D0\r","91CA: BD 92 49    JSR   $9249\t* clear a bunch of variables back to zero\r","91CD: 7E 91 2B    JMP   $912B\r","\r","91D0: 0F BA       CLR   $BA\r","91D2: 39          RTS   \r","\r","* unknown\r","91D3: 81 01       CMPA  #$01\r","91D5: 26 1A       BNE   $91F1\r","91D7: 0D 8C       TST   $8C\t* bank to save to?\r","91D9: 27 16       BEQ   $91F1\r","91DB: 96 90       LDA   $90\t* some variable\r","91DD: C6 03       LDB   #$03\r","91DF: 3D          MUL   \r","91E0: 34 04       PSHS  B\r","91E2: D6 8C       LDB   $8C\t* bank to save to?\r","91E4: 5A          DECB  \r","91E5: EB E0       ADDB  ,S+\r","91E7: 8E 82 09    LDX   #$8209\r","91EA: 96 91       LDA   $91\t* some variable\r","91EC: EA 86       ORB   A,X\r","91EE: BD A0 F2    JSR   $A0F2\t* send program change\r","91F1: BD 9E 83    JSR   $9E83\r","91F4: 7D 80 07    TST   fdcerr\r","91F7: 27 07       BEQ   $9200\r","91F9: BD 92 49    JSR   $9249\t* clear a bunch of variables back to zero\r","91FC: BD 94 31    JSR   $9431\t* set83898a\r","91FF: 39          RTS   \r","\r","9200: D6 85       LDB   $85\r","9202: C1 01       CMPB  #$01\r","9204: 26 2E       BNE   $9234\r","9206: 96 91       LDA   $91\r","9208: 27 04       BEQ   $920E\r","920A: 81 01       CMPA  #$01\r","920C: 27 16       BEQ   $9224\r","920E: 96 90       LDA   $90\r","9210: 97 8F       STA   $8F\r","9212: C6 24       LDB   #$24\r","9214: 3D          MUL   \r","9215: 10 8E B4 FE LDY   #$B4FE\r","9219: 31 AB       LEAY  D,Y\r","921B: 10 9F A7    STY   $A7\r","921E: 96 91       LDA   $91\r","9220: 81 02       CMPA  #$02\r","9222: 26 10       BNE   $9234\r","9224: 96 90       LDA   $90\r","9226: 97 8E       STA   $8E\r","9228: C6 24       LDB   #$24\r","922A: 3D          MUL   \r","922B: 10 8E B7 6F LDY   #$B76F\r","922F: 31 AB       LEAY  D,Y\r","9231: 10 9F A5    STY   $A5\r","9234: BD 8E CF    JSR   $8ECF\r","9237: 8D 10       BSR   $9249\t* clear a bunch of variables back to zero\r","9239: 16 FE EF    LBRA  $912B\r","\r","923C: 96 82       LDA   $82\r","923E: 81 05       CMPA  #$05\r","9240: 26 05       BNE   $9247\r","9242: 8D 05       BSR   $9249\t* clear a bunch of variables back to zero\r","9244: 16 FE E4    LBRA  $912B\r","\r","9247: 4F          CLRA  \r","9248: 39          RTS   \r","\r","* clear a bunch of variables to zero\r","9249: 0F 82       CLR   $82\t* used by save routine?\r","924B: 0F 85       CLR   $85\t* used by save routine?\r","924D: 0F 83       CLR   $83\t* some variable\r","924F: 0F 84       CLR   $84\t* value editable flag/up/down\r","9251: 0F 33       CLR   $33\t* decremented in ISR handler\r","9253: 0F 8A       CLR   $8A\t* some variable\r","9255: 0F 89       CLR   $89\t* some variable\r","9257: 39          RTS   \r","\r","* unknown\r","* handle some kind of upper/lower selection\r","9258: 10 8E FB 4D LDY   #$FB4D\t* bit pattern lookup table\r","925C: 96 82       LDA   $82\t* save routine uses this?\r","925E: 81 00       CMPA  #$00\t* 0?\r","9260: 10 26 00 44 LBNE  $92A8\t* no, skip\r","9264: 0D AE       TST   $AE\t* current keystroke\r","9266: 27 1C       BEQ   $9284\t* zero, skip\r","9268: 0D A4       TST   $A4\t* upper/lower bank for editing\r","926A: 26 04       BNE   $9270\t* upper\r","926C: C6 1C       LDB   #$1C\t* \"L\"\r","926E: 20 02       BRA   $9272\t* skip\r","\r","9270: C6 7C       LDB   #$7C\t* \"U\"\r","9272: 96 AE       LDA   $AE\t* current keystroke\r","9274: 97 8D       STA   $8D\t* saves bank selection keystroke?\r","9276: A6 A6       LDA   A,Y\t\r","9278: DD B3       STD   $B3\t* LED bit pattern\r","927A: BD 94 31    JSR   $9431\t* set83898a\r","927D: 0F 8A       CLR   $8A\r","927F: 86 01       LDA   #$01\r","9281: 97 82       STA   $82\r","9283: 39          RTS   \r","\r","9284: 0D A4       TST   $A4\r","9286: 26 09       BNE   $9291\r","9288: D6 8F       LDB   $8F\r","928A: 5C          INCB  \r","928B: E6 A5       LDB   B,Y\r","928D: 86 1C       LDA   #$1C\r","928F: 20 07       BRA   $9298\r","\r","9291: D6 8E       LDB   $8E\r","9293: 5C          INCB  \r","9294: E6 A5       LDB   B,Y\r","9296: 86 7C       LDA   #$7C\r","9298: DD B3       STD   $B3\t* LED bit pattern\r","929A: CC 80 05    LDD   #$8005\r","929D: 97 83       STA   $83\r","929F: D7 82       STB   $82\r","92A1: 86 01       LDA   #$01\r","92A3: 97 89       STA   $89\r","92A5: 0F 8A       CLR   $8A\r","92A7: 39          RTS   \r","\r","* jumped to if $82 is non-zero, only time it's read\r","* possibly used to enter second keystroke of two digit number?\r","92A8: 81 01       CMPA  #$01\r","92AA: 10 26 00 88 LBNE  $9336\t* call\r","92AE: BD 92 49    JSR   $9249\t* clear a bunch of variables back to zero\r","92B1: D6 AE       LDB   $AE\t* current keystroke\r","92B3: E6 A5       LDB   B,Y\t* look up LED bit pattern\r","92B5: D7 B4       STB   $B4\t* store it in LED pattern right digit\r","92B7: 96 8D       LDA   $8D\t* bank selection keystroke?\r","92B9: C6 0A       LDB   #$0A\r","92BB: 3D          MUL   \t* times 10\r","92BC: DB AE       ADDB  $AE\t* add keystroke\r","92BE: C1 0B       CMPB  #$0B\r","92C0: 25 0E       BCS   $92D0\r","92C2: CE 9F F3    LDU   #$9FF3\t* lookup table?\r","92C5: A6 C5       LDA   B,U\r","92C7: 27 07       BEQ   $92D0\r","92C9: 81 FF       CMPA  #$FF\r","92CB: 27 07       BEQ   $92D4\r","92CD: D7 8B       STB   $8B\r","92CF: 39          RTS   \r","\r","92D0: BD 94 31    JSR   $9431\t* set83898a\r","92D3: 39          RTS   \r","\r","* unknown, dispatcher?\r","* save handler\r","92D4: D7 8B       STB   $8B\t* edit parameter\r","92D6: 1F 98       TFR   B,A\t* keep it in A\r","92D8: 81 0B       CMPA  #$0B\t* 11 Save Lower\r","92DA: 26 08       BNE   $92E4\t* no, skip\r","92DC: 5F          CLRB  \r","92DD: D7 92       STB   $92\t* some variable = 0\r","92DF: C6 1C       LDB   #$1C\t* 28\r","92E1: 7E 92 FB    JMP   $92FB\r","\r","92E4: 81 0C       CMPA  #$0C\t* 12 Save Upper\r","92E6: 26 09       BNE   $92F1\t* no, skip\r","92E8: C6 01       LDB   #$01\r","92EA: D7 92       STB   $92\t* some variable = 1\r","92EC: C6 7C       LDB   #$7C\r","92EE: 7E 92 FB    JMP   $92FB\r","\r","92F1: 81 0D       CMPA  #$0D\t* 13 Save All\r","92F3: 26 14       BNE   $9309\r","92F5: C6 02       LDB   #$02\r","92F7: D7 92       STB   $92\r","92F9: C6 EE       LDB   #$EE\r","92FB: 86 B6       LDA   #$B6\r","92FD: DD B3       STD   $B3\t* LED bit pattern, either \"SL\", \"SU\" or \"SA\"\r","92FF: 86 02       LDA   #$02\r","9301: 97 85       STA   $85\r","9303: 97 82       STA   $82\r","9305: BD 94 31    JSR   $9431\t* set83898a\r","9308: 39          RTS   \r","\r","9309: 81 0E       CMPA  #$0E\t* 14 = Save Parameters\r","930B: 26 10       BNE   $931D\r","930D: CC B6 CE    LDD   #$B6CE\t* \"SP\"\r","9310: DD B3       STD   $B3\t* LED bit pattern\r","9312: BD 94 31    JSR   $9431\t* set83898a\r","9315: CC 09 04    LDD   #$0904\r","9318: 97 85       STA   $85\r","931A: D7 82       STB   $82\r","931C: 39          RTS   \r","\r","931D: 81 0F       CMPA  #$0F\t* Param 15, Copy Lower\r","931F: 26 04       BNE   $9325\t* no, skip\r","9321: BD 9F 9A    JSR   $9F9A\t* call\r","9324: 39          RTS\r","\r","9325: 81 10       CMPA  #$10\t* Param 16, Copy Upper\r","9327: 26 04       BNE   $932D\t* no, skip\r","9329: BD 9F 9A    JSR   $9F9A\t* call\r","932C: 39          RTS   \r","\r","* flash \"no\"?\r","932D: CC 2A 3A    LDD   #$2A3A\t* \"no\"\r","9330: DD B3       STD   $B3\t* LED pattern\r","9332: BD 94 31    JSR   $9431\t* set83898a\r","9335: 39          RTS   \r","\r","* called from keystroke routine\r","* possibly to do with handling more than one keystroke?\r","9336: 81 02       CMPA  #$02\t* flag byte $82\r","9338: 26 10       BNE   $934A\t* no, skip\r","933A: 96 AE       LDA   $AE\t* current keystroke\r","933C: 26 07       BNE   $9345\t* not zero, continue\r","933E: 96 91       LDA   $91\t* some variable\r","9340: 81 02       CMPA  #$02\t* 2?\r","9342: 27 13       BEQ   $9357\t* yes, continue\r","9344: 39          RTS   \r","\r","9345: 81 03       CMPA  #$03\r","9347: 23 0E       BLS   $9357\t* <=3? continue\r","9349: 39          RTS   \r","\r","934A: 81 03       CMPA  #$03\t* 3?\r","934C: 26 2E       BNE   $937C\t* no, continue\r","934E: 96 AE       LDA   $AE\t* current keystroke\r","9350: 27 04       BEQ   $9356\t* zero, skip\r","9352: 81 09       CMPA  #$09\r","9354: 25 01       BCS   $9357\t* less than 9?\r","9356: 39          RTS   \r","\r","9357: 96 85       LDA   $85\t* load/save flag?\r","9359: 81 01       CMPA  #$01\t* load?\r","935B: 27 04       BEQ   $9361\r","935D: 81 05       CMPA  #$05\t* save?\r","935F: 26 04       BNE   $9365\r","9361: C6 10       LDB   #$10\t* point to \"L\"\r","9363: 20 02       BRA   $9367\r","\r","9365: C6 05       LDB   #$05\t* point to \"5\"\r","9367: A6 A5       LDA   B,Y\t* A now holds \"5\" or \"A\" bit pattern\r","9369: D6 AE       LDB   $AE\t* current keystroke\r","936B: D7 8C       STB   $8C\t* some variable, bank to save to?\r","936D: E6 A5       LDB   B,Y\t* B now holds the bank number\r","936F: DD B3       STD   $B3\t* LED bit pattern\r","9371: 0F 90       CLR   $90\t* some variable\r","9373: 0F 8A       CLR   $8A\t* some variable\r","9375: 0F 89       CLR   $89\r","9377: 86 04       LDA   #$04\r","9379: 97 82       STA   $82\t* flag byte in keystroke routine\r","937B: 39          RTS   \r","\r","937C: 81 04       CMPA  #$04\r","937E: 26 20       BNE   $93A0\r","9380: 96 AE       LDA   $AE\t* current keystroke\r","9382: 81 01       CMPA  #$01\r","9384: 25 19       BCS   $939F\r","9386: 81 04       CMPA  #$04\r","9388: 22 15       BHI   $939F\r","938A: D6 85       LDB   $85\r","938C: C1 01       CMPB  #$01\r","938E: 26 0F       BNE   $939F\r","9390: 0D 8C       TST   $8C\r","9392: 27 0B       BEQ   $939F\r","9394: E6 A6       LDB   A,Y\r","9396: 4A          DECA  \r","9397: 97 90       STA   $90\r","9399: 96 8C       LDA   $8C\r","939B: A6 A6       LDA   A,Y\r","939D: DD B3       STD   $B3\t* LED bit pattern\r","939F: 39          RTS   \r","\r","93A0: 81 05       CMPA  #$05\r","93A2: 10 26 00 6C LBNE  $9412\r","93A6: 0D AE       TST   $AE\r","93A8: 26 0E       BNE   $93B8\r","93AA: 0D A4       TST   $A4\r","93AC: 27 05       BEQ   $93B3\r","93AE: 0F A4       CLR   $A4\r","93B0: 16 FE D1    LBRA  $9284\r","\r","93B3: 0C A4       INC   $A4\r","93B5: 16 FE CC    LBRA  $9284\r","\r","93B8: 96 AE       LDA   $AE\t* current keystroke\r","93BA: 81 01       CMPA  #$01\r","93BC: 25 54       BCS   $9412\r","93BE: 81 04       CMPA  #$04\r","93C0: 22 50       BHI   $9412\r","93C2: E6 A6       LDB   A,Y\r","93C4: D7 B4       STB   $B4\r","93C6: 4A          DECA  \r","93C7: BD 92 49    JSR   $9249\t* clear a bunch of variables back to zero\r","93CA: C6 80       LDB   #$80\r","93CC: D7 83       STB   $83\r","93CE: 0D 16       TST   $16\t* link upper/lower\r","93D0: 26 04       BNE   $93D6\r","93D2: 0D A4       TST   $A4\r","93D4: 27 10       BEQ   $93E6\r","93D6: 97 8E       STA   $8E\r","93D8: C6 24       LDB   #$24\r","93DA: 3D          MUL   \r","93DB: C3 B7 6F    ADDD  #$B76F\r","93DE: DD A5       STD   $A5\r","93E0: 0D 16       TST   $16\t* link upper/lower\r","93E2: 27 0C       BEQ   $93F0\r","93E4: 96 8E       LDA   $8E\r","93E6: 97 8F       STA   $8F\r","93E8: C6 24       LDB   #$24\r","93EA: 3D          MUL   \r","93EB: C3 B4 FE    ADDD  #$B4FE\r","93EE: DD A7       STD   $A7\r","93F0: BD 8E CF    JSR   $8ECF\r","93F3: 1A 50       ORCC  #$50\r","93F5: BD 87 5E    JSR   $875E\t* build linked list for voices\r","93F8: 1C AF       ANDCC #$AF\r","93FA: D6 AE       LDB   $AE\r","93FC: 5A          DECB  \r","93FD: 0D 16       TST   $16\t* link upper/lower\r","93FF: 27 04       BEQ   $9405\r","9401: CB 0C       ADDB  #$0C\r","9403: 20 0A       BRA   $940F\r","\r","9405: 0D A4       TST   $A4\r","9407: 26 04       BNE   $940D\r","9409: CB 1C       ADDB  #$1C\r","940B: 20 02       BRA   $940F\r","\r","940D: CB 2C       ADDB  #$2C\r","940F: BD A0 F2    JSR   $A0F2\t* send program change\r","9412: 81 06       CMPA  #$06\r","9414: 26 1A       BNE   $9430\r","9416: 96 AE       LDA   $AE\t* current keystroke\r","9418: 81 01       CMPA  #$01\r","941A: 25 14       BCS   $9430\r","941C: 81 04       CMPA  #$04\r","941E: 22 10       BHI   $9430\r","9420: E6 A6       LDB   A,Y\r","9422: D7 B4       STB   $B4\r","9424: 4A          DECA  \r","9425: 97 B7       STA   $B7\r","9427: CC 08 04    LDD   #$0804\r","942A: 97 85       STA   $85\r","942C: D7 82       STB   $82\r","942E: 0F 89       CLR   $89\r","9430: 39          RTS   \r","\r","* second-most frequently called\r","* 12 places\r","* set $83 to $80 and $8A and $89 to 1\r","* set83898a\r","* seems to be involved in making the display flash?\r","9431: CC 01 80    LDD   #$0180\r","9434: 97 8A       STA   $8A\t* $808a = 1\r","9436: 97 89       STA   $89\t* $8089 = 1\r","9438: D7 83       STB   $83\t* $8083 = 80\r","943A: 39          RTS\r","\r","943B: CE FB 4D    LDU   #$FB4D\r","943E: 96 AE       LDA   $AE\t* current keystroke\r","9440: 81 10       CMPA  #$10\t* LOAD UPPER\r","9442: 27 04       BEQ   $9448\t* yes, skip ahead\r","9444: 81 11       CMPA  #$11\t* LOAD LOWER\r","9446: 26 53       BNE   $949B\t* no, see if it's the sample buttons\r","9448: 86 01       LDA   #$01\r","944A: 97 85       STA   $85\r","944C: 96 82       LDA   $82\r","944E: 26 20       BNE   $9470\r","9450: 86 02       LDA   #$02\r","9452: 97 82       STA   $82\r","9454: 86 1C       LDA   #$1C\r","9456: D6 AE       LDB   $AE\r","9458: C1 10       CMPB  #$10\t* LOAD UPPER\r","945A: 27 09       BEQ   $9465\r","945C: C6 1C       LDB   #$1C\t* \"L\"\r","945E: DD B3       STD   $B3\t* LED bit pattern\r","9460: 0F 91       CLR   $91\r","9462: 7E 95 DD    JMP   $95DD\t* jsr set83898a\r","\r","9465: C6 7C       LDB   #$7C\t* \"U\"\r","9467: DD B3       STD   $B3\t* LED bit pattern\r","9469: 86 01       LDA   #$01\r","946B: 97 91       STA   $91\r","946D: 7E 95 DD    JMP   $95DD\t* jsr set83898a\r","\r","9470: 96 91       LDA   $91\r","9472: 81 02       CMPA  #$02\r","9474: 26 01       BNE   $9477\r","9476: 39          RTS   \r","\r","9477: 96 82       LDA   $82\r","9479: 81 02       CMPA  #$02\r","947B: 26 1E       BNE   $949B\r","947D: 96 AE       LDA   $AE\t* current keystroke\r","947F: 81 11       CMPA  #$11\t* LOAD LOWER\r","9481: 27 07       BEQ   $948A\r","9483: 96 91       LDA   $91\r","9485: 81 01       CMPA  #$01\r","9487: 26 06       BNE   $948F\r","9489: 39          RTS   \r","\r","948A: 96 91       LDA   $91\r","948C: 26 01       BNE   $948F\r","948E: 39          RTS   \r","\r","948F: CC 1C EE    LDD   #$1CEE\t* \"LY.\" ?\r","9492: DD B3       STD   $B3\t* LED bit pattern\r","9494: 86 02       LDA   #$02\r","9496: 97 91       STA   $91\r","9498: 7E 95 DD    JMP   $95DD\t* jsr set87899a\r","\r","949B: 96 AE       LDA   $AE\t* current keystroke\r","949D: 81 12       CMPA  #$12\t* SAMPLE UPPER\r","949F: 27 06       BEQ   $94A7\t* yes, go\r","94A1: 81 13       CMPA  #$13\t* SAMPLE LOWER\r","94A3: 10 26 00 86 LBNE  $952D\t* yes, go\r","94A7: 96 AE       LDA   $AE\t* current keystroke\r","94A9: 81 12       CMPA  #$12\t* SAMPLE UPPER\r","94AB: 26 08       BNE   $94B5\t* yes, go\r","94AD: C6 7C       LDB   #$7C\r","94AF: 86 01       LDA   #$01\r","94B1: 97 A4       STA   $A4\t* some variable\r","94B3: 20 04       BRA   $94B9\r","\r","94B5: C6 1C       LDB   #$1C\r","94B7: 0F A4       CLR   $A4\r","94B9: 86 B6       LDA   #$B6\r","94BB: DD B3       STD   $B3\t* LED bit pattern\r","94BD: 86 03       LDA   #$03\r","94BF: 97 85       STA   $85\r","94C1: CC 03 E8    LDD   #$03E8\r","94C4: DD 34       STD   $34\r","94C6: BD 94 31    JSR   $9431\t* set83898a\r","94C9: BD 9D D7    JSR   $9DD7\r","94CC: DC 34       LDD   $34\r","94CE: 27 02       BEQ   $94D2\r","94D0: 20 F7       BRA   $94C9\r","\r","* possibly the bit that does the bargraph for sampling?\r","94D2: BD 9F 60    JSR   $9F60\r","94D5: BD 97 00    JSR   $9700\r","94D8: BD 97 4E    JSR   $974E   * seems to sample something\r","94DB: C6 1F       LDB   #$1F\t* all LEDs off\r","94DD: F7 E2 01    STB   $E201\t* set IORA\r","94E0: 1E 89       EXG   A,B\r","94E2: 1E 89       EXG   A,B\r","94E4: F6 E2 01    LDB   $E201\t* read IORA\r","94E7: C4 C0       ANDB  #$C0\t* mask off two of three rows?\r","94E9: C1 40       CMPB  #$40\t* is it row 1?\r","94EB: 26 06       BNE   $94F3\t* skip\r","94ED: 86 02       LDA   #$02\t\r","94EF: 97 93       STA   $93\t* store $02 into $8093?\r","94F1: 20 0E       BRA   $9501\t* continue\r","\r","94F3: C1 80       CMPB  #$80\t* row 2?\r","94F5: 27 05       BEQ   $94FC\t* yes, continue\r","94F7: B7 E2 01    STA   $E201\t* probably still holds $1f, write it\r","94FA: 20 DC       BRA   $94D8\t* loop\r","\r","94FC: BD 97 95    JSR   $9795\r","94FF: 97 93       STA   $93\r","9501: BD 9F 6F    JSR   $9F6F\r","9504: BD 92 49    JSR   $9249\t* clear a bunch of variables back to zero\r","9507: CE FB 4D    LDU   #$FB4D\r","950A: 96 93       LDA   $93\r","950C: 27 0D       BEQ   $951B\r","950E: 81 01       CMPA  #$01\r","9510: 26 13       BNE   $9525\r","9512: CC 2A B6    LDD   #$2AB6\r","9515: DD B3       STD   $B3\t* LED bit pattern\r","9517: BD 94 31    JSR   $9431\t* set83898a\r","951A: 39          RTS   \r","\r","951B: CC B6 8E    LDD   #$B68E\r","951E: DD B3       STD   $B3\t* LED bit pattern\r","9520: 86 80       LDA   #$80\r","9522: 97 83       STA   $83\r","9524: 39          RTS   \r","\r","9525: 86 0B       LDA   #$0B\r","9527: 97 AE       STA   $AE\r","9529: BD 91 16    JSR   $9116\r","952C: 39          RTS   \r","\r","* decode keystrokes\r","952D: 96 AE       LDA   $AE\t* current keystroke\r","952F: 81 14       CMPA  #$14\t* UP\r","9531: 10 25 00 AB LBCS  $95E0\r","9535: 81 17       CMPA  #$17\t* SAVE SEQ\r","9537: 10 22 00 A5 LBHI  $95E0\t* what is higher? there's only 24 keys\r","953B: 96 AE       LDA   $AE\t* current keystroke\r","953D: 81 15       CMPA  #$15\t* PLAY SEQ\r","953F: 26 3B       BNE   $957C\t* no, skip\r","9541: 86 04       LDA   #$04\t* some flag?\r","9543: 97 85       STA   $85\t* save routine uses this\r","9545: 96 E7       LDA   $E7\t* sequencer flag?\r","9547: 81 00       CMPA  #$00\r","9549: 26 06       BNE   $9551\t* not zero, skip\r","954B: BD 95 E1    JSR   $95E1\t* call start sequencer?\r","954E: 39          RTS   \r","\r","954F: 20 22       BRA   $9573\r","\r","9551: 81 02       CMPA  #$02\t* flag is 2?\r","9553: 26 09       BNE   $955E\t* no, skip\r","9555: BD AB 90    JSR   $AB90\t* something to do with sequencer\r","9558: BD 95 E1    JSR   $95E1\t* call start sequencer?\r","955B: 39          RTS   \r","\r","955C: 20 15       BRA   $9573\r","\r","955E: 81 04       CMPA  #$04\t* flag is 4?\r","9560: 26 11       BNE   $9573\t* no, skip\r","9562: BD AB 80    JSR   $AB80\t* call\r","9565: CC 3A 7A    LDD   #$3A7A\t* \"od\" = overdub?\r","9568: DD B3       STD   $B3\t* LED bit pattern\r","956A: 86 80       LDA   #$80\r","956C: 97 83       STA   $83\t* timer?\r","956E: 0F 8A       CLR   $8A\t* some variable\r","9570: 0F 89       CLR   $89\t* some variable\r","9572: 39          RTS   \r","\r","9573: BD AB 90    JSR   $AB90\t* something to do with sequencer\r","9576: BD 95 E1    JSR   $95E1\t* call start sequencer?\r","9579: 39          RTS   \r","\r","957A: 20 5D       BRA   $95D9\r","\r","957C: 81 14       CMPA  #$14\r","957E: 26 2F       BNE   $95AF\r","9580: 86 04       LDA   #$04\r","9582: 97 85       STA   $85\r","9584: 96 E7       LDA   $E7\r","9586: 81 04       CMPA  #$04\r","9588: 26 0E       BNE   $9598\r","958A: BD AB 53    JSR   $AB53\r","958D: 86 04       LDA   #$04\r","958F: 97 82       STA   $82\r","9591: 0F 8A       CLR   $8A\t* some variable\r","9593: 0F 89       CLR   $89\r","9595: 39          RTS   \r","\r","9596: 20 09       BRA   $95A1\r","\r","9598: 81 00       CMPA  #$00\r","959A: 26 05       BNE   $95A1\r","959C: BD AB 4E    JSR   $AB4E\r","959F: 20 06       BRA   $95A7\r","\r","95A1: BD AB 90    JSR   $AB90\t* something to do with sequencer\r","95A4: BD AB 4E    JSR   $AB4E\r","95A7: C6 04       LDB   #$04\r","95A9: D7 82       STB   $82\r","95AB: 86 0A       LDA   #$0A\r","95AD: 20 2A       BRA   $95D9\r","\r","95AF: 81 16       CMPA  #$16\t*\r","95B1: 26 0C       BNE   $95BF\r","95B3: 86 03       LDA   #$03\r","95B5: 97 82       STA   $82\r","95B7: 86 05       LDA   #$05\r","95B9: 97 85       STA   $85\r","95BB: 86 1C       LDA   #$1C\r","95BD: 20 1A       BRA   $95D9\r","\r","95BF: 81 17       CMPA  #$17\r","95C1: 26 16       BNE   $95D9\r","95C3: 0D E4       TST   $E4\r","95C5: 27 08       BEQ   $95CF\r","95C7: 86 02       LDA   #$02\r","95C9: 97 82       STA   $82\r","95CB: 86 07       LDA   #$07\r","95CD: 20 06       BRA   $95D5\r","\r","95CF: C6 03       LDB   #$03\r","95D1: D7 82       STB   $82\r","95D3: 86 06       LDA   #$06\r","95D5: 97 85       STA   $85\r","95D7: 86 B6       LDA   #$B6\r","95D9: C6 B6       LDB   #$B6\r","95DB: DD B3       STD   $B3\t* LED bit pattern\r","95DD: BD 94 31    JSR   $9431\t* set83898a\r","95E0: 39          RTS   \r","\r","\r","* start sequencer?\r","* sets seq variables\r","* then sets the edit parameter to Seq Tempo and fakes a VALUE keypress\r","95E1: BD AB 43    JSR   $AB43\t* call set up sequencer?\r","95E4: 86 57       LDA   #$57\t* Param 87, Seq Tempo\r","95E6: 97 8B       STA   $8B\t* set edit parameter\r","95E8: 86 0D       LDA   #$0D\t* VALUE\r","95EA: 97 AE       STA   $AE\t* current keystroke\r","95EC: BD 91 16    JSR   $9116\t* handle keystroke\r","95EF: 39          RTS   \r","\r","* unknown, keystrokes\r","* these are maybe sequencer commands from the footswitch etc?\r","95F0: 96 AE       LDA   $AE\t* current keystroke\r","95F2: 81 19       CMPA  #$19\t* no idea what $19 is, start recording?\r","95F4: 26 09       BNE   $95FF\t* no, skip\r","95F6: BD 92 49    JSR   $9249\t* clear a bunch of variables back to zero\r","95F9: BD 96 F4    JSR   $96F4\t* show \"rS\"\r","95FC: 16 00 F4    LBRA  $96F3\t* bra rts\r","\r","95FF: 81 1A       CMPA  #$1A\t* no idea what $1A is\r","9601: 10 26 00 0A LBNE  $960F\t* no, skip\r","9605: 86 0C       LDA   #$0C\t* PARAM\r","9607: 97 AE       STA   $AE\t* save it\r","9609: BD 91 16    JSR   $9116\t* handle as if PARAM was pressed\r","960C: 16 00 E4    LBRA  $96F3\t* bra rts\r","\r","960F: 81 1B       CMPA  #$1B\t* no idea what $1b is\r","9611: 10 26 00 37 LBNE  $964C\t* no, skip\r","9615: 96 E7       LDA   $E7\t* sequencer flag?\r","9617: 81 00       CMPA  #$00\t* 0?\r","9619: 26 04       BNE   $961F\t* no, skip\r","961B: BD 95 E1    JSR   $95E1\t* call start sequencer?\r","961E: 39          RTS   \r","\r","961F: 81 06       CMPA  #$06\t* keypad 6?\r","9621: 26 0A       BNE   $962D\t* no, skip\r","9623: BD AB 60    JSR   $AB60\t* call\r","9626: BD 92 49    JSR   $9249\t* clear a bunch of variables back to zero\r","9629: BD 96 F4    JSR   $96F4\t* call\r","962C: 39          RTS   \r","\r","962D: 81 08       CMPA  #$08\r","962F: 26 13       BNE   $9644\r","9631: BD AB 90    JSR   $AB90\t* something to do with sequencer\r","9634: 96 27       LDA   $27\t* loop on/off\r","9636: 27 04       BEQ   $963C\t* 0? skip\r","9638: BD 95 E1    JSR   $95E1\t* call start sequencer?\r","963B: 39          RTS   \r","\r","963C: 86 0C       LDA   #$0C\t* PARAM\r","963E: 97 AE       STA   $AE\t* store it in keystroke\r","9640: BD 91 16    JSR   $9116\t* handle keystroke\r","9643: 39          RTS   \r","\r","9644: BD AB 90    JSR   $AB90\t* something to do with sequencer\r","9647: 20 F3       BRA   $963C\r","\r","9649: 16 00 A7    LBRA  $96F3\t* bra rts\r","\r","964C: 81 1C       CMPA  #$1C\t*\r","964E: 10 26 00 10 LBNE  $9662\t* no, skip\r","9652: 96 E7       LDA   $E7\t* sequencer flag?\r","9654: 81 00       CMPA  #$00\r","9656: 27 04       BEQ   $965C\t* 0, start seq?\r","9658: 81 02       CMPA  #$02\r","965A: 26 03       BNE   $965F\t* 2, rts\r","965C: BD 95 E1    JSR   $95E1\t* call start sequencer?\r","965F: 16 00 91    LBRA  $96F3\t* bra rts\r","\r","9662: 81 1D       CMPA  #$1D\r","9664: 10 26 00 0E LBNE  $9676\t* no, skip\r","9668: 96 E7       LDA   $E7\t* sequencer flags\r","966A: 81 00       CMPA  #$00\r","966C: 26 06       BNE   $9674\t* nonzero, rts\r","966E: BD AB 45    JSR   $AB45\t* call\r","9671: BD 95 E4    JSR   $95E4\t* call\r","9674: 20 7D       BRA   $96F3\t* bra rts\r","\r","9676: 81 1E       CMPA  #$1E\r","9678: 26 09       BNE   $9683\r","967A: 86 0B       LDA   #$0B\r","967C: 97 AE       STA   $AE\r","967E: BD 91 16    JSR   $9116\r","9681: 20 70       BRA   $96F3\t* bra rts\r","\r","9683: 4D          TSTA  \r","9684: 2B 01       BMI   $9687\r","9686: 39          RTS   \r","\r","* unknown\r","9687: 84 3F       ANDA  #$3F\r","9689: 1F 89       TFR   A,B\r","968B: 44          LSRA  \r","968C: 44          LSRA  \r","968D: 44          LSRA  \r","968E: 44          LSRA  \r","968F: 8E 82 0C    LDX   #$820C\t* lookup table?\r","9692: A6 86       LDA   A,X\r","9694: 97 91       STA   $91\t* some variable\r","9696: C4 0F       ANDB  #$0F\t* mask lower nybble\r","9698: 8E 82 0F    LDX   #$820F\t* another table\r","969B: E6 85       LDB   B,X\r","969D: 2B 26       BMI   $96C5\t* minus? continue\r","969F: 1F 98       TFR   B,A\r","96A1: 84 03       ANDA  #$03\t* mask lower bits\r","96A3: 97 90       STA   $90\t* some variable\r","96A5: 54          LSRB \t\t* divide by 4 \r","96A6: 54          LSRB  \r","96A7: D7 8C       STB   $8C\t* bank to save to?\r","96A9: CC 01 04    LDD   #$0104\r","96AC: 97 85       STA   $85\t* save routine uses this\r","96AE: D7 82       STB   $82\t* flag byte in keystroke routine\r","96B0: 86 0A       LDA   #$0A\t* ENTER\r","96B2: 97 AE       STA   $AE\t* current keystroke\r","\r","* unknown\r","96B4: 8E 80 23    LDX   #$8023\t* MIDI message filter?\r","96B7: A6 84       LDA   ,X\t* in A\r","96B9: 34 12       PSHS  X,A\t* stack\r","96BB: 6F 84       CLR   ,X\t* set it to zero\r","96BD: BD 90 E9    JSR   $90E9\t* handle current keystroke\r","96C0: 35 12       PULS  A,X\t* unstack\r","96C2: A7 84       STA   ,X\t* restore\r","96C4: 39          RTS   \r","\r","96C5: C4 03       ANDB  #$03\r","96C7: 5C          INCB  \r","96C8: D7 AE       STB   $AE\t* current keypress\r","96CA: 96 16       LDA   $16\t* link upper/lower\r","96CC: 34 02       PSHS  A\r","96CE: 96 91       LDA   $91\r","96D0: 26 06       BNE   $96D8\r","96D2: 0F A4       CLR   $A4\r","96D4: 0F 16       CLR   $16\t* link upper/lower\r","96D6: 20 0E       BRA   $96E6\r","\r","96D8: 81 01       CMPA  #$01\r","96DA: 26 06       BNE   $96E2\r","96DC: 97 A4       STA   $A4\r","96DE: 0F 16       CLR   $16\t* link upper/lower\r","96E0: 20 04       BRA   $96E6\r","\r","96E2: 86 01       LDA   #$01\r","96E4: 97 16       STA   $16\t* link upper/lower\r","96E6: 86 05       LDA   #$05\r","96E8: 97 82       STA   $82\r","96EA: 0F B3       CLR   $B3\t* LED bit pattern?\r","96EC: BD 96 B4    JSR   $96B4\r","96EF: 35 02       PULS  A\r","96F1: 97 16       STA   $16\t* link upper/lower\r","96F3: 39          RTS   \r","\r","* show \"rS\"\r","* set timer?\r","96F4: CC B6 0A    LDD   #$B60A\t* \"Sr\" ?\r","96F7: DD B3       STD   $B3\t* LED bit pattern\r","96F9: 86 80       LDA   #$80\r","96FB: 97 83       STA   $83\t* some variable\r","96FD: 39          RTS   \r","\r","* probably incorrectly disassembled block\r","* 96FE: FF 18 1A    STU   $181A\r","* 9701: 50          NEGB  \r","\r","* configure sampling\r","96FE: ff 18\r","9700: 1A 50       ORCC #$50\r","9702: 86 14       LDA   #$14\t* drive select high, sample/play high\r","9704: B7 E2 00    STA   $E200\t* VIA IORB\r","9707: BD AE 17    JSR   zerofilter\r","970A: 8E E4 1F    LDX   #$E41F\r","970D: 96 18       LDA   $18\t* sample filter frequency\r","970F: BB B2 83    ADDA  $B283\t* probably offset for voice\r","9712: 8B 5B       ADDA  #$5B\t* 91?\r","9714: 24 02       BCC   $9718\t* too high\r","9716: 86 FF       LDA   #$FF\t* clamp\r","9718: B7 96 FE    STA   $96FE\t* some variable\r","971B: 10 8E 03 E8 LDY   #$03E8\t* delay for 1000 clocks\r","971F: BD F0 A7    JSR   countdown\r","9722: D6 19       LDB   $19\t* mike/line\r","9724: 26 05       BNE   $972B\t* non-zero\r","9726: 86 10       LDA   #$10\r","9728: B7 E2 00    STA   $E200\t* drive select high, sample/play low\r","972B: BD 98 58    JSR   $9858\t* set sample bank?\r","972E: 5F          CLRB  \t* resonance zero\r","972F: 96 17       LDA   $17\t* sample time adjust\r","9731: 4A          DECA  \t* -1\r","9732: 48          ASLA  \t* x2\r","9733: FD E2 06    STD   $E206\t* VIA timer 1\r","9736: CC 4C C0    LDD   #$4CC0\t* \r","9739: B7 E2 0B    STA   $E20B\t* VIA aux reg\r","973C: F7 E2 0E    STB   $E20E\t* VIA interrupt reg\r","973F: 8D 01       BSR   $9742\t* set sampling filter levels\r","9741: 39          RTS   \r","\r","* set sampling filter levels\r","9742: FC 96 FE    LDD   $96FE\t* would contain resonance in B, cutoff in A\r","9745: E7 84       STB   ,X\t* stick the cutoff into the DAC (settling?)\r","9747: E7 10       STB   $FFF0,X\t* set the cutoff\r","9749: A7 84       STA   ,X      * again, settle the DAC?\r","974B: A7 18       STA   $FFF8,X * set the resonance\r","974D: 39          RTS   \r","\r","974E: 8D F2       BSR   $9742   * set the filter\r","9750: CE EC E2    LDU   #$ECE2  * ADC register\r","9753: E6 C4       LDB   ,U      * read ADC\r","9755: 86 14       LDA   #$14    * why 20?\r","9757: 0F 98       CLR   $98     * some variable\r","9759: 0F 99       CLR   $99     * some variable\r","975B: 0F 9A       CLR   $9A     * some variable\r","975D: 8D 1C       BSR   $977B   * call\r","975F: 4A          DECA          * count down\r","9760: 26 FB       BNE   $975D   * loop\r","9762: C6 03       LDB   #$03    * start at 3?\r","9764: D1 9A       CMPB  $9A     * some variable\r","9766: 23 12       BLS   $977A   * jump to rts\r","9768: D1 99       CMPB  $99     * some variable\r","976A: 23 0C       BLS   $9778   * jump forward\r","976C: D1 98       CMPB  $98     * some variable\r","976E: 23 04       BLS   $9774   * jump forward\r","9770: 86 07       LDA   #$07    * set it to 7\r","9772: 20 02       BRA   $9776   * continue\r","9774: 86 03       LDA   #$03    * if $8097 == 3, set A to 3?\r","9776: 20 02       BRA   $977A   * bra rts\r","9778: 86 06       LDA   #$06    * if $8098 == 3, set A to 6?\r","977A: 39          RTS   \r","\r","; does stuff to some counters\r","* seems to measure values from the ADC?\r","* sets counters based on three levels, maybe it's for the sampling level routine?\r","977B: E6 C4       LDB   ,U\t; previous routine set U to $ECE2, ADC reg\r","977D: CB 80       ADDB  #$80\t; will this little bit take the ABS value? \r","977F: 2A 01       BPL   $9782\t;\r","9781: 50          NEGB  \t;\r","9782: C1 7F       CMPB  #$7F\t\r","9784: 25 02       BCS   $9788\t; B<$7f?\r","9786: 0C 9A       INC   $9A\t; increment $809a\r","9788: D1 1A       CMPB  $1A\t; 26, in decimal - can't think of the significance\r","978A: 25 02       BCS   $978E   ; B<$1a?\t\r","978C: 0C 99       INC   $99\t; increment $8099\r","978E: C1 08       CMPB  #$08    ; B<$08?\r","9790: 25 02       BCS   $9794\t; jump to end\r","9792: 0C 98       INC   $98\t; increment $8098\r","9794: 39          RTS   \r","\r","* initialise lower wavesamples\r","9795: 96 1B       LDA   $1B\t* user multisampling?\r","9797: 26 3B       BNE   $97D4\t* yes, jump way ahead\r","9799: 96 A4       LDA   $A4\t* bank select\r","979B: 26 0C       BNE   $97A9\t* upper?\r","979D: 0F AA       CLR   $AA\t* lower wavesample\r","979F: BD 9A 85    JSR   $9A85\t* look up selected wavesample\r","97A2: 8E 03 FA    LDX   #$03FA\t* Octave and Fine Tune\r","97A5: 86 1E       LDA   #$1E\t* High Key\r","97A7: 20 0A       BRA   $97B3\t* jump\r","\r","* initialise upper wavesamples\r","97A9: 0F A9       CLR   $A9\t* upper wavesample\r","97AB: BD 9A 85    JSR   $9A85\t* look up selected wavesample\r","97AE: 8E 03 8E    LDX   #$038E\t* Octave and Fine Tune\r","97B1: 86 3C       LDA   #$3C\t* High Key\r","\r","* initialise wavesamples\r","97B3: 6F 4A       CLR   $000A,U\r","97B5: 6F 4B       CLR   $000B,U\r","97B7: C6 08       LDB   #$08\r","97B9: 34 36       PSHS  Y,X,B,A\r","97BB: AF 29       STX   $0009,Y\t* save octave and fine tune\r","97BD: A7 2E       STA   $000E,Y\t* save high key\r","97BF: 6F 2F       CLR   $000F,Y\t* clear something\r","97C1: 6F 28       CLR   $0008,Y\t* clear something else\r","97C3: CC FF 10    LDD   #$FF10\t* ?\r","97C6: BD 8F 11    JSR   $8F11\t* call\r","97C9: 35 36       PULS  A,B,X,Y\t* unstack\r","97CB: 31 A8 18    LEAY  $18,Y\t* next wavesample\r","97CE: 5A          DECB  \t* count down B\r","97CF: 26 E8       BNE   $97B9\t* loop\r","97D1: BD 8E CF    JSR   $8ECF\t* call\r","97D4: BD 98 6C    JSR   $986C\t* fetch wavesample start and end\r","97D7: 2B 14       BMI   $97ED\r","97D9: 96 9B       LDA   $9B\t* $809b, what's here?\r","97DB: B7 E2 00    STA   $E200\t* write it to IORB\r","97DE: 5D          TSTB  \r","97DF: 2A 09       BPL   $97EA\r","97E1: C4 7F       ANDB  #$7F\r","97E3: B7 E2 00    STA   $E200\r","97E6: 96 9C       LDA   $9C\r","97E8: 20 01       BRA   $97EB\r","\r","97EA: 4F          CLRA  \r","97EB: 20 0C       BRA   $97F9\r","\r","97ED: 84 7F       ANDA  #$7F\r","97EF: 97 94       STA   $94\r","97F1: 96 9C       LDA   $9C\r","97F3: B7 E2 00    STA   $E200\t* not sure\r","97F6: C4 7F       ANDB  #$7F\r","97F8: 4F          CLRA  \r","97F9: F7 98 47    STB   $9847\r","97FC: 9E 94       LDX   $94\r","97FE: C6 28       LDB   #$28\r","9800: E7 2B       STB   $000B,Y\r","9802: CE EC E2    LDU   #$ECE2\r","9805: 0F 99       CLR   $99\r","9807: 10 8E 00 01 LDY   #$0001\r","980B: 31 21       LEAY  $0001,Y\r","980D: 26 03       BNE   $9812\r","980F: 86 01       LDA   #$01\r","9811: 39          RTS   \r","\r","* unknown\r","* sampling routine?\r","9812: BD 97 7B    JSR   $977B\t* routine that counts ADC value levels\r","9815: 0D 99       TST   $99\r","9817: 27 F2       BEQ   $980B\t* increment y?\r","9819: C6 06       LDB   #$06\t// upper/lower, mike/line high\r","981B: F7 E2 0F    STB   $E20F\t// ORA (without handshake? check doc)\r","981E: 10 8E E2 04 LDY   #$E204\t// T1 counter\r","9822: 13          SYNC  \t// wait for interrupt\r","9823: E6 A4       LDB   ,Y\t// read the counter\r","9825: 4D          TSTA  \t// FIXME what's in A\r","9826: 27 14       BEQ   $983C\t// skip to next SYNC\r","9828: 13          SYNC  \t// wait for interrupt\r","9829: E6 A4       LDB   ,Y\t// read the counter\r","982B: E6 C4       LDB   ,U\t// top value on user stack is 0\r","982D: 26 01       BNE   $9830\t// don't increment if it's 0\r","982F: 5C          INCB  \r","9830: E7 80       STB   ,X+\r","9832: 8C 80 00    CMPX  #$8000\r","9835: 25 F1       BCS   $9828\r","9837: A7 3C       STA   $FFFC,Y\r","9839: 8E 00 00    LDX   #$0000\r","983C: 13          SYNC  \r","983D: E6 A4       LDB   ,Y\r","983F: E6 C4       LDB   ,U\r","9841: 26 01       BNE   $9844\r","9843: 5C          INCB  \r","9844: E7 80       STB   ,X+\r","9846: 8C 00 F0    CMPX  #$00F0\r","9849: 25 F1       BCS   $983C\r","984B: CC 10 00    LDD   #$1000\r","984E: E7 80       STB   ,X+\r","9850: 4A          DECA  \r","9851: 26 FB       BNE   $984E\r","9853: BD 99 41    JSR   $9941\r","9856: 4F          CLRA  \r","9857: 39          RTS   \r","\r","* set precalculated upper/lower addresses\r","* and bank select port\r","* based on upper/lower variable\r","9858: B6 E2 00    LDA   $E200\t* VIA IORB\r","985B: 84 FC       ANDA  #$FC\t* mask off all but bank selects\r","985D: D6 A4       LDB   $A4\t* upper/lower\r","985F: 27 02       BEQ   $9863\t* skip\r","9861: 8A 02       ORA   #$02\t* upper\r","9863: 97 9B       STA   $9B\t* write it back to $809b\r","9865: 4C          INCA  \t* bump\r","9866: 97 9C       STA   $9C\t* write that back to $809c\r","9868: B7 E2 00    STA   $E200\t* select the bank\r","986B: 39          RTS   \r","\r","* look up wavesample start and end\r","* $95 and $97 are (probably) always zero\r","* this expands them out into their 16-bit values\r","986C: BD 9A 85    JSR   $9A85\t* look up selected wavesample\r","986F: EC 0F       LDD   $000F,X\t* wavesample start/end?\r","9871: D7 96       STB   $96\t* wavesample end for editing\r","9873: 97 94       STA   $94\t* wavesample start for editing\r","9875: 39          RTS\r","\r","* get byte from sample RAM\r","* takes address in U, returns value in B\r","* increments U\r","9876: 1F 31       TFR   U,X\r","9878: 8C 80 00    CMPX  #$8000\r","987B: 24 04       BCC   $9881\t* X>= $8000?\r","987D: 96 9B       LDA   $9B\t* saved even bank select\r","987F: 20 06       BRA   $9887\t* skip\r","\r","9881: 30 89 80 00 LEAX  $8000,X\t* X=X-$8000\r","9885: 96 9C       LDA   $9C\t* saved odd bank select\r","9887: B7 E2 00    STA   $E200\t* bank select\r","988A: 33 41       LEAU  $0001,U\t* U++\r","988C: E6 84       LDB   ,X\t* B=(X)\r","988E: 39          RTS   \r","\r","988F: 1F 21       TFR   Y,X\t* X=Y\r","9891: B6 E2 00    LDA   $E200\t* VIA IORB (bank?)\r","9894: 8C 80 00    CMPX  #$8000\t\r","9897: 24 04       BCC   $989D\t* x>=$8000\r","9899: 96 9B       LDA   $9B\t* saved even bank select\r","989B: 20 06       BRA   $98A3\t* skip\r","\r","989D: 96 9C       LDA   $9C\t* saved odd bank select\r","989F: 30 89 80 00 LEAX  $8000,X\t* x-=$8000\r","98A3: B7 E2 00    STA   $E200\t* bank fiddling\r","98A6: 31 21       LEAY  $0001,Y * y++\r","98A8: E7 84       STB   ,X\t* (x)=b\r","98AA: 39          RTS   \r","\r","* unknown\r","* probably rotate sample other way\r","98AB: 8D 3E       BSR   $98EB\t* place stop marker?\r","98AD: BD 98 6C    JSR   $986C\t* fetch wavesample start and end\r","98B0: DE 96       LDU   $96\r","98B2: 33 5F       LEAU  $FFFF,U\r","98B4: 1F 32       TFR   U,Y\r","98B6: 8D BE       BSR   $9876\r","98B8: 34 04       PSHS  B\r","98BA: 33 5E       LEAU  $FFFE,U\r","98BC: 8D B8       BSR   $9876\r","98BE: 8D CF       BSR   $988F\r","98C0: 31 3E       LEAY  $FFFE,Y\r","98C2: 10 9C 94    CMPY  $94\r","98C5: 26 F3       BNE   $98BA\r","98C7: 35 04       PULS  B\r","98C9: 8D C4       BSR   $988F\r","98CB: 8D 74       BSR   $9941\r","98CD: 39          RTS   \r","\r","* unknown\r","* rotate wavesample?\r","98CE: 8D 1B       BSR   $98EB\t* place stop marker?\r","98D0: BD 98 6C    JSR   $986C\t* fetch wavesample start and end\r","98D3: DE 94       LDU   $94\t* wavesample start for editing\r","98D5: 1F 32       TFR   U,Y\t* y=u\r","98D7: 8D 9D       BSR   $9876\t* fetch byte\r","98D9: 34 04       PSHS  B\t* save\r","98DB: 8D 99       BSR   $9876\t* fetch byte\r","98DD: 8D B0       BSR   $988F\t* save byte\r","98DF: 11 93 96    CMPU  $96\t* reached wavesample end?\r","98E2: 26 F7       BNE   $98DB\t* not done yet\r","98E4: 35 04       PULS  B\t* restore\r","98E6: 8D A7       BSR   $988F\t* save byte\r","98E8: 8D 57       BSR   $9941\t* loop params?\r","98EA: 39          RTS   \r","\r","* unknown\r","* put \"stop\" markers in sample after editng?\r","98EB: BD 98 58    JSR   $9858\t* select bank\r","98EE: BD 98 6C    JSR   $986C\t* fetch wavesample start and end\r","98F1: 6D 28       TST   $0008,Y\t* loop flag\r","98F3: 27 4B       BEQ   $9940\t* 0? rts\r","98F5: A6 A8 11    LDA   $11,Y\t* loop start\r","98F8: A1 2F       CMPA  $000F,Y\t* compare with sample start\r","98FA: 27 25       BEQ   $9921\t* equal, skip\r","98FC: 5F          CLRB  \r","98FD: 1F 03       TFR   D,U\t* U=16-bit loop start\r","98FF: 33 5F       LEAU  $FFFF,U\t* U--\r","9901: BD 98 76    JSR   $9876\t* get byte from sample RAM\r","9904: 26 1B       BNE   $9921\t* nonzero?\r","9906: 31 5F       LEAY  $FFFF,U\t* Y=u-1\r","9908: 33 57       LEAU  $FFF7,U\t* U=U-8\r","990A: 9E 94       LDX   $94\t* wavesample start for editing\r","990C: 30 08       LEAX  $0008,X\t* x+=8\r","990E: 34 10       PSHS  X\t* save\r","9910: BD 98 76    JSR   $9876\t* get byte\r","9913: BD 98 8F    JSR   $988F\t* save byte?\r","9916: 33 5E       LEAU  $FFFE,U\t* -2\r","9918: 31 3E       LEAY  $FFFE,Y * -2\r","991A: 10 AC E4    CMPY  ,S\t* reached saved X?\r","991D: 24 F1       BCC   $9910\t* not yet\r","991F: 32 62       LEAS  $0002,S\t* drop\r","9921: BD 9A 85    JSR   $9A85\t* look up selected wavesample\r","9924: DE 96       LDU   $96\t* wavesample end for editing\r","9926: 10 AE A8 12 LDY   $12,Y\t* loop end\r","992A: 31 21       LEAY  $0001,Y\t* y++\r","992C: 30 C8 10    LEAX  $10,U\t* 16 bytes past wavesample end\r","992F: 34 10       PSHS  X\t* save X\r","9931: BD 98 76    JSR   $9876\t* get byte\r","9934: 6F 84       CLR   ,X\t* clear byte at address\r","9936: BD 98 8F    JSR   $988F\t* save byte?\r","9939: 11 A3 E4    CMPU  ,S\t* reached saved X yet?\r","993C: 26 F3       BNE   $9931\t* loop\r","993E: 32 62       LEAS  $0002,S\t* drop\r","9940: 39          RTS   \r","\r","* write 16 zeros at end of loop (presumably used when 65 toggled)\r","* something to do with calculating loop params\r","9941: BD 9A 85    JSR   $9A85\t* look up selected wavesample\r","9944: A6 28       LDA   $0008,Y\t* loop switch\r","9946: 27 42       BEQ   $998A\t* loop is off, finish\r","9948: BD 98 58    JSR   $9858\t* select bank\r","994B: BD 98 6C    JSR   $986C\t* fetch wavesample start and end\r","994E: EE 26       LDU   $0006,Y\t* loop end pointer\r","9950: EC A8 12    LDD   $12,Y\t* loop end/fine\r","9953: A1 5E       CMPA  $FFFE,U\t* value in loop start pointer\r","9955: 26 06       BNE   $995D\t* no, skip\r","9957: C1 80       CMPB  #$80\t\r","9959: 24 02       BCC   $995D\t* B >= $80?\t\r","995B: C6 FF       LDB   #$FF\t* B=$ff\r","995D: A1 A8 10    CMPA  $10,Y\t* wavesample end\r","9960: 26 09       BNE   $996B\t* no, skip\r","9962: C1 DF       CMPB  #$DF\t* 32 bytes back from end?\r","9964: 23 05       BLS   $996B\t* b<=$df?\r","9966: C6 DF       LDB   #$DF\t* no, set it\r","9968: 6F A8 14    CLR   $14,Y\t* free run flag\r","996B: E7 A8 13    STB   $13,Y\t* set loop end fine\r","996E: EE A8 12    LDU   $12,Y\t* U=loop end/fine\r","9971: 33 41       LEAU  $0001,U\t* u++\r","9973: 10 9E 96    LDY   $96\t* wavesample end for editing\r","9976: 30 A8 10    LEAX  $10,Y\t* x=y+16\r","9979: 34 10       PSHS  X\t* save X\r","997B: BD 98 76    JSR   $9876\t* get byte from sample RAM setting bank\r","997E: 6F 84       CLR   ,X\t* X contains address, b contains byte\r","9980: BD 98 8F    JSR   $988F\t* call\r","9983: 10 AC E4    CMPY  ,S\t* y=(s)?\r","9986: 26 F3       BNE   $997B\t* no\r","9988: 32 62       LEAS  $0002,S\t* drop\r","998A: 39          RTS\r","\r","* unknown\r","* looks up something from a table of values, based on the edit parameter\r","\r","998B: CE 9F F3    LDU   #$9FF3\t* table of values? scratchpad?\r","998E: D6 8B       LDB   $8B\t* edit parameter\r","9990: A6 C5       LDA   B,U\t* find the value in table\r","9992: 97 AC       STA   $AC\t* some variable\r","9994: 1F 89       TFR   A,B\t* b=a\r","9996: C4 3F       ANDB  #$3F\t* b &= $3f\r","9998: 84 80       ANDA  #$80\t* a &= $80\r","999A: 97 AB       STA   $AB\t* some variable\r","999C: 0F A1       CLR   $A1\t* minimum param value\r","999E: 0F A3       CLR   $A3\t* double/quad value flag\r","99A0: 86 01       LDA   #$01\r","99A2: 97 A2       STA   $A2\t* double/quad value scale\r","99A4: 96 8B       LDA   $8B\t* edit parameter\r","99A6: 81 1E       CMPA  #$1E\t* 30 local on/off\r","99A8: 26 06       BNE   $99B0\t* no, skip\r","99AA: 8E 80 1C    LDX   #$801C\t* local on/off in config\r","99AD: 7E 9C C1    JMP   $9CC1\t* display\r","\r","99B0: 96 8B       LDA   $8B\t* edit parameter\r","99B2: 81 1B       CMPA  #$1B\t* 27, initial wavesample\r","99B4: 10 25 00 BB LBCS  $9A73\t* less, jump way ahead\r","99B8: 81 3B       CMPA  #$3B\t* 59\r","99BA: 10 22 00 B5 LBHI  $9A73\t* higher, into loop points\r","99BE: 8D 02       BSR   $99C2\t* get parameter table pointer\r","99C0: 20 0C       BRA   $99CE\t* continue\r","\r","* get upper or lower params in Y\r","99C2: 0D A4       TST   $A4\t* upper/lower\r","99C4: 27 04       BEQ   $99CA\t* lower\r","99C6: 10 9E A5    LDY   $A5\t* upper pointer\r","99C9: 39          RTS   \r","\r","99CA: 10 9E A7    LDY   $A7\t* lower pointer\r","99CD: 39          RTS\r","\r","* selecting edit parameters\r","* Y points to parameter block \r","99CE: 96 8B       LDA   $8B\t* fetch parameter\r","99D0: 81 1B       CMPA  #$1B\t* 27 (initial wavesample)\r","99D2: 10 26 00 18 LBNE  $99EE\t* no, continue\r","99D6: 30 2A       LEAX  $000A,Y\t* X points to Initial Wavesample\r","99D8: 86 07       LDA   #$07\t* 1-8\r","99DA: 97 A0       STA   $A0\t* param_max\r","99DC: 0C A3       INC   $A3\t* 1-based\r","99DE: 0D 84       TST   $84\t* editable flag?\r","99E0: 10 27 02 DD LBEQ  $9CC1\t* jump display\r","99E4: BD 9C C1    JSR   $9CC1\t* call display\r","99E7: BD 8E CF    JSR   $8ECF\t* then jump to wavesample search thing\r","99EA: 39          RTS   \r","\r","99EB: 16 00 5F    LBRA  $9A4D\t* is this ever called?\r","\r","99EE: 81 1C       CMPA  #$1C\t* 28 (mix mode on/off)\r","99F0: 10 26 00 12 LBNE  $9A06\t* no, continue\r","99F4: 30 2B       LEAX  $000B,Y * X points to Mix Mode:\r","99F6: 0D 84       TST   $84\t* editable flag?\r","99F8: 10 27 02 C9 LBEQ  $9CC5\t* only time 9CC5 is used\r","99FC: BD 9C C1    JSR   $9CC1\t* display\r","99FF: BD 8E CF    JSR   $8ECF\t* wavesample search thing\r","9A02: 39          RTS   \r","\r","9A03: 16 00 47    LBRA  $9A4D\t* is this ever called?\r","\r","* more parameters?\r","9A06: 81 1D       CMPA  #$1D\t* 29 (mono on/off)\r","9A08: 10 26 00 14 LBNE  $9A20\t* no, continue\r","9A0C: 0D 84       TST   $84\r","9A0E: 10 27 00 55 LBEQ  $9A67\t* done\r","9A12: 34 26       PSHS  Y,B,A\r","9A14: 1A 50       ORCC  #$50\r","9A16: BD 87 5E    JSR   $875E\t* build linked list for voices\r","9A19: 1C AF       ANDCC #$AF\r","9A1B: 35 26       PULS  A,B,Y\r","9A1D: 16 00 2D    LBRA  $9A4D\r","\r","9A20: 81 22       CMPA  #$22\t* 34 (osc mix)\r","9A22: 10 26 00 06 LBNE  $9A2C\t* no, continue\r","9A26: BD 9D 41    JSR   $9D41\t* set 4x scaling\r","9A29: 16 00 21    LBRA  $9A4D\t* continue\r","\r","9A2C: 81 23       CMPA  #$23\t* 35 (osc mix Vs)\r","9A2E: 10 26 00 06 LBNE  $9A38\t* no, skip\r","9A32: BD 9D 41    JSR   $9D41\t* 4x scaling\r","9A35: 16 00 15    LBRA  $9A4D\t* continue\r","\r","9A38: 81 24       CMPA  #$24\t* 36 cutoff?\r","9A3A: 10 26 00 06 LBNE  $9A44\t* no, continue\r","9A3E: BD 9D 38    JSR   $9D38\t* 2x scalling\r","9A41: 16 00 09    LBRA  $9A4D\t* continue\r","\r","9A44: 81 25       CMPA  #$25\t* 37 resonance\r","9A46: 10 26 00 03 LBNE  $9A4D\t* no, continue\r","9A4A: BD 9D 41    JSR   $9D41\t* 4x scaling\r","9A4D: 96 8B       LDA   $8B\t* parameter being examined\r","9A4F: 81 2D       CMPA  #$2D\t* 45 (VCF Attack Vs)\r","9A51: 25 07       BCS   $9A5A\t* lower? continue\r","9A53: 81 31       CMPA  #$31\t* 49 (VCF Release Vs)\r","9A55: 22 03       BHI   $9A5A\t* higher, continue\r","9A57: BD 9D 41    JSR   $9D41\t* 4x scaling\r","9A5A: 96 8B       LDA   $8B\t* get parameter\r","9A5C: 81 37       CMPA  #$37\t* 55 (DCA Attack Vs)\r","9A5E: 25 07       BCS   $9A67\t* lower, continue\r","9A60: 81 3B       CMPA  #$3B\t* 59 (DCA Release Vs)\r","9A62: 22 03       BHI   $9A67\t* higher, continue\r","9A64: BD 9D 41    JSR   $9D41\t* 4x scaling\r","9A67: 8E A0 57    LDX   #$A057\t* table of values\r","9A6A: A6 85       LDA   B,X\t* b contains ?\r","9A6C: 97 A0       STA   $A0\t* maximum parameter value\r","9A6E: 30 A5       LEAX  B,Y\t* b must be parameter offset?\r","9A70: 7E 9C C1    JMP   $9CC1\t* display\r","\r","* per-wavesample params?\r","9A73: 96 8B       LDA   $8B\t* fetch parameter\r","9A75: 81 3C       CMPA  #$3C\t* 60 (ws start)\r","9A77: 10 25 00 B4 LBCS  $9B2F\t* no, continue\r","9A7B: 81 48       CMPA  #$48\t* 72 (top key)\r","9A7D: 10 22 00 AE LBHI  $9B2F\t* no, continue\r","9A81: 8D 02       BSR   $9A85\t* get wavesample parameter\r","9A83: 20 1C       BRA   $9AA1\t* decode\r","\r","* look up upper or lower wavesample params for editing\r","* $80a4 toggles which table we read and which variable we look up\r","* sets the user stack and $80a9 points to the value in the table\r","* returns U = program, Y = wavesample parameter\r","9A85: 96 A4       LDA   $A4\t* upper/lower\r","9A87: 27 0A       BEQ   $9A93\t* if zero, skip\r","9A89: 10 8E 8E BF LDY   #$8EBF\t* lookup table pointing to upper params\r","9A8D: DE A5       LDU   $A5\t* upper program?\r","9A8F: 96 A9       LDA   $A9\t* upper wavesample\r","9A91: 20 08       BRA   $9A9B\t* skip\r","9A93: 10 8E 8E AF LDY   #$8EAF\t* lookup table pointing to lower params\r","9A97: DE A7       LDU   $A7\t* lower program?\r","9A99: 96 AA       LDA   $AA\t* lower wavesample\r","9A9B: 48          ASLA  \t* multiply by 2\r","9A9C: AE A6       LDX   A,Y\t* fetch value from table\r","9A9E: 1F 12       TFR   X,Y\t* return with new value in Y and X\r","9AA0: 39          RTS   \r","\r","* decode params?\r","* parameter? in B, wavesample pointer in X\r","9AA1: 30 85       LEAX  B,X\r","9AA3: 9F 9D       STX   $9D\t* parameter pointer\r","9AA5: 96 8B       LDA   $8B\t* parameter value\r","9AA7: 81 3C       CMPA  #$3C\t* 60 wavesample start\r","9AA9: 25 1C       BCS   $9AC7\r","9AAB: 81 40       CMPA  #$40\t* 64 loop fine\r","9AAD: 22 18       BHI   $9AC7\r","9AAF: 0D 84       TST   $84\r","9AB1: 27 0D       BEQ   $9AC0\r","9AB3: 2B 05       BMI   $9ABA\r","9AB5: A6 84       LDA   ,X\r","9AB7: 4C          INCA  \r","9AB8: 20 03       BRA   $9ABD\r","\r","9ABA: A6 84       LDA   ,X\r","9ABC: 4A          DECA  \r","9ABD: BD 8F 11    JSR   $8F11\r","9AC0: 9E 9D       LDX   $9D\r","9AC2: E6 84       LDB   ,X\r","9AC4: 7E 9D 15    JMP   $9D15\r","\r","9AC7: 96 8B       LDA   $8B\r","9AC9: 81 41       CMPA  #$41\t* 65 loop on/off\r","9ACB: 26 15       BNE   $9AE2\r","9ACD: 0D 84       TST   $84\r","9ACF: 27 0C       BEQ   $9ADD\r","9AD1: 2B 04       BMI   $9AD7\r","9AD3: 86 01       LDA   #$01\r","9AD5: 20 01       BRA   $9AD8\r","\r","9AD7: 4F          CLRA  \r","9AD8: C6 08       LDB   #$08\r","9ADA: BD 8F 11    JSR   $8F11\r","9ADD: 9E 9D       LDX   $9D\r","9ADF: 7E 9C D3    JMP   $9CD3\r","\r","9AE2: 96 8B       LDA   $8B\r","9AE4: 81 42       CMPA  #$42\t* 66 wavesample rotate\r","9AE6: 26 1A       BNE   $9B02\r","9AE8: 8E 80 9F    LDX   #$809F\r","9AEB: 0D 84       TST   $84\r","9AED: 27 0E       BEQ   $9AFD\r","9AEF: 2B 07       BMI   $9AF8\r","9AF1: 6C 84       INC   ,X\r","9AF3: BD 98 AB    JSR   $98AB\r","9AF6: 20 05       BRA   $9AFD\r","\r","9AF8: 6A 84       DEC   ,X\r","9AFA: BD 98 CE    JSR   $98CE\r","9AFD: E6 84       LDB   ,X\r","9AFF: 16 02 13    LBRA  $9D15\r","\r","9B02: 96 8B       LDA   $8B\r","9B04: 81 46       CMPA  #$46\t* 70 relative filter freq\r","9B06: 27 04       BEQ   $9B0C\r","9B08: 81 47       CMPA  #$47\t* 71 max filter freq\r","9B0A: 26 03       BNE   $9B0F\r","9B0C: BD 9D 38    JSR   $9D38\t* 2x scaling\r","9B0F: 96 8B       LDA   $8B\r","9B11: 81 48       CMPA  #$48\t* 72 top key\r","9B13: 26 0E       BNE   $9B23\r","9B15: 86 01       LDA   #$01\r","9B17: 97 A3       STA   $A3\r","9B19: 0D 84       TST   $84\r","9B1B: 27 06       BEQ   $9B23\r","9B1D: 8D 04       BSR   $9B23\r","9B1F: BD 8E CF    JSR   $8ECF\r","9B22: 39          RTS   \r","\r","9B23: CE A0 77    LDU   #$A077\r","9B26: C0 08       SUBB  #$08\r","9B28: A6 C5       LDA   B,U\r","9B2A: 97 A0       STA   $A0\r","9B2C: 7E 9C C1    JMP   $9CC1\r","\r","9B2F: 96 8B       LDA   $8B\r","9B31: 81 51       CMPA  #$51\t* 81 omni on/off\r","9B33: 25 60       BCS   $9B95\r","9B35: 81 58       CMPA  #$58\t* 88 seq loop\r","9B37: 22 5C       BHI   $9B95\r","9B39: 81 51       CMPA  #$51\t* 81 omni on/off\r","9B3B: 26 05       BNE   $9B42\r","9B3D: 8E 80 20    LDX   #$8020\r","9B40: 20 50       BRA   $9B92\r","\r","9B42: 81 52       CMPA  #$52\t* 82 MIDI channel\r","9B44: 26 0B       BNE   $9B51\r","9B46: 86 01       LDA   #$01\r","9B48: 97 A3       STA   $A3\r","9B4A: D7 A0       STB   $A0\r","9B4C: 8E 80 21    LDX   #$8021\t* MIDI channel\r","9B4F: 20 41       BRA   $9B92\r","\r","9B51: 81 53       CMPA  #$53\t* 83 MIDI Through\r","9B53: 26 05       BNE   $9B5A\r","9B55: 8E 80 22    LDX   #$8022\r","9B58: 20 38       BRA   $9B92\r","\r","9B5A: 81 54       CMPA  #$54\t* 84 MIDI message filter\r","9B5C: 26 07       BNE   $9B65\r","9B5E: 8E 80 23    LDX   #$8023\r","9B61: D7 A0       STB   $A0\r","9B63: 20 2D       BRA   $9B92\r","\r","9B65: 81 55       CMPA  #$55\t* 85 ext clock on/off\r","9B67: 26 05       BNE   $9B6E\r","9B69: 8E 80 24    LDX   #$8024\r","9B6C: 20 24       BRA   $9B92\r","\r","9B6E: 81 56       CMPA  #$56\t* 86 ext clock jack on/off\r","9B70: 26 05       BNE   $9B77\r","9B72: 8E 80 25    LDX   #$8025\r","9B75: 20 1B       BRA   $9B92\r","\r","9B77: 81 57       CMPA  #$57\t* 87 seq speed\r","9B79: 26 10       BNE   $9B8B\r","9B7B: BD 9D 38    JSR   $9D38\t* 2x scaling\r","9B7E: 86 C6       LDA   #$C6\r","9B80: 97 A0       STA   $A0\r","9B82: 86 01       LDA   #$01\r","9B84: 97 A1       STA   $A1\r","9B86: 8E 80 26    LDX   #$8026\r","9B89: 20 07       BRA   $9B92\r","\r","9B8B: 81 58       CMPA  #$58\t* seq loop switch\r","9B8D: 26 03       BNE   $9B92\r","9B8F: 8E 80 27    LDX   #$8027\r","9B92: 7E 9C C1    JMP   $9CC1\r","\r","9B95: 96 8B       LDA   $8B\r","9B97: 81 18       CMPA  #$18 \t* 24 keyboard balance\r","9B99: 26 0D       BNE   $9BA8\r","9B9B: 8E 80 15    LDX   #$8015\r","9B9E: BD 9D 38    JSR   $9D38\t* 2x scaling\r","9BA1: 86 7E       LDA   #$7E\r","9BA3: 97 A0       STA   $A0\r","9BA5: 7E 9C C1    JMP   $9CC1\r","\r","9BA8: 81 19       CMPA  #$19\t* 25 link upper/lower\r","9BAA: 26 06       BNE   $9BB2\t* no\r","9BAC: 8E 80 16    LDX   #$8016\t* Link Switch\r","9BAF: 7E 9C C1    JMP   $9CC1\t* display\r","\r","9BB2: 81 1A       CMPA  #$1A\t* 26 wavesample select\r","9BB4: 26 14       BNE   $9BCA\t* no, skip\r","9BB6: 0F 9F       CLR   $9F\t* some variable\r","9BB8: 0D A4       TST   $A4\t* upper/lower\r","9BBA: 27 05       BEQ   $9BC1\t* lower\r","9BBC: 8E 80 A9    LDX   #$80A9\t* upper wavesample pointer\r","9BBF: 20 03       BRA   $9BC4\t* continue\r","9BC1: 8E 80 AA    LDX   #$80AA\t* lower wavesample pointer\r","9BC4: 86 01       LDA   #$01\t* 1-based counting\r","9BC6: 97 A3       STA   $A3\r","9BC8: 20 1E       BRA   $9BE8\t* jump ahead\r","\r","9BCA: 81 15       CMPA  #$15\t* $15=21, master tune\r","9BCC: 26 0A       BNE   $9BD8\r","9BCE: 86 63       LDA   #$63\t* $63=99, max value\r","9BD0: 97 A0       STA   $A0\t* maximum parameter\r","9BD2: 8E 80 12    LDX   #$8012\t* Master Tune\r","9BD5: 16 00 E9    LBRA  $9CC1\t* display\r","\r","9BD8: 81 16       CMPA  #$16\t* pitch bend range\r","9BDA: 26 05       BNE   $9BE1\r","9BDC: 8E 80 13    LDX   #$8013\r","9BDF: 20 07       BRA   $9BE8\r","\r","9BE1: 81 17       CMPA  #$17\t* velocity sensitivity\r","9BE3: 26 08       BNE   $9BED\r","9BE5: 8E 80 14    LDX   #$8014\r","9BE8: D7 A0       STB   $A0\r","9BEA: 7E 9C C1    JMP   $9CC1\r","\r","9BED: 81 49       CMPA  #$49\t* sample time adjust\r","9BEF: 26 0E       BNE   $9BFF\r","9BF1: 86 1E       LDA   #$1E\t* 30, minimum\r","9BF3: 97 A1       STA   $A1\r","9BF5: 86 63       LDA   #$63\t* 99, maximum\r","9BF7: 97 A0       STA   $A0\r","9BF9: 8E 80 17    LDX   #$8017\t* param\r","9BFC: 16 00 C2    LBRA  $9CC1\r","\r","9BFF: 81 4A       CMPA  #$4A\t* 74 - input filter freq\r","9C01: 26 0D       BNE   $9C10\r","9C03: BD 9D 38    JSR   $9D38\t* 2x scaling\r","9C06: 86 C6       LDA   #$C6\t* max=198\r","9C08: 97 A0       STA   $A0\r","9C0A: 8E 80 18    LDX   #$8018\r","9C0D: 16 00 B1    LBRA  $9CC1\r","\r","9C10: 81 4B       CMPA  #$4B\t* 75 mic/line\r","9C12: 26 06       BNE   $9C1A\r","9C14: 8E 80 19    LDX   #$8019\t* \r","9C17: 16 00 A7    LBRA  $9CC1\r","\r","9C1A: 81 4C       CMPA  #$4C\t* 76 sample threshold\r","9C1C: 26 0D       BNE   $9C2B\r","9C1E: BD 9D 38    JSR   $9D38\t* 2x scaling\r","9C21: 8E 80 1A    LDX   #$801A\r","9C24: 86 7E       LDA   #$7E\r","9C26: 97 A0       STA   $A0\r","9C28: 16 00 96    LBRA  $9CC1\r","\r","9C2B: 81 4D       CMPA  #$4D\t* 77 user multisample\r","9C2D: 26 06       BNE   $9C35\r","9C2F: 8E 80 1B    LDX   #$801B\r","9C32: 16 00 8C    LBRA  $9CC1\r","\r","9C35: 81 4E       CMPA  #$4E\t* 78 LFO mod source\r","9C37: 26 05       BNE   $9C3E\r","9C39: 8E 80 1D    LDX   #$801D\r","9C3C: 20 AA       BRA   $9BE8\r","\r","9C3E: 81 4F       CMPA  #$4F\t* 79 MIX mod source\r","9C40: 26 06       BNE   $9C48\r","9C42: 8E 80 1E    LDX   #$801E\r","9C45: 16 FF A0    LBRA  $9BE8\r","\r","9C48: 81 50       CMPA  #$50\t* 80 Aftertouch Depth\r","9C4A: 26 0C       BNE   $9C58\r","9C4C: BD 9D 38    JSR   $9D38\t* 2x scaling\r","9C4F: 8E 80 1F    LDX   #$801F\r","9C52: 86 7E       LDA   #$7E\r","9C54: 97 A0       STA   $A0\r","9C56: 20 69       BRA   $9CC1\r","\r","9C58: 81 59       CMPA  #$59\t* 89 pedal sus/seq\r","9C5A: 26 1A       BNE   $9C76\t* no, continue\r","9C5C: 0D 84       TST   $84\t* editable?\r","9C5E: 27 10       BEQ   $9C70\t* jump\r","9C60: 2B 0C       BMI   $9C6E\t* jump\r","9C62: 86 01       LDA   #$01\t\r","9C64: 97 28       STA   $28\t* set flag\r","9C66: 0F 6B       CLR   $6B\t* clear\r","9C68: BD 87 DD    JSR   $87DD\r","9C6B: 7E 9C 70    JMP   $9C70\r","\r","9C6E: 0F 28       CLR   $28\r","9C70: 8E 80 28    LDX   #$8028\t* only place this literal value is\r","9C73: 7E 9C D3    JMP   $9CD3\r","\r","9C76: 81 5B       CMPA  #$5B\t* 91? What is Param 91?\r","9C78: 26 05       BNE   $9C7F\r","9C7A: 8E 80 29    LDX   #$8029\t* some variable?\r","9C7D: 20 42       BRA   $9CC1\r","\r","9C7F: 81 5C       CMPA  #$5C\t* 92? What is Param 92?\r","9C81: 26 15       BNE   $9C98\r","9C83: 8E 80 2A    LDX   #$802A\t* some variable\r","9C86: 0D 84       TST   $84\r","9C88: 27 0C       BEQ   $9C96\r","9C8A: 2B 07       BMI   $9C93\r","9C8C: 86 0B       LDA   #$0B\r","9C8E: B7 E2 06    STA   $E206\r","9C91: 20 03       BRA   $9C96\r","\r","9C93: 7F E2 06    CLR   $E206\r","9C96: 20 29       BRA   $9CC1\r","\r","9C98: 81 61       CMPA  #$61\t* 97 Software Version\r","9C9A: 26 07       BNE   $9CA3\r","9C9C: 0F 84       CLR   $84\r","9C9E: 8E 80 2B    LDX   #$802B\t* points to value $32 in RAM\r","9CA1: 20 1E       BRA   $9CC1\r","\r","9CA3: 81 62       CMPA  #$62\t* 98 show last FDC error\r","9CA5: 26 07       BNE   $9CAE\r","9CA7: 0F 84       CLR   $84\r","9CA9: 8E 80 07    LDX   #fdcerr\r","9CAC: 20 13       BRA   $9CC1\r","\r","9CAE: 81 63       CMPA  #$63\t* 99 show last FDC status\r","9CB0: 26 07       BNE   $9CB9\r","9CB2: 0F 84       CLR   $84\r","9CB4: 8E 80 06    LDX   #fdcstat\r","9CB7: 20 08       BRA   $9CC1\r","\r","9CB9: BD 94 31    JSR   $9431\t* set83898a\r","9CBC: CC 11 12    LDD   #$1112\r","9CBF: 20 62       BRA   $9D23\r","\r","* unknown\r","* called to display X\r","9CC1: 0D AB       TST   $AB\t* some variable\r","9CC3: 27 1A       BEQ   $9CDF\t* 0? jump\r","9CC5: 0D 84       TST   $84\t* Editable?\r","9CC7: 27 0A       BEQ   $9CD3\t* not editable\r","9CC9: 2B 06       BMI   $9CD1\t* bit 7 set, jump elsewhere\r","9CCB: 86 01       LDA   #$01\r","9CCD: A7 84       STA   ,X\t* (x)=1\r","9CCF: 20 02       BRA   $9CD3\t* skip\r","\r","9CD1: 6F 84       CLR   ,X\t* (x)=0\r","9CD3: CC 12 11    LDD   #$1211\t* value to display?\r","9CD6: 6D 84       TST   ,X\r","9CD8: 26 02       BNE   $9CDC\r","9CDA: C6 0F       LDB   #$0F\r","9CDC: 7E 9D 23    JMP   $9D23\t* jump to thing that calculates LED patterns\r","\r","* up and down values\r","* $8084 might be negative for down, nonzero for up, and zero for uneditable\r","9CDF: 0D 84       TST   $84\t* Editable?\r","9CE1: 27 18       BEQ   $9CFB\t* no\r","9CE3: 2B 0C       BMI   $9CF1\t* bit 7 set, decrement\r","9CE5: E6 84       LDB   ,X\t* get parameter\r","9CE7: D1 A0       CMPB  $A0\r","9CE9: 24 10       BCC   $9CFB\t* >= max value\r","9CEB: DB A2       ADDB  $A2\t* increment by scale size\r","9CED: E7 84       STB   ,X\t* save it back\r","9CEF: 20 0A       BRA   $9CFB\t* continue\r","\r","9CF1: E6 84       LDB   ,X\t* get parameter\r","9CF3: D1 A1       CMPB  $A1\r","9CF5: 23 04       BLS   $9CFB\t* <= min value\r","9CF7: D0 A2       SUBB  $A2\t* subtract scale size\r","9CF9: E7 84       STB   ,X\t* save it\r","9CFB: E6 84       LDB   ,X\t* get it back\r","9CFD: 96 A3       LDA   $A3\t* multiplied value flag\r","9CFF: 27 0E       BEQ   $9D0F\t* zero? just show digit\r","9D01: 2B 03       BMI   $9D06\t* 7 set, skip\r","9D03: 5C          INCB  \t* 7 not set, display 1-based\r","9D04: 20 09       BRA   $9D0F\t* show digit\r","\r","9D06: 81 81       CMPA  #$81\t* Flag is $81?\r","9D08: 26 03       BNE   $9D0D\t* no, skip\r","9D0A: 54          LSRB  \t* Yes, divide by 2\r","9D0B: 20 02       BRA   $9D0F\t* show digit\r","\r","* somewhere around here we can show hex values\r","9D0D: 54          LSRB  \t* Flag is $82\r","9D0E: 54          LSRB \t\t* divide by 4\r","\r","* show digit\r","\r","9D0F: 96 AC       LDA   $AC\t* some variable\r","9D11: 84 40       ANDA  #$40\t* if bit 6 is clear... \r","9D13: 27 0C       BEQ   $9D21\t* jump ahead and show it as decimal\r","9D15: 1F 98       TFR   B,A\t* a=b\r","9D17: 44          LSRA  \t\r","9D18: 44          LSRA  \r","9D19: 44          LSRA  \r","9D1A: 44          LSRA  \t* a= upper nybble of b\r","9D1B: 84 0F       ANDA  #$0F\t* mask upper bits\r","9D1D: C4 0F       ANDB  #$0F\t* mask upper bits\r","9D1F: 20 02       BRA   $9D23\t* jump to LED patterns\r","\r","9D21: 8D 0A       BSR   $9D2D\t* call /10\r","9D23: CE FB 4D    LDU   #$FB4D\t* LED patterns\r","9D26: A6 C6       LDA   A,U\r","9D28: E6 C5       LDB   B,U\t* D now contains bit patters\r","9D2A: DD B3       STD   $B3\t* save LED bit patterns in some variable\r","9D2C: 39          RTS   \r","\r","* divide by ten by successive subtraction\r","* returns a=quotient, b=remainder\r","9D2D: 4F          CLRA  \t* zero out a\r","9D2E: C1 0A       CMPB  #$0A\t* b=10?\r","9D30: 25 05       BCS   $9D37\t* less, end\r","9D32: C0 0A       SUBB  #$0A\t* subtract 10\r","9D34: 4C          INCA\r","9D35: 20 F7       BRA   $9D2E\t* loop\r","9D37: 39          RTS   \r","\r","* scaling values for \"double\" params like cutoff\r","9D38: 86 81       LDA   #$81\r","9D3A: 97 A3       STA   $A3\r","9D3C: 86 02       LDA   #$02\r","9D3E: 97 A2       STA   $A2\r","9D40: 39          RTS   \r","\r","* scaling values for \"quadruple\" values like resonance\r","9D41: 86 82       LDA   #$82\r","9D43: 97 A3       STA   $A3\r","9D45: 86 04       LDA   #$04\r","9D47: 97 A2       STA   $A2\r","9D49: 39          RTS   \r","\r","9D4A: 00 \r","\r","* unknown\r","9D4B: B6 9D 4A    LDA   $9D4A\t* odd variable just at the top there\r","9D4E: 81 00       CMPA  #$00\r","9D50: 26 36       BNE   $9D88\t* not 0, jump\r","9D52: BD 9D D7    JSR   $9DD7\t* call\r","9D55: 96 AF       LDA   $AF\t* some variable\r","9D57: 81 0B       CMPA  #$0B\r","9D59: 27 04       BEQ   $9D5F\t* is 11?\r","9D5B: 81 11       CMPA  #$11\t\r","9D5D: 26 09       BNE   $9D68\t* is 17?\r","9D5F: 97 AD       STA   $AD\t* some variable\r","9D61: 86 02       LDA   #$02\r","9D63: B7 9D 4A    STA   $9D4A\t* set mystery variable\r","9D66: 20 49       BRA   $9DB1\t* jump aead\r","\r","9D68: 96 AF       LDA   $AF\t* some variable\r","9D6A: 81 F0       CMPA  #$F0\t* f0? \r","9D6C: 27 16       BEQ   $9D84\t* yes, jump (indirectly) back\r","9D6E: 97 AD       STA   $AD\t* some variable\r","9D70: 86 05       LDA   #$05\r","9D72: 97 31       STA   $31\t* some variable\r","9D74: 86 01       LDA   #$01\r","9D76: B7 9D 4A    STA   $9D4A\t* set mystery variable\r","9D79: 10 8E FB 68 LDY   #$FB68\t* points to table of permuted values\r","9D7D: D6 AD       LDB   $AD\t* some variable\r","9D7F: A6 A5       LDA   B,Y\t* a=(b+y)\r","9D81: 97 AE       STA   $AE\t* some variable\r","9D83: 39          RTS   \r","\r","9D84: 20 CC       BRA   $9D52\t* jump back to call\r","\r","9D86: 20 4C       BRA   $9DD4\t* never called?\r","\r","* if that odd variable is nonzero\r","9D88: 81 01       CMPA  #$01\t* is it 1?\r","9D8A: 26 21       BNE   $9DAD\t* no, next\r","9D8C: BD 9D D7    JSR   $9DD7\t* call\r","9D8F: 96 31       LDA   $31\t* some variable\r","9D91: 26 F9       BNE   $9D8C\t* nonzero, loop back to call\r","9D93: 96 AF       LDA   $AF\t* some variable\r","9D95: 81 F0       CMPA  #$F0\t* what is $f0 for\r","9D97: 26 F3       BNE   $9D8C\t* loop back to call\r","9D99: 86 05       LDA   #$05\t\r","9D9B: 97 31       STA   $31\t* some variable\r","9D9D: BD 9D D7    JSR   $9DD7\t* call\r","9DA0: 96 31       LDA   $31\t* some variable\r","9DA2: 26 F9       BNE   $9D9D\t* nonzero? skip\r","9DA4: 86 00       LDA   #$00\r","9DA6: B7 9D 4A    STA   $9D4A\t* zero mystery variable\r","9DA9: 20 A7       BRA   $9D52\t* and loop back to original call\r","\r","9DAB: 20 27       BRA   $9DD4\t* never called?\r","\r","9DAD: 81 02       CMPA  #$02\t* was it 2?\r","9DAF: 26 23       BNE   $9DD4\t* no, jump ahead\r","9DB1: BD 9D D7    JSR   $9DD7\t* call\r","9DB4: 96 AF       LDA   $AF\t* some variable\r","9DB6: 91 AD       CMPA  $AD\t* compare?\r","9DB8: 26 0C       BNE   $9DC6\t* not equal, skip\r","9DBA: 10 8E FB 68 LDY   #$FB68\t* permuted values\r","9DBE: A6 A6       LDA   A,Y\t* a=(y+a)\r","9DC0: 97 AE       STA   $AE\t* some variable\r","9DC2: 20 0F       BRA   $9DD3\t* jump forwards\r","\r","9DC4: 20 0D       BRA   $9DD3\r","\r","9DC6: 86 0D       LDA   #$0D\t* 13\r","9DC8: 97 AE       STA   $AE\t* some variable\r","9DCA: 86 05       LDA   #$05\t* 5\r","9DCC: 97 31       STA   $31\t* some variable\r","9DCE: 86 01       LDA   #$01\t* 1\r","9DD0: B7 9D 4A    STA   $9D4A\t* mystery variable\r","9DD3: 39          RTS   \r","\r","9DD4: 16 FF 7B    LBRA  $9D52\t* jump back to call\r","\r","* unknown\r","* ends up doing things to VIA IORA\r","9DD7: DC B3       LDD   $B3\t* LED bit pattern\r","9DD9: 0D 83       TST   $83\t* bit test\r","9DDB: 2B 06       BMI   $9DE3\t* bit 7 set, finish\r","9DDD: 26 03       BNE   $9DE2\t* non-zero? jump\r","9DDF: 4C          INCA  \t* zero, increment  \r","9DE0: 20 01       BRA   $9DE3\t* skip\r","9DE2: 5C          INCB \t\t* increase b? \r","9DE3: 97 B5       STA   $B5\t* save in $80B5\r","9DE5: D7 B6       STB   $B6\r","9DE7: 5F          CLRB\r","9DE8: 86 F0       LDA   #$F0\r","9DEA: 97 AF       STA   $AF\r","9DEC: D7 B2       STB   $B2\r","9DEE: 1F 98       TFR   B,A\r","9DF0: 8A 18       ORA   #$18\r","9DF2: 0D 8A       TST   $8A\r","9DF4: 27 0A       BEQ   $9E00\r","9DF6: C6 80       LDB   #$80\r","9DF8: D5 33       BITB  $33\r","9DFA: 26 04       BNE   $9E00\r","9DFC: 08 B5       ASL   $B5\r","9DFE: 20 06       BRA   $9E06\r","\r","* $b5 contains bit pattern from A\r","9E00: 08 B5       ASL   $B5\t* shift top bit into carry\r","9E02: 24 02       BCC   $9E06\t* it's zero, skip\r","9E04: 84 F7       ANDA  #$F7\t* mask A\r","9E06: 0D 89       TST   $89\t* some variable\r","9E08: 27 0A       BEQ   $9E14\t* zero, skip\r","9E0A: C6 80       LDB   #$80\t* delay time?\r","9E0C: D5 33       BITB  $33\t* ISR counter\r","9E0E: 26 04       BNE   $9E14\t* not equal, skip\r","9E10: 08 B6       ASL   $B6\t* shift top bit of right digit?\r","9E12: 20 06       BRA   $9E1A\t* continue\r","\r","9E14: 08 B6       ASL   $B6\t* shift top bit of right digit?\r","9E16: 24 02       BCC   $9E1A\t* zero, clear\r","9E18: 84 EF       ANDA  #$EF\t* mask A\r","9E1A: 1F 89       TFR   A,B\r","9E1C: CA 18       ORB   #$18\r","9E1E: F7 E2 0F    STB   $E20F\t* IORA\r","9E21: 1E 12       EXG   X,Y\r","9E23: 1E 12       EXG   X,Y\r","9E25: F6 E2 0F    LDB   $E20F\t* VIA IORA\r","9E28: C4 E0       ANDB  #$E0\t* keyboard lines\r","9E2A: C1 E0       CMPB  #$E0\t* anything pulled high?\r","9E2C: 26 02       BNE   $9E30\t* yes, skip\r","9E2E: C6 0F       LDB   #$0F\t* no\r","9E30: D7 B1       STB   $B1\t* some variable\r","9E32: B7 E2 0F    STA   $E20F\t* VIA IORA\r","9E35: 86 01       LDA   #$01\r","9E37: 97 37       STA   $37\t* if non-zero, counted down by ISR\r","9E39: BD 88 5E    JSR   $885E\t* task list?\r","9E3C: BD A4 1A    JSR   $A41A\t* get byte from keystroke ring buffer\r","9E3F: 24 15       BCC   $9E56\t* no byte available, skip\r","9E41: 97 AE       STA   $AE\t* save current keystroke\r","9E43: 86 01       LDA   #$01\r","9E45: B7 82 08    STA   $8208\t* keystroke flag?\r","9E48: BD 90 E9    JSR   $90E9\t* handle current keystroke\r","9E4B: 7F 82 08    CLR   $8208\t* keystroke flag\r","9E4E: 86 0F       LDA   #$0F\r","9E50: 97 B1       STA   $B1\r","9E52: 86 F0       LDA   #$F0\r","9E54: 97 AF       STA   $AF\r","9E56: 0D 37       TST   $37\r","9E58: 27 05       BEQ   $9E5F\r","9E5A: BD 88 5E    JSR   $885E\r","9E5D: 20 F7       BRA   $9E56\r","\r","9E5F: 96 B1       LDA   $B1\r","9E61: 81 0F       CMPA  #$0F\r","9E63: 27 14       BEQ   $9E79\r","9E65: 86 02       LDA   #$02\r","9E67: 08 B1       ASL   $B1\r","9E69: 24 03       BCC   $9E6E\r","9E6B: 4A          DECA  \r","9E6C: 20 F9       BRA   $9E67\r","\r","9E6E: 97 B0       STA   $B0\r","9E70: D6 B2       LDB   $B2\r","9E72: 58          ASLB  \r","9E73: DB B2       ADDB  $B2\r","9E75: DB B0       ADDB  $B0\r","9E77: D7 AF       STB   $AF\r","9E79: D6 B2       LDB   $B2\r","9E7B: 5C          INCB  \r","9E7C: C1 07       CMPB  #$07\r","9E7E: 10 23 FF 6A LBLS  $9DEC\r","9E82: 39          RTS   \r","\r","* unknown\r","* handle load keypresses?\r","9E83: 96 85       LDA   $85\t* save routine uses this\r","9E85: 81 01       CMPA  #$01\r","9E87: 26 1F       BNE   $9EA8\r","9E89: B6 82 23    LDA   $8223\t* some variable\r","9E8C: B7 82 1F    STA   $821F\r","9E8F: 96 91       LDA   $91\t* some variable\r","9E91: 27 08       BEQ   $9E9B\r","9E93: 81 01       CMPA  #$01\r","9E95: 26 08       BNE   $9E9F\r","9E97: 86 02       LDA   #$02\r","9E99: 20 5F       BRA   $9EFA\r","\r","9E9B: 86 01       LDA   #$01\r","9E9D: 20 5B       BRA   $9EFA\r","\r","9E9F: 96 8C       LDA   $8C\t* bank to save to?\r","9EA1: 27 04       BEQ   $9EA7\t* 0?\r","9EA3: 86 03       LDA   #$03\r","9EA5: 20 53       BRA   $9EFA\r","\r","9EA7: 3F          SWI\t\t* Load All 0, reboot!\r","9EA8: 81 02       CMPA  #$02\t* 2?\r","9EAA: 26 1A       BNE   $9EC6\t* no, skip\r","9EAC: B6 82 23    LDA   $8223\t* some variable\r","9EAF: B7 82 1F    STA   $821F\t* some variable\r","9EB2: 96 92       LDA   $92\t* save routine uses this\r","9EB4: 27 08       BEQ   $9EBE\t* 0? skip\r","9EB6: 81 01       CMPA  #$01\r","9EB8: 26 08       BNE   $9EC2\r","9EBA: 86 05       LDA   #$05\r","9EBC: 20 3C       BRA   $9EFA\r","\r","9EBE: 86 04       LDA   #$04\r","9EC0: 20 38       BRA   $9EFA\r","\r","9EC2: 86 06       LDA   #$06\r","9EC4: 20 34       BRA   $9EFA\r","\r","9EC6: 81 05       CMPA  #$05\r","9EC8: 26 04       BNE   $9ECE\r","9ECA: 86 07       LDA   #$07\r","9ECC: 20 06       BRA   $9ED4\r","\r","9ECE: 81 06       CMPA  #$06\r","9ED0: 26 0A       BNE   $9EDC\r","9ED2: 86 08       LDA   #$08\r","9ED4: F6 82 22    LDB   $8222\r","9ED7: F7 82 1F    STB   $821F\r","9EDA: 20 1E       BRA   $9EFA\r","\r","9EDC: 81 07       CMPA  #$07\r","9EDE: 26 09       BNE   $9EE9\r","9EE0: C6 03       LDB   #$03\r","9EE2: F7 82 1F    STB   $821F\r","9EE5: 86 0A       LDA   #$0A\r","9EE7: 20 11       BRA   $9EFA\r","\r","9EE9: 81 09       CMPA  #$09\r","9EEB: 26 05       BNE   $9EF2\r","9EED: 86 0B       LDA   #$0B\r","9EEF: 5F          CLRB  \r","9EF0: 20 08       BRA   $9EFA\r","\r","9EF2: 86 0F       LDA   #$0F\r","9EF4: B7 80 07    STA   fdcerr\r","9EF7: 7E 9F 1B    JMP   $9F1B\r","\r","9EFA: D6 8C       LDB   $8C\t* bank to save to\r","9EFC: F1 82 1F    CMPB  $821F\t* some variable\r","9EFF: 23 08       BLS   $9F09\r","9F01: 86 0E       LDA   #$0E\r","9F03: B7 80 07    STA   fdcerr\r","9F06: 7E 9F 1B    JMP   $9F1B\r","\r","9F09: FD 82 20    STD   $8220\r","9F0C: BD 9F 60    JSR   $9F60\t* call\r","9F0F: FC 82 20    LDD   $8220\r","9F12: BD A4 35    JSR   $A435\t* deal with disk commands\r","9F15: 25 04       BCS   $9F1B\t* is carry set if an error occurs?\r","9F17: BD 9F 6F    JSR   $9F6F\t* reset some stuff\r","9F1A: 39          RTS   \r","\r","9F1B: BD 9F 6F    JSR   $9F6F\t* reset some stuff\r","9F1E: B6 80 07    LDA   fdcerr\t* fetch stored FDC error\t\r","9F21: 27 3B       BEQ   $9F5E\t* if it's zero, hang?\r","9F23: 81 01       CMPA  #$01\t* disk error?\r","9F25: 26 05       BNE   $9F2C\t* nope\r","9F27: CC 7A 9E    LDD   #$7A9E\t* \"dE\" code\r","9F2A: 20 2F       BRA   $9F5B\r","\r","9F2C: 81 02       CMPA  #$02\t\r","9F2E: 25 09       BCS   $9F39\r","9F30: 81 05       CMPA  #$05\r","9F32: 22 05       BHI   $9F39\r","9F34: CC 2A 8E    LDD   #$2A8E\t* \"nF\" code\r","9F37: 20 22       BRA   $9F5B\r","\r","9F39: 81 06       CMPA  #$06\r","9F3B: 26 05       BNE   $9F42\r","9F3D: CC 38 7A    LDD   #$387A\t* \"ud\" code\r","9F40: 20 19       BRA   $9F5B\r","\r","9F42: 81 07       CMPA  #$07\r","9F44: 26 05       BNE   $9F4B\r","9F46: CC 2A 7A    LDD   #$2A7A\t* \"nd\" code\r","9F49: 20 10       BRA   $9F5B\r","\r","9F4B: 81 08       CMPA  #$08\r","9F4D: 26 05       BNE   $9F54\r","9F4F: CC CE 7A    LDD   #$CE7A\t* \"Pd\" code\r","9F52: 20 07       BRA   $9F5B\r","\r","9F54: 81 09       CMPA  #$09\r","9F56: 26 06       BNE   $9F5E\r","9F58: CC 2A 1A    LDD   #$2A1A\t* \"nc\" code?\r","9F5B: DD B3       STD   $B3\t* LED bit pattern\r","9F5D: 39          RTS   \r","\r","9F5E: 20 FE       BRA   $9F5E\r","\r","* seems to be called before sampling?\r","* reset hardware\r","9F60: 1A 50       ORCC  #$50\t* mask interrupts\r","9F62: BD AB 90    JSR   $AB90\t* thing that gets called before sampling\r","9F65: BD F1 BB    JSR   qchipsetup\r","9F68: BD 8C 80    JSR   $8C80\t* initialise voice tables\r","9F6B: BD F5 41    JSR   unknown3 * call to reset ACIA and VIA\r","9F6E: 39          RTS   \r","\r","* reset a bunch of stuff\r","9F6F: 1A 50       ORCC  #$50\t* mask interrupts\r","9F71: BD F5 41    JSR   unknown3\t* reinit via\r","9F74: BD F5 2D    JSR   unknown2\t* set timer 2\r","9F77: BD 87 5E    JSR   $875E\t* build linked list for voices\r","9F7A: BD 89 6B    JSR   $896B\t* handle keyboard controller\r","9F7D: BD A0 7E    JSR   $A07E\t* reset serial port\r","9F80: 86 CC       LDA   #$CC\t* T1 free-run, out on PB7, shift in ext clk\r","9F82: B7 E2 0B    STA   $E20B\t* VIA ACR\r","9F85: 7F E2 06    CLR   $E206\t* VIA timer 1 low\r","9F88: 7F E2 07    CLR   $E207\t* VIA timer 1 high\r","9F8B: 7F E2 04    CLR   $E204\t* VIA timer 1 latch\r","9F8E: 7F E2 05    CLR   $E205\t* VIA timer 1 trigger\r","9F91: 0F 79       CLR   $79\t* some variable\r","9F93: 0F 6B       CLR   $6B\t* cleared by seq/sustain sw\r","9F95: 0F 72       CLR   $72\t* some variable\r","9F97: 1C AF       ANDCC #$AF\t* re-enable interrupts\r","9F99: 39          RTS   \r","\r","* unknown\r","* copy upper/lower param keystrokes\r","9F9A: 97 BA       STA   $BA\t* some variable\r","9F9C: 81 0F       CMPA  #$0F\r","9F9E: 26 04       BNE   $9FA4\t* not 15? skip\r","9FA0: 86 1C       LDA   #$1C\t* \"L\"\r","9FA2: 20 02       BRA   $9FA6\t* skip\r","\r","9FA4: 86 7C       LDA   #$7C\t* \"U\"\r","9FA6: C6 9C       LDB   #$9C\t* \"C\"\r","9FA8: DD B3       STD   $B3\t* LED bit pattern\r","9FAA: BD 94 31    JSR   $9431\t* set83898a\r","9FAD: 0F 8A       CLR   $8A\t* some variable\r","9FAF: C6 06       LDB   #$06\t* 6\r","9FB1: D7 82       STB   $82\t* used by save routine?\r","9FB3: 39          RTS   \r","\r","9FB4: 96 B7       LDA   $B7\r","9FB6: C6 24       LDB   #$24\r","9FB8: 3D          MUL   \r","9FB9: DD B8       STD   $B8\r","9FBB: BD 99 C2    JSR   $99C2\r","9FBE: 1F 21       TFR   Y,X\r","9FC0: D6 BA       LDB   $BA\r","9FC2: 27 22       BEQ   $9FE6\r","9FC4: C1 0F       CMPB  #$0F\r","9FC6: 26 07       BNE   $9FCF\r","9FC8: DC B8       LDD   $B8\r","9FCA: C3 B4 FE    ADDD  #$B4FE\r","9FCD: 20 09       BRA   $9FD8\r","\r","9FCF: C1 10       CMPB  #$10\r","9FD1: 26 13       BNE   $9FE6\r","9FD3: DC B8       LDD   $B8\r","9FD5: C3 B7 6F    ADDD  #$B76F\r","9FD8: 1F 03       TFR   D,U\r","9FDA: 86 00       LDA   #$00\r","9FDC: C6 24       LDB   #$24\r","9FDE: 1F 02       TFR   D,Y\r","9FE0: BD F5 5B    JSR   copybytes\r","9FE3: 0F BA       CLR   $BA\r","9FE5: 39          RTS   \r","\r","9FE6: CC 2A 3A    LDD   #$2A3A\r","9FE9: DD B3       STD   $B3\t* LED bit pattern\r","9FEB: 86 80       LDA   #$80\r","9FED: 97 BA       STA   $BA\r","9FEF: BD 94 31    JSR   $9431\t* set83898a\r","9FF2: 39          RTS   \r","\r","9FF3: 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF FF \r","A003: FF 00 00 00 00 09 0C 3F 20 81 07 09 8B 80 81 01 \r","A013: 02 03 04 05 06 07 08 00 0C 0D 0E 0F 10 11 12 13 \r","A023: 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 4F 50 51 52 \r","A033: 53 88 40 09 4A 0B 0C 0D 0E 09 09 81 09 81 09 09 \r","A043: 09 81 0F 81 03 81 81 09 81 81 00 81 81 00 00 00 \r","A053: 00 40 20 40 01 63 63 63 FC 7C C6 A0 04 07 00 01 \r","A063: 1F 1F 1F 1F 1F 7C 7C 7C 7C 7C 1F 1F 1F 1F 1F 7C \r","A073: 7C 7C 7C 7C 01 07 FF 3F C6 C6 3C \r","\r","* init ACIA\r","A07E: 86 03       LDA   #$03\t* ACIA Master Reset\r","A080: B7 E1 00    STA   $E100\t* ACIA control reg\r","A083: 86 95       LDA   #$95\t* /16, 8N1, RX interrupt on\r","A085: B7 E1 00    STA   $E100\t* ACIA control reg\r","A088: CC 82 25    LDD   #$8225\t* no idea\r","A08B: DD BC       STD   $BC\t* $80bc\t- possibly serial ring buffer?\r","A08D: DD BE       STD   $BE\t* $80be\r","A08F: CC A1 BC    LDD   #$A1BC\t* no idea\r","A092: DD C6       STD   $C6\t* $80c6\r","\r","; called from FIRQ ISR\r","A094: CC A2 4A    LDD   #$A24A\t* points at RTS\r","A097: DD C0       STD   $C0\r","A099: 7F 82 35    CLR   $8235\t* RX buffer save pointer\r","A09C: 7F 82 36    CLR   $8236\t* RX buffer read pointer\r","A09F: 7F 82 37    CLR   $8237\t* some variable used in FIRQ ISR\r","A0A2: 39          RTS   \r","\r","* unknown, do something to ring buffer?\r","A0A3: 34 46       PSHS  U,B,A\r","A0A5: DC BC       LDD   $BC\r","A0A7: 93 BE       SUBD  $BE\r","A0A9: 2A 01       BPL   $A0AC\r","A0AB: 50          NEGB  \r","A0AC: C1 08       CMPB  #$08\r","A0AE: 23 05       BLS   $A0B5\r","A0B0: BD 88 5E    JSR   $885E\r","A0B3: 20 F0       BRA   $A0A5\r","\r","A0B5: 35 C6       PULS  A,B,U,PC ;(PUL? PC=RTS)\r","\r","* send MIDI note on\r","A0B7: 8D EA       BSR   $A0A3\r","A0B9: 34 01       PSHS  CC\r","A0BB: 1A 50       ORCC  #$50\r","A0BD: DD C2       STD   $C2\t* values to send\r","A0BF: C6 90       LDB   #$90\t* MIDI note on\r","A0C1: 20 5F       BRA   $A122\t* MIDI send three byte message\r","\r","A0C3: 8D DE       BSR   $A0A3\r","\r","* send MIDI note off\r","A0C5: 34 01       PSHS  CC\r","A0C7: 1A 50       ORCC  #$50\r","A0C9: DD C2       STD   $C2\t* values to send\r","A0CB: C6 80       LDB   #$80\t* note off\r","A0CD: 20 53       BRA   $A122\t* MIDI send three byte message\r","\r","* set up to send pitchbend message?\r","A0CF: 34 01       PSHS  CC\r","A0D1: 1A 50       ORCC  #$50\r","A0D3: 4F          CLRA  \r","A0D4: DD C2       STD   $C2\t* some variable\r","A0D6: C6 E0       LDB   #$E0\t* MIDI pitchbend\r","A0D8: 20 12       BRA   $A0EC\r","\r","* send MIDI sustain message\r","A0DA: 34 01       PSHS  CC\t* save state\r","A0DC: 1A 50       ORCC  #$50\t* mask interrupts\r","A0DE: 86 40       LDA   #$40\t* CC sustain\r","A0E0: 20 06       BRA   $A0E8\t* skip\r","\r","* send MIDI modwheel message\r","A0E2: 34 01       PSHS  CC\t* save state\r","A0E4: 1A 50       ORCC  #$50\t* mask interrupts\r","A0E6: 86 01       LDA   #$01\t* CC Mod Wheel\r","A0E8: DD C2       STD   $C2\t* message to send\r","A0EA: C6 B0       LDB   #$B0\t* MIDI control change\r","A0EC: 96 23       LDA   $23\t* Param84, message filter\r","A0EE: 27 44       BEQ   $A134\t* zero? jump\r","A0F0: 20 30       BRA   $A122\t* send three byte message\r","\r","* send program change?\r","* OS 3.2 param 84\r","* 0 = only keys\r","* 1 = keys + ctrl\r","* 2 = keys + ctrl + pc\r","* 3 = keys + ctrl + pc with confirm\r","\r","A0F2: 1A 50       ORCC  #$50\t* mask interrupts\r","A0F4: 96 23       LDA   $23\t* Param84 message filter\r","A0F6: 81 02       CMPA  #$02\t* 2?\r","A0F8: 27 04       BEQ   $A0FE\t* yes, skip\r","A0FA: 81 03       CMPA  #$03\t* 3?\r","A0FC: 26 0E       BNE   $A10C\t* no, skip\r","A0FE: 34 04       PSHS  B\t* save B\r","A100: C6 C0       LDB   #$C0\t* MIDI program change?\r","A102: D7 BB       STB   $BB\t* MIDI status byte\r","A104: DA 21       ORB   $21\t* MIDI channel\r","A106: 8D 30       BSR   $A138\t* call MIDI TX\r","A108: 35 04       PULS  B\t* get B\r","A10A: 8D 2C       BSR   $A138\t* call\r","A10C: 1C AF       ANDCC #$AF\t* unmask ints\r","A10E: DC BC       LDD   $BC\t* TX ringbuffer store pointer\r","A110: 10 93 BE    CMPD  $BE\t* some variable? TX read pointer\r","A113: 26 F9       BNE   $A10E\t* not the same, hang around until all sent\r","A115: 39          RTS   \r","\r","* unknown-ish\r","* seems to transmit MIDI clock?\r","A116: 34 01       PSHS  CC\t* save state\r","A118: 1A 50       ORCC  #$50\t* mask interrupts\r","A11A: C6 F8       LDB   #$F8\t* MIDI clock!\r","A11C: D7 BB       STB   $BB\t* MIDI status byte\r","A11E: 8D 18       BSR   $A138\t* puts B in ringbuffer\r","A120: 35 81       PULS  CC,PC ;(PUL? PC=RTS)\r","\r","* MIDI construct three byte message \r","* does running status?\r","* B contains status\r","A122: DA 21       ORB   $21\t* MIDI channel\r","A124: D1 BB       CMPB  $BB\t* MIDI status byte\r","A126: 27 04       BEQ   $A12C\t* same?\r","A128: D7 BB       STB   $BB\t* no, update\r","A12A: 8D 0C       BSR   $A138\t* put status byte in buffer\r","A12C: D6 C2       LDB   $C2\t* first value to send\r","A12E: 8D 08       BSR   $A138\t* put first value in buffer\r","A130: D6 C3       LDB   $C3\t* second value to send\r","A132: 8D 04       BSR   $A138\t* put value in buffer\r","A134: DC C2       LDD   $C2\t* put message values back in D\r","A136: 35 81       PULS  CC,PC ;(PUL? PC=RTS)\r","\r","* put byte in TX buffer if not using MIDI through\r","A138: 96 22       LDA   $22\t* MIDI Through\r","A13A: 27 01       BEQ   $A13D\t* off? Skip ahead\r","A13C: 39          RTS   \t* MIDI Through on, return\r","\r","* put B in ringbuffer and enable TX interrupt\r","A13D: 9E BC       LDX   $BC\t* ring buffer store pointer\r","A13F: E7 80       STB   ,X+\t* (X++)=B\r","A141: 8C 82 35    CMPX  #$8235\t* end of buffer?\r","A144: 25 03       BCS   $A149\t* nope\r","A146: 8E 82 25    LDX   #$8225\t* yes, reset\r","A149: 9F BC       STX   $BC\t* ring buffer store pointer\r","A14B: 86 B5       LDA   #$B5\t* TX and RX int on, 8n1, /16\r","A14D: B7 E1 00    STA   $E100\t* ACIA control\r","A150: 39          RTS   \r","\r","firqentry:\r","A151: 34 76       PSHS  U,Y,X,B,A\r","A153: B6 E1 00    LDA   $E100\t\t; status register\r","A156: 2A 51       BPL   $A1A9\t\t; bit 7 low if no interrupt\r","A158: 85 30       BITA  #$30\t\t; framing error or overrun?\r","A15A: 27 1D       BEQ   $A179\t\t; no, branch\r","A15C: B6 82 37    LDA   $8237\t* some variable\tused in FIRQ ISR\r","A15F: 27 02       BEQ   $A163\t* 0? don't store?\r","A161: 97 CE       STA   $CE\t* ACIA status byte?\r","; jumped to from routine that puts byte in buffer\r","A163: BD A0 94    JSR   $A094\t\t; clears buffer pointers?\r","A166: B6 E1 01    LDA   $E101\t\t; get byte\r","A169: 8E 80 76    LDX   #$8076\t\t\r","A16C: 6F 03       CLR   $0003,X\r","A16E: BD 87 DD    JSR   $87DD\r","A171: 8E 80 76    LDX   #$8076\r","A174: BD 87 E2    JSR   $87E2\r","A177: 20 30       BRA   $A1A9\t\t; jump to end\r","\r","A179: 85 01       BITA  #$01\t\t; receive data?\r","A17B: 27 28       BEQ   $A1A5\t\t; no, branch\r","A17D: 8D 5C       BSR   $A1DB\t\t; get byte into buffer\r","A17F: 1A 40       ORCC  #$40\t\t; mask fir\r","A181: B6 82 36    LDA   $8236\t\t* RX buffer read pointer\r","A184: B1 82 35    CMPA  $8235\t\t* RX buffer save pointer\r","A187: 27 0F       BEQ   $A198\t\t; same? empty?\r","A189: 8E 82 38    LDX   #$8238\t\t; start of buffer\r","A18C: E6 86       LDB   A,X\t\t; get byte at pointer\r","A18E: 4C          INCA  \t\t; bump pointer\r","A18F: 84 3F       ANDA  #$3F\t\t; wrap\r","A191: B7 82 36    STA   $8236\t\t; save in RX buffer read pointer\r","A194: 8D 6F       BSR   $A205\t\t\r","A196: 20 E7       BRA   $A17F\t\t; loop\r","\r","A198: 7F 82 37    CLR   $8237\t* some variable used in FIRQ ISR\t\t\r","A19B: 96 CE       LDA   $CE\t* ACIA status byte?\r","A19D: 27 04       BEQ   $A1A3\r","A19F: 0F CE       CLR   $CE\t* ACIA status byte?\r","A1A1: 20 C0       BRA   $A163\r","\r","A1A3: 20 04       BRA   $A1A9\t\t; jump to end\r","\r","A1A5: 85 02       BITA  #$02\t\t; okay, transmit buffer empty then?\r","A1A7: 26 0D       BNE   $A1B6\t\t; yes, branch\r","A1A9: 35 76       PULS  A,B,X,Y,U\t; unstack registers\r","A1AB: 3B          RTI   \t\t; return\r","\r","* might be something to do with the task scheduler?\r","* pops address off return stack\r","* stores it in $80c0\r","* returns to the call before last\r","A1AC: 35 06       PULS  A,B\r","A1AE: DD C0       STD   $C0\t* save return address\r","A1B0: 39          RTS   \r","\r","A1B1: 35 06       PULS  A,B\r","A1B3: DD C6       STD   $C6\r","A1B5: 39          RTS   \r","\r",";; handle transmit interrupt\r","A1B6: AD 9F 80 C6 JSR   [$80C6,X]\t; what does X point to here?\r","A1BA: 20 ED       BRA   $A1A9\t\t; finish\r","\r","A1BC: 9E BE       LDX   $BE\t\t; ring buffer read pointer\r","A1BE: A6 80       LDA   ,X+\t\t; get byte from buffer\r","A1C0: B7 E1 01    STA   $E101\t\t; transmit\r","A1C3: 8C 82 35    CMPX  #$8235\t\t; compare with some value, possibly top of buffer?\r","A1C6: 25 03       BCS   $A1CB\t\t; it's fine\r","A1C8: 8E 82 25    LDX   #$8225\t\t; tx buffer?\r","A1CB: 9C BC       CPX   $BC\t\t; ring buffer TX pointer\r","A1CD: 26 09       BNE   $A1D8\r","A1CF: 96 22       LDA   $22\t* MIDI Through setting\r","A1D1: 26 00       BNE   $A1D3\t* on?\r","A1D3: C6 95       LDB   #$95\t\t; control word, enable rx int, rts low, tx int disabled, 8n1, /16\r","A1D5: F7 E1 00    STB   $E100\t\t; set control byte\r","A1D8: 9F BE       STX   $BE\r","A1DA: 39          RTS   \r","\r","; put byte in buffer\r","A1DB: F6 E1 01    LDB   $E101\t; get byte in B\r","A1DE: B6 82 37    LDA   $8237\t* some variable used in FIRQ ISR\r","A1E1: 27 1F       BEQ   $A202\t; zero?\r","A1E3: B6 82 35    LDA   $8235\t; get buffer pointer\r","A1E6: 8E 82 38    LDX   #$8238\t; address of buffer\r","A1E9: E7 86       STB   A,X\t; store byte in buffer\r","A1EB: 4C          INCA  \t; increment ptr\r","A1EC: 84 3F       ANDA  #$3F\t; wrapped?\r","A1EE: B7 82 35    STA   $8235\t; save pointer\r","A1F1: B1 82 36    CMPA  $8236\t; compare with some variable, read pointer?\r","A1F4: 26 05       BNE   $A1FB\t; \r","A1F6: 32 62       LEAS  $0002,S\r","A1F8: 7E A1 63    JMP   $A163\r","\r","A1FB: 32 62       LEAS  $0002,S\r","A1FD: 35 76       PULS  A,B,X,Y,U\r","A1FF: 3B          RTI   \r","\r","* handle incoming MIDI without incrementing $8237\r","A200: 20 03       BRA   $A205\r","\r","* handle incoming MIDI\r","A202: 7C 82 37    INC   $8237\t* some variable used in FIRQ ISR\r","A205: 96 22       LDA   $22\t* MIDI Through setting\r","A207: 27 03       BEQ   $A20C\t* off?\r","A209: BD A1 3D    JSR   $A13D\t* send byte\r","A20C: 1C BF       ANDCC #$BF\r","A20E: 5D          TSTB  \r","A20F: 2B 04       BMI   $A215\t* was B a status byte?\r","A211: 6E 9F 80 C0 JMP   [$80C0,X]\t* parse\r","\r","A215: D7 C5       STB   $C5\t* save status byte\r","A217: C4 70       ANDB  #$70\t* mask off everything except actual value\r","A219: C1 70       CMPB  #$70\t* $70 would match $f0-$ff, sysex/common\r","A21B: 27 20       BEQ   $A23D\t* sysex or syscommon byte\r","A21D: D6 C5       LDB   $C5\t* get status \r","A21F: C4 0F       ANDB  #$0F\t* mask channel\r","A221: D7 C4       STB   $C4\t* save channel\r","A223: 96 20       LDA   $20\t* omni?\r","A225: 26 07       BNE   $A22E\t* yes\r","A227: D1 21       CMPB  $21\t* omni off but matches channel?\r","A229: 27 03       BEQ   $A22E\t* yes\r","A22B: 7E A2 47    JMP   $A247\t* no, end\r","\r","A22E: D6 C5       LDB   $C5\t* get channel mode MIDI status\r","A230: C4 70       ANDB  #$70\t* get \"type\"\r","A232: 57          ASRB\r","A233: 57          ASRB \r","A234: 57          ASRB \t\t* divide by 8 giving multiple of 2\r","A235: 8E A3 D4    LDX   #$A3D4\t* pointer to parse routines\r","* table runs\r","* a24b, a268, a36b, a2a3, a395, a34a, a2f8, a24a\r","* last value jumps to rts and is probably never called\r","A238: EC 85       LDD   B,X\t* get the offset\r","A23A: DD C0       STD   $C0\t* save in MIDI task variable\r","A23C: 39          RTS   \r","\r","A23D: D6 C5       LDB   $C5\t* get sysex/syscommon MIDI status\r","A23F: C4 0F       ANDB  #$0F\t* get byte\r","A241: 8E A3 E4    LDX   #$A3E4\t* pointer to routines\r","* table runs\r","* a247, a247, a247, a247, a247, a247, a247, a247\r","* a3b0, a247, a3be, a3c6, a3c2, a247, a3d3, a3d3\r","A244: 58          ASLB  \t* multiply by 2\r","A245: 6E 95       JMP   [B,X]\t* jump to routine\r","\r","* \"nop\"\r","* used for sysex, quarterframe, spp, select, tune, end of sysex and two \"undefined\" messages\r","A247: BD A1 AC    JSR   $A1AC\r","A24A: 39          RTS   \r","\r","* handle incoming MIDI note off\r","A24B: 8D 43       BSR   $A290\t* make sure value is in range\r","A24D: BD A1 AC    JSR   $A1AC\t* call funny routine, does this get byte\r","A250: CE A2 4B    LDU   #$A24B\t* point to this routine, again?\r","A253: DF C0       STU   $C0\t* save pointer\r","A255: C1 00       CMPB  #$00\t* 0?\r","A257: 26 02       BNE   $A25B\t* no\r","A259: C6 40       LDB   #$40\t* B now holds 64\r","A25B: 96 C4       LDA   $C4\t* A holds computed note\r","A25D: BD AD BC    JSR   $ADBC\t* put note off in sequencer\r","A260: 96 C4       LDA   $C4\t* computed note\r","A262: 8E 80 76    LDX   #$8076\t* table\r","A265: 7E 87 BF    JMP   $87BF\t* call\r","\r","* handle incoming MIDI note on\r","A268: 8D 26       BSR   $A290\t* make sure note value is in range\r","A26A: BD A1 AC    JSR   $A1AC\t* get byte?\r","A26D: CE A2 68    LDU   #$A268\t* point to this routine\r","A270: DF C0       STU   $C0\t* save pointer\r","A272: 96 C4       LDA   $C4\t* A holds computed note\r","A274: C1 00       CMPB  #$00\t* check B\r","A276: 26 0D       BNE   $A285\t* not 0\r","A278: C6 40       LDB   #$40\t* if B was 0, B is now 64\r","A27A: BD AD BC    JSR   $ADBC\t* put note off in sequencer\r","A27D: 96 C4       LDA   $C4\t* computed note\r","A27F: 8E 80 76    LDX   #$8076\t* table\r","A282: 7E 87 BF    JMP   $87BF\t* call\r","\r","A285: BD AD BA    JSR   $ADBA\t* put note on in sequencer\r","A288: 96 C4       LDA   $C4\t* get computed note\r","A28A: 8E 80 76    LDX   #$8076\t* table\r","A28D: 7E 87 C4    JMP   $87C4\t* call\r","\r","* check MIDI note number\r","A290: C1 24       CMPB  #$24\t* lower than 36, C2?\r","A292: 24 04       BCC   $A298\t* no\r","A294: CB 0C       ADDB  #$0C\t* yes, add an octave\r","A296: 20 F8       BRA   $A290\t* check it again\r","\r","A298: C1 60       CMPB  #$60\t* higher than C7?\r","A29A: 23 04       BLS   $A2A0\t* no\r","A29C: C0 0C       SUBB  #$0C\t* yes, subtract an octave\r","A29E: 20 F8       BRA   $A298\t* check it again\r","\r","A2A0: D7 C4       STB   $C4\t* save computed note value\r","A2A2: 39          RTS   \r","\r","* handle incoming MIDI control change\r","A2A3: C1 40       CMPB  #$40\t* sustain on/off\r","A2A5: 26 06       BNE   $A2AD\r","A2A7: CC A3 2B    LDD   #$A32B\t* unknown, store sustain?\r","A2AA: DD C0       STD   $C0\r","A2AC: 39          RTS   \r","\r","A2AD: C1 60       CMPB  #$60\t* data increment?\r","A2AF: 26 11       BNE   $A2C2\r","A2B1: 96 CD       LDA   $CD\r","A2B3: 81 80       CMPA  #$80\r","A2B5: 25 0B       BCS   $A2C2\r","A2B7: BD A4 04    JSR   $A404\t* put A in keystroke ringbuffer\r","A2BA: 0F CD       CLR   $CD\r","A2BC: BD A1 AC    JSR   $A1AC\r","A2BF: 7E A3 41    JMP   $A341\t* thing that sets pointer to MIDI CC\r","\r","A2C2: D1 1D       CMPB  $1D\t* LFO mod source\r","A2C4: 27 04       BEQ   $A2CA\r","A2C6: D1 1E       CMPB  $1E\t* mix mod source\r","A2C8: 26 08       BNE   $A2D2\r","A2CA: D7 C4       STB   $C4\t* store\r","A2CC: CC A3 0D    LDD   #$A30D\t* store received mod value\r","A2CF: DD C0       STD   $C0\t* some return address trick\r","A2D1: 39          RTS   \r","\r","A2D2: CE A3 41    LDU   #$A341\t* pointer to thing that sets pointer to CC\r","A2D5: DF C0       STU   $C0\r","A2D7: 96 21       LDA   $21\t* midi channel\r","A2D9: 91 C4       CMPA  $C4\t* same channel?\r","A2DB: 26 10       BNE   $A2ED\t* no, skip\r","A2DD: C1 7C       CMPB  #$7C\t* omni off\r","A2DF: 26 04       BNE   $A2E5\t* no\r","A2E1: 0F 20       CLR   $20\t* turn off omni\r","A2E3: 20 0C       BRA   $A2F1\t* end\r","\r","A2E5: C1 7D       CMPB  #$7D\t* omni on\r","A2E7: 26 04       BNE   $A2ED\t* no\r","A2E9: D7 20       STB   $20\t* turn on omni\r","A2EB: 20 04       BRA   $A2F1\t* end\r","\r","A2ED: C1 7B       CMPB  #$7B\t* all notes off\r","A2EF: 26 06       BNE   $A2F7\t* no\r","A2F1: 8E 80 76    LDX   #$8076\t* table\r","A2F4: 7E 87 E2    JMP   $87E2\t* call\r","\r","A2F7: 39          RTS   \r","\r","* handle incoming MIDI pitch bend\r","A2F8: BD A1 AC    JSR   $A1AC\r","A2FB: CE A2 F8    LDU   #$A2F8\r","A2FE: DF C0       STU   $C0\r","A300: 96 23       LDA   $23\t* MIDI message filter\r","A302: 27 08       BEQ   $A30C\t* 0? rts\r","A304: BD AD AF    JSR   $ADAF\t* ring buffer, A=0\r","A307: BD 90 C0    JSR   $90C0\t* calculate pitch bend amount\r","A30A: DD 77       STD   $77\r","A30C: 39          RTS   \r","\r","* if MIDI continuous controllers are enabled,\r","* store mod amount in either mix or lfo mod, depending\r","A30D: 8D 32       BSR   $A341\t* thing that sets pointer to MIDI CC\r","A30F: 96 23       LDA   $23\t* MIDI message filter\r","A311: 27 17       BEQ   $A32A\t* 0? rts\r","A313: 96 C4       LDA   $C4\t* some variable\r","A315: 27 13       BEQ   $A32A\t* 0? rts\r","A317: 81 08       CMPA  #$08\r","A319: 24 0F       BCC   $A32A\t* >=8, rts\r","A31B: 91 1E       CMPA  $1E\t* mix mod source\r","A31D: 26 02       BNE   $A321\t* no, skip\r","A31F: D7 76       STB   $76\t* received mixmod amt?\r","A321: 91 1D       CMPA  $1D\t* LFO mod source\r","A323: 26 05       BNE   $A32A\t* no, rts\r","A325: D7 7A       STB   $7A\t* received lfomod amt?\r","A327: BD AD B2    JSR   $ADB2\t* call $adbc with A=1\r","A32A: 39          RTS   \r","\r","* unknown\r","A32B: 8D 14       BSR   $A341\t* thing that sets pointer to MIDI CC\r","A32D: 96 23       LDA   $23\t* MIDI message filter\r","A32F: 27 0F       BEQ   $A340\t* 0? rts\r","A331: BD AD B6    JSR   $ADB6\t* call\r","A334: C4 40       ANDB  #$40\t* \r","A336: D7 79       STB   $79\t* some variable\r","A338: 26 06       BNE   $A340\t* 0, rts\r","A33A: 8E 80 76    LDX   #$8076\t* \r","A33D: BD 87 DD    JSR   $87DD\r","A340: 39          RTS   \r","\r","A341: CE A2 A3    LDU   #$A2A3\t* pointer to MIDI control change routine\r","A344: DF C0       STU   $C0\t* fiddle return address\r","A346: 39          RTS   \r","\r","A347: BD A1 AC    JSR   $A1AC\r","\r","* handle incoming MIDI channel pressure\r","A34A: 96 23       LDA   $23\t* MIDI message filter\r","A34C: 10 27 FE F7 LBEQ  $A247\r","A350: 58          ASLB  \r","A351: 96 1F       LDA   $1F\t* aftertouch level\r","A353: 3D          MUL   \r","A354: 1F 89       TFR   A,B\r","A356: 96 1D       LDA   $1D\t* LFO mod source\r","A358: 81 08       CMPA  #$08\t* aftertouch?\r","A35A: 26 02       BNE   $A35E\t* no, skip\r","A35C: D7 7A       STB   $7A\t* LFO mod amount\r","A35E: 96 1E       LDA   $1E\t* mix mod source\r","A360: 81 08       CMPA  #$08\t* aftertouch?\r","A362: 26 02       BNE   $A366\t* no, skip\r","A364: D7 76       STB   $76\t* mix mod amount\r","A366: 20 DF       BRA   $A347\t* why branch, why not fall through?\r","\r","A368: BD A1 AC    JSR   $A1AC\r","\r","* handle poly pressure?\r","A36B: 96 23       LDA   $23\r","A36D: 10 27 FE D6 LBEQ  $A247\r","A371: D7 C4       STB   $C4\r","A373: BD A1 AC    JSR   $A1AC\r","A376: 58          ASLB  \r","A377: 96 1F       LDA   $1F\r","A379: 3D          MUL   \r","A37A: 1F 89       TFR   A,B\r","A37C: 96 1D       LDA   $1D\r","A37E: 81 09       CMPA  #$09\r","A380: 27 06       BEQ   $A388\r","A382: 96 1E       LDA   $1E\r","A384: 81 09       CMPA  #$09\r","A386: 26 08       BNE   $A390\r","A388: 96 C4       LDA   $C4\r","A38A: 8E 80 76    LDX   #$8076\r","A38D: BD 87 D8    JSR   $87D8\r","A390: 20 D6       BRA   $A368\r","\r","A392: BD A1 AC    JSR   $A1AC\r","\r","* handle incoming MIDI program change\r","A395: C1 2F       CMPB  #$2F\r","A397: 22 F9       BHI   $A392\r","A399: CA 80       ORB   #$80\r","A39B: 96 23       LDA   $23\r","A39D: 81 02       CMPA  #$02\r","A39F: 26 07       BNE   $A3A8\r","A3A1: 1F 98       TFR   B,A\r","A3A3: BD A4 04    JSR   $A404\t* put A in keystroke ringbuffer\r","A3A6: 20 06       BRA   $A3AE\r","\r","A3A8: 81 03       CMPA  #$03\r","A3AA: 26 02       BNE   $A3AE\r","A3AC: D7 CD       STB   $CD\r","A3AE: 20 E2       BRA   $A392\r","\r","* handle incoming MIDI sequencer clock\r","A3B0: 96 25       LDA   $25\t* ext seq clock jack\r","A3B2: 26 09       BNE   $A3BD\t* nonzero, rts\r","A3B4: 96 24       LDA   $24\t* ext seq clock\r","A3B6: 27 05       BEQ   $A3BD\t* zero, rts\r","A3B8: 0C E9       INC   $E9\t* some variable, MIDI clocks?\r","A3BA: BD A1 16    JSR   $A116\t* send MIDI clock\r","A3BD: 39          RTS   \r","\r","* handle incoming MIDI realtime start\r","A3BE: 86 1C       LDA   #$1C\t* fake keypress\r","A3C0: 20 06       BRA   $A3C8\r","\r","* handle incoming MIDI stop\r","A3C2: 86 1E       LDA   #$1E\t* fake keypress\r","A3C4: 20 02       BRA   $A3C8\r","\r","* handle incoming MIDI realtime continue\r","A3C6: 86 1D       LDA   #$1D\t* fake keypress\r","A3C8: D6 24       LDB   $24\t* ext sequencer clock\r","A3CA: 27 07       BEQ   $A3D3\t* off, skip\r","A3CC: D6 25       LDB   $25\t* ext seq clock jack\r","A3CE: 26 03       BNE   $A3D3\t* on, skip\r","A3D0: BD A4 04    JSR   $A404\t* put A in keystroke ringbuffer\r","A3D3: 39          RTS   \r","\r","A3D4: A2 4B A2 68 A3 6B A2 A3 A3 95 A3 4A \r","\r","A3E0: A2 F8 A2 4A A2 47 A2 47 A2 47 A2 47 A2 47 A2 47 \r","A3F0: A2 47 A2 47 A3 B0 A2 47 A3 BE A3 C6 A3 C2 A2 47 \r","A400: A3 D3 A3 D3 \r","\r","* keystroke ring buffer\r","* ring buffer, stores A in memory pointed to by $8278\r","A404: 34 01       PSHS  CC\t* save state\r","A406: 1A 10       ORCC  #$10\t* mask /INT\r","A408: BE 82 78    LDX   $8278\t* pointer\r","A40B: A7 80       STA   ,X+\t* store byte\r","A40D: 8C 82 8C    CMPX  #$828C\t* reached end?\r","A410: 25 03       BCS   $A415\t* no\r","A412: 8E 82 7C    LDX   #$827C\t* wrap around\r","A415: BF 82 78    STX   $8278\t* save pointer back\r","A418: 35 81       PULS  CC,PC ;(PUL? PC=RTS)\t* return\r","\r","* get byte from keystroke ring buffer \r","* returns with carry set if there's a byte or clear if not\r","A41A: BE 82 7A    LDX   $827A\t* read pointer\r","A41D: BC 82 78    CPX   $8278\t* write pointer\r","A420: 26 03       BNE   $A425\t* not the same, read\r","A422: 1C FE       ANDCC #$FE\t* clear carry\r","A424: 39          RTS\r","\r","A425: A6 80       LDA   ,X+\t* fetch byte in A\r","A427: 8C 82 8C    CMPX  #$828C\t* end of buffer?\r","A42A: 25 03       BCS   $A42F\t* no\r","A42C: 8E 82 7C    LDX   #$827C\t* yes, reset\r","A42F: BF 82 7A    STX   $827A\t* save\r","A432: 1A 01       ORCC  #$01\t* set carry\r","A434: 39          RTS   \r","\r","* deal with disk commands\r","* check disk\r","A435: BD A4 BA    JSR   $A4BA\r","A438: B6 80 07    LDA   fdcerr\r","A43B: 81 00       CMPA  #$00\r","A43D: 27 03       BEQ   $A442\t* okay?\r","A43F: 16 00 64    LBRA  $A4A6\r","\r","A442: B6 80 CF    LDA   vbanktoload\r","A445: 81 01       CMPA  #$01\r","A447: 26 05       BNE   $A44E\r","A449: BD A4 D4    JSR   $A4D4\t* load samples\r","A44C: 20 58       BRA   $A4A6\r","\r","A44E: 81 02       CMPA  #$02\r","A450: 26 05       BNE   $A457\r","A452: BD A4 D4    JSR   $A4D4\t* load samples\r","A455: 20 4F       BRA   $A4A6\r","\r","A457: 81 03       CMPA  #$03\r","A459: 26 05       BNE   $A460\r","A45B: BD A4 D4    JSR   $A4D4\t* load samples\r","A45E: 20 46       BRA   $A4A6\r","\r","A460: 81 04       CMPA  #$04\r","A462: 26 05       BNE   $A469\r","A464: BD A5 3A    JSR   $A53A\t* save samples\t\r","A467: 20 3D       BRA   $A4A6\r","\r","A469: 81 05       CMPA  #$05\r","A46B: 26 05       BNE   $A472\r","A46D: BD A5 3A    JSR   $A53A\t* save samples\r","A470: 20 34       BRA   $A4A6\r","\r","A472: 81 06       CMPA  #$06\r","A474: 26 05       BNE   $A47B\r","A476: BD A5 3A    JSR   $A53A\t* save samples\r","A479: 20 2B       BRA   $A4A6\r","\r","A47B: 81 07       CMPA  #$07\r","A47D: 26 05       BNE   $A484\r","A47F: BD A5 A1    JSR   $A5A1\t* sequence\r","A482: 20 22       BRA   $A4A6\r","\r","A484: 81 08       CMPA  #$08\r","A486: 26 05       BNE   $A48D\r","A488: BD A5 FC    JSR   $A5FC\t* sequence\r","A48B: 20 19       BRA   $A4A6\r","\r","A48D: 81 09       CMPA  #$09\r","A48F: 26 05       BNE   $A496\r","A491: BD A5 A1    JSR   $A5A1\t* sequence\r","A494: 20 10       BRA   $A4A6\r","\r","A496: 81 0A       CMPA  #$0A\r","A498: 26 05       BNE   $A49F\r","A49A: BD A5 FC    JSR   $A5FC\t* sequence\r","A49D: 20 07       BRA   $A4A6\r","\r","A49F: 81 0B       CMPA  #$0B\r","A4A1: 26 03       BNE   $A4A6\r","A4A3: BD A6 53    JSR   $A653\t* save OS parameters\r","A4A6: B6 E8 01    LDA   $E801\t* track register\r","A4A9: B7 80 02    STA   fdctrk\t* save track\r","A4AC: B6 80 07    LDA   fdcerr\t* error?\r","A4AF: 81 00       CMPA  #$00\r","A4B1: 26 04       BNE   $A4B7\t* yes\r","A4B3: 1C FE       ANDCC #$FE\t* carry clear\r","A4B5: 20 02       BRA   $A4B9\t* return\r","\r","A4B7: 1A 01       ORCC  #$01\t* carry set\r","A4B9: 39          RTS   \r","\r","* fiddles with some variables\r","* then forces an FDC interrupt and sets the track\r","* think this turns $80d0 = bank number\r","* into $80d1 = offset in table\r","A4BA: B7 80 CF    STA   vbanktoload\r","A4BD: F7 80 D0    STB   $80D0 \r","A4C0: BD AB 20    JSR   $AB20 *\tcalculate offset in table\r","A4C3: 7F 80 07    CLR   fdcerr\r","A4C6: 86 E8       LDA   #$E8\r","A4C8: 1F 8B       TFR   A,DP\r","A4CA: BD F0 8F    JSR   fdcforceinterrupt\r","A4CD: B6 80 02    LDA   fdctrk\r","A4D0: B7 E8 01    STA   $E801\r","A4D3: 39          RTS   \r","\r","* load samples?\r","A4D4: BD F4 C6    JSR   enablefd\r","A4D7: 86 40       LDA   #$40\t\r","A4D9: B4 E2 00    ANDA  $E200\t* wait for /RDY\r","A4DC: 81 00       CMPA  #$00\r","A4DE: 26 08       BNE   $A4E8\t* okay?\r","A4E0: 86 07       LDA   #$07\t* no\r","A4E2: B7 80 07    STA   fdcerr\r","A4E5: 16 00 4E    LBRA  $A536\r","\r","A4E8: BD A8 B9    JSR   $A8B9\r","A4EB: B6 80 07    LDA   fdcerr\r","A4EE: 81 00       CMPA  #$00\r","A4F0: 27 03       BEQ   $A4F5\r","A4F2: 16 00 41    LBRA  $A536\r","\r","* load upper or lower samples\r","A4F5: 7F 80 E1    CLR   $80E1\t* load\r","A4F8: 7F 80 E3    CLR   $80E3\t* some variable\r","A4FB: B6 80 CF    LDA   vbanktoload\t* bank to load\r","A4FE: 81 01       CMPA  #$01\t* is it 1?\r","A500: 27 07       BEQ   $A509\t* yes, continue\r","A502: B6 80 CF    LDA   vbanktoload\t* bank to load\r","A505: 81 03       CMPA  #$03\t\r","A507: 26 14       BNE   $A51D\t* not 3, continue\r","A509: B6 E2 00    LDA   $E200\t* VIA IORB\r","A50C: 84 FC       ANDA  #$FC\t* Bank select lower/0\r","A50E: B7 E2 00    STA   $E200\t* write VIA IORB\r","A511: BD A6 9C    JSR   $A69C\t* load lower sounds\r","A514: B6 80 06    LDA   fdcstat\r","A517: 81 00       CMPA  #$00\r","A519: 27 02       BEQ   $A51D\t* okay?\r","A51B: 20 19       BRA   $A536\t* no, stop floppy\r","\r","A51D: B6 80 CF    LDA   vbanktoload\t* bank to load\r","A520: 81 02       CMPA  #$02\r","A522: 27 07       BEQ   $A52B\t* is it 2?\r","A524: B6 80 CF    LDA   vbanktoload\t* bank to load\r","A527: 81 03       CMPA  #$03\t* is it 3?\r","A529: 26 0B       BNE   $A536\t* no, end\r","A52B: B6 E2 00    LDA   $E200 \t* VIA IORB\r","A52E: 84 FC       ANDA  #$FC\t* Bank Select 0\r","A530: B7 E2 00    STA   $E200\t* write VIA IORB\r","A533: BD A6 E8    JSR   $A6E8\t* load upper\r","A536: BD F4 D6    JSR   disablefd\r","A539: 39          RTS   \r","\r","* save sample?\r","A53A: BD F4 C6    JSR   enablefd\r","A53D: 86 40       LDA   #$40\r","A53F: B4 E2 00    ANDA  $E200\t* wait for /RDY\r","A542: 81 00       CMPA  #$00\r","A544: 26 08       BNE   $A54E\r","A546: 86 07       LDA   #$07\r","A548: B7 80 07    STA   fdcerr\r","A54B: 16 00 4F    LBRA  $A59D\t* stop floppy, return\r","\r","A54E: 86 02       LDA   #$02\r","A550: B7 80 E1    STA   $80E1\t* set save flag\r","A553: 7F 80 E3    CLR   $80E3\t* clear this one\r","A556: B6 80 CF    LDA   vbanktoload\t* bank to save really\r","A559: 81 04       CMPA  #$04\r","A55B: 27 07       BEQ   $A564\r","A55D: B6 80 CF    LDA   vbanktoload\r","A560: 81 06       CMPA  #$06\r","A562: 26 14       BNE   $A578\r","A564: B6 E2 00    LDA   $E200\t* zero bank select\r","A567: 84 FC       ANDA  #$FC\r","A569: B7 E2 00    STA   $E200\r","A56C: BD A6 9C    JSR   $A69C\t* load/save sound\r","A56F: B6 80 06    LDA   fdcstat\r","A572: 81 00       CMPA  #$00\r","A574: 27 02       BEQ   $A578\r","A576: 20 25       BRA   $A59D\t* stop floppy, return\r","\r","A578: B6 80 CF    LDA   vbanktoload\t* bank to load\r","A57B: 81 05       CMPA  #$05\r","A57D: 27 07       BEQ   $A586\r","A57F: B6 80 CF    LDA   vbanktoload\t* bank to load\r","A582: 81 06       CMPA  #$06\r","A584: 26 14       BNE   $A59A\r","A586: B6 E2 00    LDA   $E200\t* zero bank select\r","A589: 84 FC       ANDA  #$FC\r","A58B: B7 E2 00    STA   $E200\r","A58E: BD A6 E8    JSR   $A6E8\t* save upper\r","A591: B6 80 06    LDA   fdcstat\r","A594: 81 00       CMPA  #$00\r","A596: 27 02       BEQ   $A59A\r","A598: 20 03       BRA   $A59D\t* stop floppy, return\r","\r","A59A: BD A9 7C    JSR   $A97C\r","A59D: BD F4 D6    JSR   disablefd\r","A5A0: 39          RTS   \r","\r","* /load/save sequence?\r","A5A1: BD F4 C6    JSR   enablefd\r","A5A4: 86 40       LDA   #$40\r","A5A6: B4 E2 00    ANDA  $E200\t* wait for /RDY\r","A5A9: 81 00       CMPA  #$00\r","A5AB: 26 08       BNE   $A5B5\r","A5AD: 86 07       LDA   #$07\r","A5AF: B7 80 07    STA   fdcerr\r","A5B2: 16 00 43    LBRA  $A5F8\r","\r","A5B5: BD A8 B9    JSR   $A8B9\r","A5B8: B6 80 07    LDA   fdcerr\r","A5BB: 81 00       CMPA  #$00\r","A5BD: 27 02       BEQ   $A5C1\r","A5BF: 20 37       BRA   $A5F8\r","\r","A5C1: B6 80 CF    LDA   vbanktoload\t\r","A5C4: 81 07       CMPA  #$07\r","A5C6: 26 06       BNE   $A5CE\r","A5C8: 10 8E FB A8 LDY   #$FBA8\r","A5CC: 20 08       BRA   $A5D6\r","\r","A5CE: 81 09       CMPA  #$09\r","A5D0: 26 04       BNE   $A5D6\r","A5D2: 10 8E FB C8 LDY   #$FBC8\t* table for long sequences\r","A5D6: 7F 80 E3    CLR   $80E3\r","A5D9: BD AA D2    JSR   $AAD2\r","A5DC: B6 80 06    LDA   fdcstat\r","A5DF: 81 00       CMPA  #$00\r","A5E1: 27 05       BEQ   $A5E8\r","A5E3: BD AB 00    JSR   $AB00\t* show disk error\r","A5E6: 20 10       BRA   $A5F8\r","\r","A5E8: 7F 80 E1    CLR   $80E1\r","A5EB: BD A8 47    JSR   $A847\r","A5EE: B6 80 06    LDA   fdcstat\r","A5F1: 81 00       CMPA  #$00\r","A5F3: 27 03       BEQ   $A5F8\r","A5F5: BD AB 00    JSR   $AB00\t* show disk error\r","A5F8: BD F4 D6    JSR   disablefd\r","A5FB: 39          RTS   \r","\r","* write sequence?\r","A5FC: BD F4 C6    JSR   enablefd\r","A5FF: 86 40       LDA   #$40\r","A601: B4 E2 00    ANDA  $E200 * wait for /RDY\r","A604: 81 00       CMPA  #$00\r","A606: 26 08       BNE   $A610\r","A608: 86 07       LDA   #$07\r","A60A: B7 80 07    STA   fdcerr\r","A60D: 16 00 3F    LBRA  $A64F\r","\r","A610: B6 80 CF    LDA   vbanktoload \t* some variable\r","A613: 81 08       CMPA  #$08\t\r","A615: 26 06       BNE   $A61D\t* skip\r","A617: 10 8E FB A8 LDY   #$FBA8\t* pointer to short sequence\r","A61B: 20 08       BRA   $A625\r","\r","A61D: 81 0A       CMPA  #$0A\t* 10?\r","A61F: 26 04       BNE   $A625\t* no, skip\r","A621: 10 8E FB C8 LDY   #$FBC8\t* table for long sequences\r","A625: 7F 80 E3    CLR   $80E3\t* flag, what does it do?\r","A628: BD AA D2    JSR   $AAD2\t* find sector\r","A62B: B6 80 06    LDA   fdcstat\r","A62E: 81 00       CMPA  #$00\r","A630: 27 06       BEQ   $A638\t* fdc okay\r","A632: BD AB 00    JSR   $AB00\t* show disk error\r","A635: 16 00 17    LBRA  $A64F\t* lbra rts\r","\r","A638: 86 02       LDA   #$02\t* 2\r","A63A: B7 80 E1    STA   $80E1\t* another variable, load/save\r","A63D: BD A8 47    JSR   $A847\t* call load/save sequence\r","A640: B6 80 06    LDA   fdcstat\r","A643: 81 00       CMPA  #$00\r","A645: 27 05       BEQ   $A64C\t* okay?\r","A647: BD AB 00    JSR   $AB00\t* show disk error\r","A64A: 20 03       BRA   $A64F\r","\r","A64C: BD A9 7C    JSR   $A97C\t* call\r","A64F: BD F4 D6    JSR   disablefd\r","A652: 39          RTS   \r","\r","* save OS parameters\r","A653: BD F4 C6    JSR   enablefd\r","A656: 86 40       LDA   #$40\r","A658: B4 E2 00    ANDA  $E200\t* wait for /RDY\r","A65B: 81 00       CMPA  #$00\r","A65D: 26 08       BNE   $A667\t* okay, go\r","A65F: 86 07       LDA   #$07\r","A661: B7 80 07    STA   fdcerr\r","A664: 16 00 31    LBRA  $A698\t* branch to RTS\r","\r","A667: 86 02       LDA   #$02\t* 2 is obviously significant\r","A669: B7 80 E3    STA   $80E3\t* some sort of flag\r","A66C: 10 8E FB 88 LDY   #$FB88\t* system parameter list\r","A670: BD AA D2    JSR   $AAD2\t* fetch start and end track/sector\r","A673: B6 80 06    LDA   fdcstat\r","A676: 81 00       CMPA  #$00\t* zero?\r","A678: 27 05       BEQ   $A67F\t* yes, continue\r","A67A: BD AB 00    JSR   $AB00\t* show disk error\r","A67D: 20 19       BRA   $A698\t* branch to RTS\r","\r","A67F: B6 80 D6    LDA   vfirstsec\t* first sector\r","A682: B7 80 03    STA   fdcsect\t* save in OS sector\r","A685: 8E 80 11    LDX   #$8011\t* load address\r","A688: BF 80 04    STX   fdcbuff\t* save in OS load address\r","A68B: BD F4 76    JSR   writesector\r","A68E: B6 80 06    LDA   fdcstat\t* fetch FDC status\r","A691: 81 00       CMPA  #$00\t* Ok?\r","A693: 27 03       BEQ   $A698\t* skip over error\r","A695: BD AB 00    JSR   $AB00\t* show disk error\r","A698: BD F4 D6    JSR   disablefd\r","A69B: 39          RTS   \r","\r","* load/save lower sounds\r","A69C: 10 8E FB 90 LDY   #$FB90\t* lower sounds\r","A6A0: BD AA D2    JSR   $AAD2\t* look up values\r","A6A3: B6 80 06    LDA   fdcstat\r","A6A6: 81 00       CMPA  #$00\r","A6A8: 27 06       BEQ   $A6B0\t* okay?\r","A6AA: BD AB 00    JSR   $AB00\t* show disk error\r","A6AD: 16 00 37    LBRA  $A6E7\t* lbra rts\r","\r","A6B0: 7F 80 DD    CLR   $80DD\t* clear bank value?\r","A6B3: 86 02       LDA   #$02\t* 02\r","A6B5: B7 80 DE    STA   $80DE\t* some variable\r","A6B8: 7F 80 E0    CLR   $80E0\t* upper/lower sample\r","A6BB: B6 80 E1    LDA   $80E1\t* load/save\r","A6BE: 81 00       CMPA  #$00\t* is it load?\r","A6C0: 26 05       BNE   $A6C7\t* skip\r","A6C2: BD A7 36    JSR   $A736\t* call load parameter and copy\r","A6C5: 20 07       BRA   $A6CE\t* continue\r","\r","A6C7: 81 02       CMPA  #$02\t* is it 2?\r","A6C9: 26 03       BNE   $A6CE\t* no, continue\r","A6CB: BD A7 8B    JSR   $A78B\t* call save parameter\r","A6CE: B6 80 06    LDA   fdcstat\r","A6D1: 81 00       CMPA  #$00\r","A6D3: 27 05       BEQ   $A6DA\t* okay\r","A6D5: BD AB 00    JSR   $AB00\t* show disk error\r","A6D8: 20 0D       BRA   $A6E7 \t* bra rts\r","\r","A6DA: BD A7 AE    JSR   $A7AE \t* call read/write sector\r","A6DD: B6 80 06    LDA   fdcstat\r","A6E0: 81 00       CMPA  #$00\r","A6E2: 27 03       BEQ   $A6E7\t* okay?\r","A6E4: BD AB 00    JSR   $AB00 \t* show disk error\r","A6E7: 39          RTS   \r","\r","* load/save upper sounds\r","A6E8: 10 8E FB 9C LDY   #$FB9C\t* upper sounds table\r","A6EC: BD AA D2    JSR   $AAD2\t* get sector\r","A6EF: B6 80 06    LDA   fdcstat\r","A6F2: 81 00       CMPA  #$00\r","A6F4: 27 06       BEQ   $A6FC\t* okay?\r","A6F6: BD AB 00    JSR   $AB00\t* show disk error\r","A6F9: 16 00 39    LBRA  $A735\t* lbra rts\r","\r","A6FC: 86 02       LDA   #$02\t* select upper bank\r","A6FE: B7 80 DD    STA   $80DD\t* save in bank variable\r","A701: B7 80 E0    STA   $80E0\t* upper sample\r","A704: 86 04       LDA   #$04\t* 4 is?\r","A706: B7 80 DE    STA   $80DE\t* some variable\r","A709: B6 80 E1    LDA   $80E1\t* load/save?\r","A70C: 81 00       CMPA  #$00\t* load?\r","A70E: 26 05       BNE   $A715\t* skip\r","A710: BD A7 36    JSR   $A736\t* call\r","A713: 20 07       BRA   $A71C\t* continue \r","\r","A715: 81 02       CMPA  #$02\t* save?\r","A717: 26 03       BNE   $A71C\t* continue\r","A719: BD A7 8B    JSR   $A78B\t* call save param block\r","A71C: B6 80 06    LDA   fdcstat\r","A71F: 81 00       CMPA  #$00\r","A721: 27 05       BEQ   $A728\t* okay?\r","A723: BD AB 00    JSR   $AB00\t* show disk error\r","A726: 20 0D       BRA   $A735\t* bra rts\r","\r","A728: BD A7 AE    JSR   $A7AE\t* call read/write sector\r","A72B: B6 80 06    LDA   fdcstat\r","A72E: 81 00       CMPA  #$00\r","A730: 27 03       BEQ   $A735\t* okay?\r","A732: BD AB 00    JSR   $AB00\t* show disk error\r","A735: 39          RTS   \r","\r","* load parameter block and copy\r","A736: B6 80 D6    LDA   vfirstsec\r","A739: B7 80 03    STA   fdcsect\r","A73C: B6 E2 00    LDA   $E200\t* get bank (VIA IORB)\r","A73F: BA 80 DD    ORA   $80DD\t* bank select?\r","A742: B7 E2 00    STA   $E200\t* select it\r","A745: 8E 00 00    LDX   #$0000\t* load address\r","A748: BF 80 04    STX   fdcbuff\r","A74B: BD F4 48    JSR   readsector\r","A74E: B6 80 06    LDA   fdcstat\r","A751: 81 00       CMPA  #$00\t\r","A753: 27 03       BEQ   $A758\t* okay?\r","A755: 16 00 32    LBRA  $A78A\t* lbra rts\r","\r","A758: B6 80 E0    LDA   $80E0\t* some variable\r","A75B: 81 00       CMPA  #$00\r","A75D: 26 0B       BNE   $A76A\t* skip if it's zero\r","A75F: 8E B3 1D    LDX   #$B31D\t* lower params?\r","A762: CC 02 71    LDD   #$0271\t* think that's the length\r","A765: C3 B3 1D    ADDD  #$B31D\t* end address?\r","A768: 20 0D       BRA   $A777\t* jump\r","\r","A76A: 81 02       CMPA  #$02\twas it 2?\r","A76C: 26 09       BNE   $A777\tno, jump\r","A76E: 8E B5 8E    LDX   #$B58E\t* upper params?\r","A771: CC 02 71    LDD   #$0271\t* length?\r","A774: C3 B5 8E    ADDD  #$B58E\t* end address?\r","A777: FD 80 DB    STD   $80DB\t* some variable\r","A77A: 10 8E 00 00 LDY   #$0000\t* bottom of RAM\r","A77E: A6 A0       LDA   ,Y+\t\r","A780: A7 80       STA   ,X+\r","A782: BC 80 DB    CPX   $80DB\t* finished?\r","A785: 26 F7       BNE   $A77E\t* nope\r","A787: 7C 80 D6    INC   vfirstsec\t* bump the stored first sector\r","A78A: 39          RTS   \r","\r","* save parameter block\r","A78B: B6 80 D6    LDA   vfirstsec\r","A78E: B7 80 03    STA   fdcsect\r","A791: B6 80 E0    LDA   $80E0\t* upper/lower?\r","A794: 81 00       CMPA  #$00\r","A796: 26 05       BNE   $A79D\t* lower?\r","A798: 8E B3 1D    LDX   #$B31D\t* parameter block address\r","A79B: 20 07       BRA   $A7A4\r","\r","A79D: 81 02       CMPA  #$02\r","A79F: 26 03       BNE   $A7A4\t* upper?\r","A7A1: 8E B5 8E    LDX   #$B58E\t* parameter block address\r","A7A4: BF 80 04    STX   fdcbuff\r","A7A7: BD F4 76    JSR   writesector\r","A7AA: 7C 80 D6    INC   vfirstsec\r","A7AD: 39          RTS   \r","\r","* read or write sectors based on what we discovered from the lookup table\r","A7AE: B6 80 D6    LDA   vfirstsec\r","A7B1: B7 80 03    STA   fdcsect\r","A7B4: B6 80 D5    LDA   vfirsttrk\r","A7B7: B7 80 02    STA   fdctrk\r","A7BA: B6 E2 00    LDA   $E200\t* bank fiddling?\r","A7BD: BA 80 DD    ORA   $80DD\t* bank value\r","A7C0: B7 E2 00    STA   $E200\t* select it\r","A7C3: 8E 00 00    LDX   #$0000\t* load address\r","A7C6: BF 80 04    STX   fdcbuff\r","A7C9: B6 80 E1    LDA   $80E1\t* load/save?\r","A7CC: 81 00       CMPA  #$00\r","A7CE: 26 05       BNE   $A7D5\t* not load\r","A7D0: BD F4 48    JSR   readsector\r","A7D3: 20 07       BRA   $A7DC\r","\r","A7D5: 81 02       CMPA  #$02\r","A7D7: 26 03       BNE   $A7DC\t* not save, skip\r","A7D9: BD F4 76    JSR   writesector\r","A7DC: B6 80 06    LDA   fdcstat\r","A7DF: 81 00       CMPA  #$00\r","A7E1: 27 02       BEQ   $A7E5\t* okay?\r","A7E3: 20 61       BRA   $A846\t* bra rts\r","\r","A7E5: 7C 80 03    INC   fdcsect\r","A7E8: B6 80 03    LDA   fdcsect\r","A7EB: 81 05       CMPA  #$05\t* did we fall off into the short sectors?\r","A7ED: 27 05       BEQ   $A7F4\t* yes\r","A7EF: 8C 80 00    CMPX  #$8000\t* did we run out of bank?\r","A7F2: 26 D2       BNE   $A7C6\t* no, go back for more sectors\r","A7F4: B6 80 03    LDA   fdcsect\r","A7F7: 81 05       CMPA  #$05\t* short sectors?\r","A7F9: 26 1A       BNE   $A815\t* no, check for end\r","A7FB: 7F 80 03    CLR   fdcsect\t* sector 0\r","A7FE: 7C 80 02    INC   fdctrk\t* next track\r","A801: B6 80 02    LDA   fdctrk\t* or is it the last one?\r","A804: B1 80 D7    CMPA  vlasttrk\r","A807: 22 0C       BHI   $A815\t* yes, end\r","A809: BD F0 7D    JSR   fdcseekin\t* step\r","A80C: B6 80 06    LDA   fdcstat\r","A80F: 81 00       CMPA  #$00\r","A811: 27 02       BEQ   $A815\t* okay?\r","A813: 20 31       BRA   $A846\t* bra rts\r","\r","A815: B6 80 02    LDA   fdctrk\r","A818: B1 80 D7    CMPA  vlasttrk\r","A81B: 22 05       BHI   $A822\t* last track?\r","A81D: 8C 80 00    CMPX  #$8000\t* did we run out of bank?\r","A820: 26 A4       BNE   $A7C6\t* no, go back for more sectors\r","A822: B6 80 02    LDA   fdctrk\t* last track?\r","A825: B1 80 D7    CMPA  vlasttrk\r","A828: 22 07       BHI   $A831\t* yes\r","A82A: 8C 80 00    CMPX  #$8000\t* did we run out of bank?\r","A82D: 10 26 FF 95 LBNE  $A7C6\t* no, go back for more sectors\r","A831: 7C 80 DD    INC   $80DD\t* increment bank value\r","A834: B6 80 02    LDA   fdctrk\r","A837: B1 80 D7    CMPA  vlasttrk\r","A83A: 22 0A       BHI   $A846\t* end\r","A83C: B6 80 DD    LDA   $80DD\t* bank value?\r","A83F: B1 80 DE    CMPA  $80DE\t* end value?\r","A842: 10 26 FF 74 LBNE  $A7BA\t* no, jump back and set the bank\r","A846: 39          RTS   \r","\r","* read or write sequence\r","A847: B6 80 D6    LDA   vfirstsec\r","A84A: B7 80 03    STA   fdcsect\r","A84D: B6 80 D5    LDA   vfirsttrk\r","A850: B7 80 02    STA   fdctrk\r","A853: B6 80 CF    LDA   vbanktoload\t* some variable\r","A856: 81 07       CMPA  #$07\t* why 7? Short seq?\r","A858: 27 07       BEQ   $A861\t* skip...\r","A85A: B6 80 CF    LDA   vbanktoload\t* some variable\r","A85D: 81 08       CMPA  #$08\t* why 8? Long seq?\r","A85F: 26 08       BNE   $A869\t* skip...\r","A861: CC 08 00    LDD   #$0800\t* if it was 7, short seq is four sects\r","A864: C3 B8 00    ADDD  #$B800\r","A867: 20 06       BRA   $A86F\t\r","\r","A869: CC 20 00    LDD   #$2000\t* if it was 8, long seq?\r","A86C: C3 B8 00    ADDD  #$B800\r","A86F: FD 80 DB    STD   $80DB\t* save it, end of seq?\r","A872: 8E B8 00    LDX   #$B800\t* start of sequence address\r","A875: BF 80 04    STX   fdcbuff\r","A878: B6 80 E1    LDA   $80E1\t* some variable, load/save?\r","A87B: 81 00       CMPA  #$00\t* is it zero?\t\r","A87D: 26 05       BNE   $A884\t* no, skip\r","A87F: BD F4 48    JSR   readsector\r","A882: 20 07       BRA   $A88B\r","\r","A884: 81 02       CMPA  #$02\r","A886: 26 03       BNE   $A88B\r","A888: BD F4 76    JSR   writesector\r","A88B: B6 80 06    LDA   fdcstat\t* end up here\r","A88E: 81 00       CMPA  #$00\r","A890: 27 02       BEQ   $A894\t* okay?\r","A892: 20 24       BRA   $A8B8\t* nope, error, rts\r","\r","A894: 7C 80 02    INC   fdctrk\t* next track\r","A897: B6 80 02    LDA   fdctrk\t* get track\r","A89A: B1 80 D7    CMPA  vlasttrk * last one?\r","A89D: 22 0C       BHI   $A8AB\t* yes\r","A89F: BD F0 7D    JSR   fdcseekin * nope, step\r","A8A2: B6 80 06    LDA   fdcstat\t\r","A8A5: 81 00       CMPA  #$00\r","A8A7: 27 02       BEQ   $A8AB\t* okay?\r","A8A9: 20 0D       BRA   $A8B8\t* nope, error, rts\r","\r","A8AB: B6 80 02    LDA   fdctrk\t* saved FDC track\r","A8AE: B1 80 D7    CMPA  vlasttrk\t* reached this value?\r","A8B1: 22 05       BHI   $A8B8\t* bail\r","A8B3: BC 80 DB    CPX   $80DB\t* have we reached the end?\r","A8B6: 26 BD       BNE   $A875\t* no, go back around\r","A8B8: 39          RTS   \r","\r","\r","* unknown, something to do with loading  \r","A8B9: 7F 80 E2    CLR   $80E2\t* clear load/save flag\r","A8BC: BD AA 2F    JSR   $AA2F\t* check \"directory\"?\r","A8BF: B6 80 06    LDA   fdcstat * saved FDC status\r","A8C2: 81 00       CMPA  #$00\t* zero?\r","A8C4: 27 06       BEQ   $A8CC\t* yes, jump\r","A8C6: BD AB 00    JSR   $AB00\t* show disk error\r","A8C9: 16 00 AF    LBRA  $A97B\t* lbra rts\r","\r","A8CC: B6 80 CF    LDA   vbanktoload\t* some variable\r","A8CF: 81 03       CMPA  #$03\t\r","A8D1: 10 26 00 18 LBNE  $A8ED\t* if it's not 3, skip this\r","A8D5: F6 80 D0    LDB   $80D0\t* some variable\r","A8D8: 5A          DECB  \t* decrease\r","A8D9: 8E FB DF    LDX   #$FBDF\t* table in ROM, initially holds $06\r","A8DC: A6 85       LDA   B,X\r","A8DE: B4 80 D2    ANDA  vsampledir\t* sample directory?\r","A8E1: 81 00       CMPA  #$00\r","A8E3: 26 05       BNE   $A8EA\r","A8E5: C6 04       LDB   #$04\r","A8E7: F7 80 07    STB   fdcerr\r","A8EA: 16 00 8E    LBRA  $A97B\t* lbra rts\r","\r","A8ED: 81 07       CMPA  #$07\r","A8EF: 10 26 00 5C LBNE  $A94F\r","A8F3: B6 80 D0    LDA   $80D0\r","A8F6: 81 01       CMPA  #$01\r","A8F8: 25 3D       BCS   $A937\r","A8FA: B6 80 D0    LDA   $80D0\r","A8FD: 81 03       CMPA  #$03\r","A8FF: 22 36       BHI   $A937\r","A901: 8E FB EA    LDX   #$FBEA\r","A904: F6 80 D0    LDB   $80D0\r","A907: 5A          DECB  \r","A908: A6 85       LDA   B,X\r","A90A: B4 80 D4    ANDA  vlseqdir\r","A90D: 81 00       CMPA  #$00\r","A90F: 26 13       BNE   $A924\r","A911: 8E FB E2    LDX   #$FBE2\r","A914: A6 85       LDA   B,X\r","A916: B4 80 D3    ANDA  vsseqdir\r","A919: 81 00       CMPA  #$00\r","A91B: 26 05       BNE   $A922\r","A91D: C6 05       LDB   #$05\r","A91F: F7 80 07    STB   fdcerr\r","A922: 20 11       BRA   $A935\r","\r","A924: B6 80 E4    LDA   $80E4\r","A927: 27 07       BEQ   $A930\r","A929: 86 09       LDA   #$09\r","A92B: B7 80 CF    STA   vbanktoload\r","A92E: 20 05       BRA   $A935\r","\r","A930: 86 09       LDA   #$09\r","A932: B7 80 07    STA   fdcerr\r","A935: 20 15       BRA   $A94C\r","\r","A937: 8E FB E2    LDX   #$FBE2\r","A93A: F6 80 D0    LDB   $80D0\r","A93D: 5A          DECB  \r","A93E: A6 85       LDA   B,X\r","A940: B4 80 D3    ANDA  vsseqdir\r","A943: 81 00       CMPA  #$00\r","A945: 26 05       BNE   $A94C\r","A947: C6 05       LDB   #$05\r","A949: F7 80 07    STB   fdcerr\r","A94C: 16 00 2C    LBRA  $A97B * lbra rts\r","\r","A94F: 8E FB D4    LDX   #$FBD4\r","A952: B6 80 CF    LDA   vbanktoload\r","A955: F6 80 D0    LDB   $80D0\r","A958: 5C          INCB  \r","A959: 5C          INCB  \r","A95A: 3D          MUL   \r","A95B: A6 85       LDA   B,X\r","A95D: B4 80 D2    ANDA  vsampledir\r","A960: 81 00       CMPA  #$00\r","A962: 26 17       BNE   $A97B\r","A964: B6 80 CF    LDA   vbanktoload\r","A967: 81 01       CMPA  #$01\r","A969: 26 07       BNE   $A972\r","A96B: C6 03       LDB   #$03\r","A96D: F7 80 07    STB   fdcerr\r","A970: 20 09       BRA   $A97B\r","\r","A972: 81 02       CMPA  #$02\r","A974: 26 05       BNE   $A97B\r","A976: C6 02       LDB   #$02\r","A978: F7 80 07    STB   fdcerr\r","A97B: 39          RTS   \r","\r","* called after saving samples\r","A97C: 7F 80 E2    CLR   $80E2\t* clear load/save flag\r","A97F: BD AA 2F    JSR   $AA2F\t* directory?\r","A982: B6 80 06    LDA   fdcstat\r","A985: 81 00       CMPA  #$00\r","A987: 27 06       BEQ   $A98F\t* okay\r","A989: BD AB 00    JSR   $AB00\t* show disk error\r","A98C: 16 00 7B    LBRA  $AA0A\t* lbra rts\r","\r","A98F: B6 80 CF    LDA   vbanktoload\r","A992: 81 06       CMPA  #$06\t* sample\r","A994: 10 26 00 12 LBNE  $A9AA\r","A998: F6 80 D0    LDB   $80D0\r","A99B: 5A          DECB  \r","A99C: 8E FB DF    LDX   #$FBDF\r","A99F: A6 85       LDA   B,X\r","A9A1: BA 80 D2    ORA   vsampledir\r","A9A4: B7 80 D2    STA   vsampledir\r","A9A7: 16 00 4E    LBRA  $A9F8\r","\r","A9AA: 81 08       CMPA  #$08\t* sequence\r","A9AC: 10 26 00 15 LBNE  $A9C5\r","A9B0: 8E FB E2    LDX   #$FBE2\r","A9B3: F6 80 D0    LDB   $80D0\r","A9B6: 5A          DECB  \r","A9B7: A6 85       LDA   B,X\r","A9B9: BA 80 D3    ORA   vsseqdir\r","A9BC: B7 80 D3    STA   vsseqdir\r","A9BF: BD AA 0B    JSR   $AA0B\r","A9C2: 16 00 33    LBRA  $A9F8\r","\r","A9C5: 81 0A       CMPA  #$0A\r","A9C7: 10 26 00 15 LBNE  $A9E0\r","A9CB: 8E FB EA    LDX   #$FBEA\r","A9CE: F6 80 D0    LDB   $80D0\r","A9D1: 5A          DECB  \r","A9D2: A6 85       LDA   B,X\r","A9D4: BA 80 D4    ORA   vlseqdir\r","A9D7: B7 80 D4    STA   vlseqdir\r","A9DA: BD AA 0B    JSR   $AA0B\r","A9DD: 16 00 18    LBRA  $A9F8\r","\r","A9E0: 8E FB D4    LDX   #$FBD4\r","A9E3: B6 80 CF    LDA   vbanktoload\r","A9E6: 1C FE       ANDCC #$FE\r","A9E8: 82 03       SBCA  #$03\r","A9EA: F6 80 D0    LDB   $80D0\r","A9ED: 5C          INCB  \r","A9EE: 5C          INCB  \r","A9EF: 3D          MUL   \r","A9F0: A6 85       LDA   B,X\r","A9F2: BA 80 D2    ORA   vsampledir\r","A9F5: B7 80 D2    STA   vsampledir\r","A9F8: 86 02       LDA   #$02\r","A9FA: B7 80 E2    STA   $80E2\r","A9FD: BD AA 2F    JSR   $AA2F\r","AA00: B6 80 06    LDA   fdcstat\r","AA03: 81 00       CMPA  #$00\r","AA05: 27 03       BEQ   $AA0A\r","AA07: BD AB 00    JSR   $AB00\t* show disk error\r","AA0A: 39          RTS   \r","\r","* sequence directory?\r","AA0B: F6 80 D0    LDB   $80D0\r","AA0E: 5A          DECB  \r","AA0F: B6 80 CF    LDA   vbanktoload\r","AA12: 81 08       CMPA  #$08\r","AA14: 26 0D       BNE   $AA23\r","AA16: 8E FB F0    LDX   #$FBF0\r","AA19: A6 85       LDA   B,X\r","AA1B: B4 80 D4    ANDA  vlseqdir\r","AA1E: B7 80 D4    STA   vlseqdir\r","AA21: 20 0B       BRA   $AA2E\r","\r","AA23: 8E FB ED    LDX   #$FBED\r","AA26: A6 85       LDA   B,X\r","AA28: B4 80 D3    ANDA  vsseqdir\r","AA2B: B7 80 D3    STA   vsseqdir\r","AA2E: 39          RTS   \r","\r","* seems to get the directory \"byte\" into an address\r","* hideously complicated though, isn't it?\r","* it has to read three times, and handles its own retries\r","AA2F: 10 8E FB 8C LDY   #$FB8C\t* OS Flags?\r","AA33: 86 02       LDA   #$02\r","AA35: B7 80 E3    STA   $80E3\t* $02 in this variable again\r","AA38: BD AA D2    JSR   $AAD2\t* get sectors\r","AA3B: B6 80 06    LDA   fdcstat\r","AA3E: 81 00       CMPA  #$00\r","AA40: 27 03       BEQ   $AA45\r","AA42: 16 00 8C    LBRA  $AAD1\t* lbra rts\r","\r","AA45: B6 80 D5    LDA   vfirsttrk\r","AA48: B7 80 02    STA   fdctrk\r","AA4B: B6 80 D6    LDA   vfirstsec\r","AA4E: B7 80 03    STA   fdcsect\r","AA51: 8E 80 D2    LDX   #vsampledir\t* address to load \"directory\" byte to\r","AA54: 86 0A       LDA   #$0A\r","AA56: B7 80 01    STA   fdcrtry\t* bunch of retries\r","AA59: B6 80 E2    LDA   $80E2\t* some variable\r","AA5C: 81 00       CMPA  #$00\t* is it zero?\r","AA5E: 26 0A       BNE   $AA6A\r","AA60: BD F0 13    JSR   fdcskipsector\r","AA63: B6 E8 03    LDA   $E803\r","AA66: A7 84       STA   ,X\t* get the last byte of the sector\r","AA68: 20 07       BRA   $AA71\t* continue\r","\r","AA6A: 81 02       CMPA  #$02\t* is it 2?\r","AA6C: 26 03       BNE   $AA71\t* no, continue\r","AA6E: BD F0 37    JSR   fdcfillsector\t* save\r","AA71: 7A 80 01    DEC   fdcrtry\r","AA74: B6 80 01    LDA   fdcrtry\r","AA77: 27 07       BEQ   $AA80\r","AA79: B6 80 06    LDA   fdcstat\r","AA7C: 81 00       CMPA  #$00\r","AA7E: 26 D9       BNE   $AA59\r","AA80: B6 80 06    LDA   fdcstat\r","AA83: 81 00       CMPA  #$00\r","AA85: 27 1E       BEQ   $AAA5\r","AA87: BD F0 86    JSR   fdcseekout\r","AA8A: BD F0 7D    JSR   fdcseekin\r","AA8D: B6 80 E2    LDA   $80E2\r","AA90: 81 00       CMPA  #$00\r","AA92: 26 0A       BNE   $AA9E\r","AA94: BD F0 13    JSR   fdcskipsector\r","AA97: B6 E8 03    LDA   $E803\r","AA9A: A7 84       STA   ,X\r","AA9C: 20 07       BRA   $AAA5\r","\r","AA9E: 81 02       CMPA  #$02\r","AAA0: 26 03       BNE   $AAA5\r","AAA2: BD F0 37    JSR   fdcfillsector\r","AAA5: B6 80 06    LDA   fdcstat\r","AAA8: 81 00       CMPA  #$00\r","AAAA: 27 02       BEQ   $AAAE\r","AAAC: 20 23       BRA   $AAD1\r","\r","AAAE: 30 01       LEAX  $0001,X\r","AAB0: 7C 80 02    INC   fdctrk\r","AAB3: B6 80 02    LDA   fdctrk\r","AAB6: B1 80 D7    CMPA  vlasttrk\r","AAB9: 22 0C       BHI   $AAC7\r","AABB: BD F4 A4    JSR   gototrack2\r","AABE: B6 80 06    LDA   fdcstat\r","AAC1: 81 00       CMPA  #$00\r","AAC3: 27 02       BEQ   $AAC7\r","AAC5: 20 0A       BRA   $AAD1\r","\r","AAC7: B6 80 02    LDA   fdctrk\r","AACA: B1 80 D7    CMPA  vlasttrk\r","AACD: 10 23 FF 88 LBLS  $AA59\r","AAD1: 39          RTS   \r","\r","* called with address of table in Y\r","* looks like if $80E3 is 0, we look at $80D1 for an offset\r","* otherwise if $80E3 is 2, zero it and continue\r","* or use $80E3 as the offset\r","AAD2: B6 80 E3    LDA   $80E3\t* some variable\r","AAD5: 81 00       CMPA  #$00\t\r","AAD7: 26 05       BNE   $AADE\t* not zero? skip...\r","AAD9: B6 80 D1    LDA   $80D1\t* offset into table\r","AADC: 20 05       BRA   $AAE3\t* branch to\r","\r","AADE: 81 02       CMPA  #$02\t\r","AAE0: 26 01       BNE   $AAE3\t* not 2? skip...\r","AAE2: 4F          CLRA  \t* clear A\r","AAE3: 30 A6       LEAX  A,Y\t* X=A+Y\r","AAE5: A6 80       LDA   ,X+\t* get track, bump X\r","AAE7: B7 80 D5    STA   vfirsttrk\t* $80d5 holds first track?\r","AAEA: B7 80 02    STA   fdctrk\t* fdctrk definitely does for the ROM\r","AAED: A6 80       LDA   ,X+\t* get sector, bump X\r","AAEF: B7 80 D6    STA   vfirstsec\t* $80d6 contains first sector?\r","AAF2: A6 80       LDA   ,X+\t* get last track\r","AAF4: B7 80 D7    STA   vlasttrk\t* $80d7\t\r","AAF7: A6 84       LDA   ,X\t* get last sector\r","AAF9: B7 80 D8    STA   vlastsec\t* save in $80d8\r","AAFC: BD F4 A4    JSR   gototrack2 * position head\r","AAFF: 39          RTS   \r","\r","* work out which disk error to show\r","AB00: 86 01       LDA   #$01\t* 1\r","AB02: B7 80 07    STA   fdcerr\t* store in error code\r","AB05: 86 10       LDA   #$10\t* \"record not found\"\r","AB07: B5 80 06    BITA  fdcstat\t* FDC status\r","AB0A: 27 07       BEQ   $AB13\t* nope, jump\r","AB0C: 86 06       LDA   #$06\t* error message 6\r","AB0E: B7 80 07    STA   fdcerr\t* save\r","AB11: 20 0C       BRA   $AB1F\t* return\r","\r","AB13: 86 40       LDA   #$40\t* deleted data mark\r","AB15: B5 80 06    BITA  fdcstat\t* FDC status\r","AB18: 27 05       BEQ   $AB1F\t* nope, return\r","AB1A: 86 08       LDA   #$08\t* error message 8\r","AB1C: B7 80 07    STA   fdcerr\t* save\r","AB1F: 39          RTS   \t* return\r","\r","* subtract 1 and multiply by four\r","* this would be awfully handy for finding sequences and \r","* samples in the offset tables\r","AB20: F7 80 D0    STB   $80D0\r","AB23: 5A          DECB  \r","AB24: 58          ASLB  \r","AB25: 58          ASLB  \r","AB26: F7 80 D1    STB   $80D1\r","AB29: 39          RTS   \r","\r","AB2A: B7 A2 \r","\r","* get byte from sequence\r","AB2C: FE B8 04    LDU   $B804\t* sequence pointer?\r","AB2F: A6 C0       LDA   ,U+\t* get command\r","AB31: DF EC       STU   $EC\t* save sequence pointer\r","AB33: 97 F1       STA   $F1\t* save command\r","AB35: 39          RTS   \r","\r","* put byte into sequence?\r","AB36: FE B8 08    LDU   $B808\t* start of sequence\r","AB39: FF B8 04    STU   $B804\t* sequence pointer?\r","AB3C: A7 C0       STA   ,U+\t* save byte\r","AB3E: DF EE       STU   $EE\t* save U in some variable\r","AB40: 0F F0       CLR   $F0\t* clear some variable\r","AB42: 39          RTS   \r","\r","* unknown, set up sequencer?\r","AB43: 8D E7       BSR   $AB2C\t* get byte from sequence\r","AB45: 0F 36       CLR   $36\t* incremented every second int\r","AB47: 0F E9       CLR   $E9\t* seq clock count?\r","AB49: C6 02       LDB   #$02\r","AB4B: D7 E7       STB   $E7\t* sequencer flag?\r","AB4D: 39          RTS   \r","\r","* unknown\r","AB4E: 86 04       LDA   #$04\r","AB50: 97 E7       STA   $E7\t* sequencer flag?\r","AB52: 39          RTS   \r","\r","AB53: DE E5       LDU   $E5\r","AB55: 33 5D       LEAU  $FFFD,U\r","AB57: DF EC       STU   $EC\r","AB59: 8D DB       BSR   $AB36\r","AB5B: C6 06       LDB   #$06\r","AB5D: D7 E7       STB   $E7\t* sequencer flag?\r","AB5F: 39          RTS   \r","\r","* unknown\r","* initialise sequencer vars?\r","AB60: 0F 36       CLR   $36\r","AB62: 0F E9       CLR   $E9\r","AB64: 0C EB       INC   $EB\r","AB66: 0F EA       CLR   $EA\r","AB68: 86 60       LDA   #$60\r","AB6A: 97 26       STA   $26\t* sequencer speed \r","AB6C: 86 08       LDA   #$08\r","AB6E: 97 E7       STA   $E7\t* sequencer flag?\r","AB70: F6 90 09    LDB   $9009\t* initially $4000\r","AB73: BD AD AF    JSR   $ADAF\t* call some routine\r","AB76: D6 6C       LDB   $6C\t* modwheel?\r","AB78: BD AD B2    JSR   $ADB2\t* call some routine\r","AB7B: D6 6B       LDB   $6B\t* footswitch flag\r","AB7D: 7E AD B6    JMP   $ADB6\t* some routine\r","\r","AB80: 0F 36       CLR   $36\t* incremented every second interrupt\r","AB82: 0F E9       CLR   $E9\t* something to do with sequencer\r","AB84: BD AC 10    JSR   $AC10\t* call\r","AB87: 8D A3       BSR   $AB2C\t* get byte from sequence\r","AB89: 8D AB       BSR   $AB36\t* call\r","AB8B: C6 0A       LDB   #$0A\t* some value\r","AB8D: D7 E7       STB   $E7\t* sequencer flag?\r","AB8F: 39          RTS   \r","\r","* called from lots of places\r","* called from routine that sets up sampling?\r","* something to do with sequencer?\r","AB90: 96 E7       LDA   $E7     * sequencer flag?\r","AB92: 27 7B       BEQ   $AC0F   * 0? finish\r","AB94: 0F E7       CLR   $E7     * sequencer flag?\r","AB96: DE EE       LDU   $EE     * sequence pointer?\r","AB98: 81 06       CMPA  #$06    * seq flag=6?\r","AB9A: 26 06       BNE   $ABA2   * no, jump\r","AB9C: 86 FF       LDA   #$FF    \r","AB9E: 20 32       BRA   $ABD2   * put byte in sequence\r","\r","ABA0: 20 49       BRA   $ABEB\r","\r","ABA2: 81 08       CMPA  #$08\r","ABA4: 26 3E       BNE   $ABE4\r","ABA6: 96 F0       LDA   $F0\t* some variable\r","ABA8: 0D 24       TST   $24\t* external seq clock\r","ABAA: 27 26       BEQ   $ABD2\t* off\r","ABAC: 0D EB       TST   $EB\t* some variable\r","ABAE: 26 EC       BNE   $AB9C\t* jump\r","ABB0: D6 EA       LDB   $EA\t* some variable\r","ABB2: C1 0C       CMPB  #$0C\t* 12\r","ABB4: 24 08       BCC   $ABBE\t* >= 12\r","ABB6: 90 EA       SUBA  $EA\t* \r","ABB8: 24 02       BCC   $ABBC\r","ABBA: 8B 18       ADDA  #$18\t* 24\r","ABBC: 20 14       BRA   $ABD2\r","\r","ABBE: 50          NEGB  \r","ABBF: CB 18       ADDB  #$18\r","ABC1: 34 04       PSHS  B\r","ABC3: AB E0       ADDA  ,S+\r","ABC5: 24 0B       BCC   $ABD2\r","ABC7: 4C          INCA  \r","ABC8: A7 5F       STA   $FFFF,U\t* save sequencer ticks?\r","ABCA: 86 81       LDA   #$81\r","ABCC: A7 C0       STA   ,U+\r","ABCE: 86 FF       LDA   #$FF\r","ABD0: A7 C0       STA   ,U+\r","\r","* unknown-ish\r","* put byte into sequence?\r","* U probably points at first $80 in end marker?\r","* A contains byte to store\r","ABD2: A7 5F       STA   $FFFF,U\t* store A\r","ABD4: 86 80       LDA   #$80\t* end marker is $80\r","ABD6: A7 C0       STA   ,U+\r","ABD8: A7 C0       STA   ,U+\r","ABDA: A7 C0       STA   ,U+\t* write three $80\r","ABDC: FF B8 06    STU   $B806   * set pointer to first byte of free seqram\r","ABDF: BD AB 2C    JSR   $AB2C\t* get byte from sequence\r","ABE2: 20 07       BRA   $ABEB\r","\r","ABE4: 81 0A       CMPA  #$0A\r","ABE6: 26 03       BNE   $ABEB\r","ABE8: BD AC 27    JSR   $AC27\r","ABEB: CE AB 2A    LDU   #$AB2A\r","ABEE: DF EE       STU   $EE\r","ABF0: 8D 4D       BSR   $AC3F\r","ABF2: 8E 80 6F    LDX   #$806F\r","ABF5: BD 87 E2    JSR   $87E2\r","ABF8: CE 8E 4D    LDU   #$8E4D\r","ABFB: 86 24       LDA   #$24\r","ABFD: E6 C6       LDB   A,U\r","ABFF: 2A 09       BPL   $AC0A\r","AC01: C4 7F       ANDB  #$7F\r","AC03: E7 C6       STB   A,U\r","AC05: C6 40       LDB   #$40\r","AC07: BD A0 C3    JSR   $A0C3\r","AC0A: 4C          INCA  \r","AC0B: 81 61       CMPA  #$61\r","AC0D: 25 EE       BCS   $ABFD\r","AC0F: 39          RTS   \r","\r","* unknown, sequencer\r","* insert a gap, or something?\r","AC10: BE B8 06    LDX   $B806\t* first byte of free seqram\r","AC13: DE E5       LDU   $E5\r","AC15: FF B8 06    STU   $B806\t* first byte of free seqram\r","AC18: BC B8 04    CPX   $B804\t* sequence pointer?\r","AC1B: 23 06       BLS   $AC23\t* less, skip\r","AC1D: A6 82       LDA   ,-X\t* a=(--x)\r","AC1F: A7 C2       STA   ,-U\t* (--u)=a\r","AC21: 20 F5       BRA   $AC18\t* loop\r","\r","AC23: FF B8 04    STU   $B804\t* sequence pointer?\r","AC26: 39          RTS   \r","\r","AC27: 9E EC       LDX   $EC\r","AC29: DE EE       LDU   $EE\r","AC2B: DF EC       STU   $EC\r","AC2D: 96 F0       LDA   $F0\r","AC2F: 9B F1       ADDA  $F1\r","AC31: A7 5F       STA   $FFFF,U\r","AC33: A6 80       LDA   ,X+\r","AC35: A7 C0       STA   ,U+\r","AC37: 9C E5       CPX   $E5\r","AC39: 25 F8       BCS   $AC33\r","AC3B: FF B8 06    STU   $B806\t* first byte of free seqram\r","AC3E: 39          RTS   \r","\r","AC3F: 5F          CLRB  \r","\r","* unknown\r","AC40: D7 72       STB   $72\r","AC42: BD A0 DA    JSR   $A0DA\t* send MIDI sustain off\r","AC45: 5D          TSTB  \r","AC46: 26 06       BNE   $AC4E\r","AC48: 8E 80 6F    LDX   #$806F\r","AC4B: BD 87 DD    JSR   $87DD\r","AC4E: 39          RTS   \r","\r","* unknown\r","* something to do with long sequences?\r","AC4F: CC D8 00    LDD   #$D800\r","AC52: FD C0 00    STD   $C000\t* store at base of sequence expander\r","AC55: 10 B3 C0 00 CMPD  $C000\t* did it store?\r","AC59: 26 04       BNE   $AC5F\t* no, skip\r","AC5B: 97 E4       STA   $E4\r","AC5D: DD E5       STD   $E5\r","AC5F: 96 E7       LDA   $E7\t* sequencer flat?\r","AC61: 27 3B       BEQ   $AC9E\t* 0, skip\r","AC63: D6 24       LDB   $24\t* seq ext clock\r","AC65: 26 20       BNE   $AC87\t* nonzero, skip\r","AC67: 81 04       CMPA  #$04\t* flag?\r","AC69: 27 1A       BEQ   $AC85\t* =4, skip over\r","AC6B: 81 06       CMPA  #$06\t* =6, skip over\r","AC6D: 27 16       BEQ   $AC85\r","AC6F: 0D 36       TST   $36\t* incremented every second int\r","AC71: 27 12       BEQ   $AC85\t* 0, skip\r","AC73: D6 E8       LDB   $E8\t* some variable, seq\r","AC75: DB 26       ADDB  $26\t* add 38?\r","AC77: D7 E8       STB   $E8\t* store\r","AC79: 24 06       BCC   $AC81\t* carry?\r","AC7B: BD AC A3    JSR   $ACA3\tno\r","AC7E: BD A1 16    JSR   $A116\t* send MIDI clock\r","AC81: 0A 36       DEC   $36\t* decrement\r","AC83: 20 EC       BRA   $AC71\t* loop back\r","\r","AC85: 20 17       BRA   $AC9E\t* jump to end\r","\r","AC87: 0D E9       TST   $E9\t* seq clocks?\r","AC89: 27 13       BEQ   $AC9E\t* 0, end\r","AC8B: BD AC A3    JSR   $ACA3\r","AC8E: 96 EA       LDA   $EA\r","AC90: 4C          INCA  \r","AC91: 81 18       CMPA  #$18\r","AC93: 26 03       BNE   $AC98\r","AC95: 4F          CLRA  \r","AC96: 0F EB       CLR   $EB\r","AC98: 97 EA       STA   $EA\r","AC9A: 0A E9       DEC   $E9\r","AC9C: 20 EB       BRA   $AC89\r","\r","AC9E: BD 88 5E    JSR   $885E\r","ACA1: 20 BC       BRA   $AC5F\r","\r","ACA3: 96 E7       LDA   $E7\t* sequencer flag?\r","ACA5: 81 02       CMPA  #$02\t* 2?\r","ACA7: 26 0D       BNE   $ACB6\t* no, jump\r","ACA9: 0D F1       TST   $F1\t* some variable\r","ACAB: 26 07       BNE   $ACB4\t* not zero, jump\r","ACAD: BD AC EB    JSR   $ACEB\t* call some routine\r","ACB0: 0D F1       TST   $F1\t* again?\r","ACB2: 20 F7       BRA   $ACAB\t* loop\r","\r","ACB4: 20 2C       BRA   $ACE2\t* jump\r","\r","ACB6: 81 0A       CMPA  #$0A\t* =10?\r","ACB8: 26 16       BNE   $ACD0\t* no, jump\r","ACBA: 96 F1       LDA   $F1\t* some variable\r","ACBC: 26 10       BNE   $ACCE\t* not 0, jump\r","ACBE: BD AC EB    JSR   $ACEB\t* call some routine\r","ACC1: DC F2       LDD   $F2\t* some variable\r","ACC3: 81 80       CMPA  #$80\t* 128?\r","ACC5: 27 03       BEQ   $ACCA\t* yes, jump\r","ACC7: BD AD 8F    JSR   $AD8F\t* call \r","ACCA: 96 F1       LDA   $F1\t* some variable\r","ACCC: 20 EE       BRA   $ACBC\t* loop\r","\r","ACCE: 20 12       BRA   $ACE2\t* jump\r","\r","ACD0: 81 08       CMPA  #$08\t* =8?\r","ACD2: 26 0D       BNE   $ACE1\t* no, jump\r","ACD4: 96 F0       LDA   $F0\t* some variable\r","ACD6: 81 FF       CMPA  #$FF\r","ACD8: 26 05       BNE   $ACDF\t* not $ff, jump\r","ACDA: 86 81       LDA   #$81\t* 129\r","ACDC: BD AD 9A    JSR   $AD9A\t* call\r","ACDF: 20 01       BRA   $ACE2\t* jump\r","\r","ACE1: 39          RTS   \r","\r","* unknown, counts down one variable and counts up another\r","* masks ints, why?\r","ACE2: 1A 50       ORCC  #$50\t* mask ints\r","ACE4: 0A F1       DEC   $F1\t* dec some variable\r","ACE6: 0C F0       INC   $F0\t* inc some variable\r","ACE8: 1C AF       ANDCC #$AF\t* enable ints\r","ACEA: 39          RTS   \r","\r","* unknown\r","ACEB: DE EC       LDU   $EC\t* some variable\r","ACED: A6 42       LDA   $0002,U * a=(u+2)\r","ACEF: 97 F1       STA   $F1\t* some variable\r","ACF1: EC C4       LDD   ,U\t* d=(u)\r","ACF3: 33 43       LEAU  $0003,U\t* u += 3\r","ACF5: DF EC       STU   $EC\t* save it in some variable\r","ACF7: DD F2       STD   $F2\t* save D too\r","ACF9: 2A 56       BPL   $AD51\t* positive value?\r","ACFB: 84 7F       ANDA  #$7F\t* mask top bit\r","ACFD: 81 02       CMPA  #$02\r","ACFF: 2F 17       BLE   $AD18\t* a<=2, jump\r","AD01: BD A0 B7    JSR   $A0B7\t* call\r","\r","AD04: 10 8E 8E 4D LDY   #$8E4D\t* middle of a routine?\r","AD08: E6 A6       LDB   A,Y\t* b = (a+y)\r","AD0A: CA 80       ORB   #$80\t* b |= $80\r","AD0C: E7 A6       STB   A,Y\t* write it back\r","AD0E: D6 F3       LDB   $F3\t* some variable\r","AD10: 8E 80 6F    LDX   #$806F\t* OS param?\r","AD13: BD 87 C4    JSR   $87C4\t* call\r","AD16: 20 37       BRA   $AD4F\t* jump rts\r","\r","AD18: 4D          TSTA\t\t* a?  \r","AD19: 27 08       BEQ   $AD23\t* a=0? jump\r","AD1B: D7 F1       STB   $F1\t* some variable\r","AD1D: 33 5F       LEAU  $FFFF,U\t* u--\r","AD1F: DF EC       STU   $EC\t* save it\r","AD21: 20 2C       BRA   $AD4F\t* jump rts\r","\r","AD23: 96 27       LDA   $27\t* some variable\r","AD25: 27 1C       BEQ   $AD43\t* 0? jump\r","AD27: 0F F1       CLR   $F1\t* some variable\r","AD29: 96 E7       LDA   $E7\t* some variable\r","AD2B: 81 0A       CMPA  #$0A\t* a=10?\r","AD2D: 26 0C       BNE   $AD3B\t* no, jump\r","AD2F: 33 5D       LEAU  $FFFD,U\t* u-=3\r","AD31: DF EC       STU   $EC\t* save\r","AD33: BD AB 90    JSR   $AB90\t* something to do with sequencer\r","AD36: BD AB 84    JSR   $AB84\t* call\r","AD39: 20 06       BRA   $AD41\t* skip\r","\r","AD3B: BD AB F2    JSR   $ABF2\t* call\r","AD3E: BD AB 2C    JSR   $AB2C\t* get byte from sequence\r","\r","AD41: 20 0C       BRA   $AD4F\t* jump rts\r","\r","AD43: 33 5D       LEAU  $FFFD,U\t* u-=3\r","AD45: DF EC       STU   $EC\t* save\r","AD47: BD AB 90    JSR   $AB90\t* something to do with sequencer\r","AD4A: 86 1A       LDA   #$1A\t* 26?\r","AD4C: BD A4 04    JSR   $A404\t* put A in keystroke ringbuffer\r","AD4F: 20 3D       BRA   $AD8E\t* jump rts\r","AD51: 81 03       CMPA  #$03\t\r","AD53: 23 17       BLS   $AD6C\t* a<3, jump\r","AD55: BD A0 C5    JSR   $A0C5\t* send MIDI note off\r","AD58: 10 8E 8E 4D LDY   #$8E4D\t* middle of a routine\r","AD5C: E6 A6       LDB   A,Y\t\r","AD5E: C4 7F       ANDB  #$7F\r","AD60: E7 A6       STB   A,Y\r","AD62: D6 F3       LDB   $F3\t* some variable\r","AD64: 8E 80 6F    LDX   #$806F\t* os params?\r","AD67: BD 87 BF    JSR   $87BF\t* call\r","AD6A: 20 22       BRA   $AD8E\t* jump rts\r","\r","AD6C: 81 00       CMPA  #$00\t\r","AD6E: 26 0A       BNE   $AD7A\t* a!=0? jump\r","AD70: BD A0 CF    JSR   $A0CF\t* call\r","AD73: BD 90 C0    JSR   $90C0\t* calculate pitch bend amount\r","AD76: DD 70       STD   $70\t* some variable\r","AD78: 20 14       BRA   $AD8E\t* jump rts\r","\r","AD7A: 81 01       CMPA  #$01\t* =1\r","AD7C: 26 09       BNE   $AD87\t* no, jump\r","AD7E: D7 73       STB   $73\t* some variable\r","AD80: D7 6F       STB   $6F\t* some variable\r","AD82: BD A0 E2    JSR   $A0E2\t* call\r","AD85: 20 07       BRA   $AD8E\t* jump rts\r","\r","AD87: 81 03       CMPA  #$03\t* =3?\r","AD89: 26 03       BNE   $AD8E\t* jump rts\r","AD8B: BD AC 40    JSR   $AC40\t* call\r","AD8E: 39          RTS   \r","\r","* unknown\r","AD8F: 81 81       CMPA  #$81\r","AD91: 26 1A       BNE   $ADAD\r","AD93: D6 F0       LDB   $F0\r","AD95: DB F1       ADDB  $F1\r","AD97: 25 01       BCS   $AD9A\r","AD99: 39          RTS   \r","\r","* unknown\r","AD9A: DE EE       LDU   $EE\r","AD9C: 11 93 EC    CMPU  $EC\r","AD9F: 25 01       BCS   $ADA2\t* if $80EC is less than $80EE, continue\r","ADA1: 39          RTS   \r","\r","ADA2: A7 C1       STA   ,U++\r","ADA4: DF EE       STU   $EE\r","ADA6: D6 F0       LDB   $F0\r","ADA8: E7 5D       STB   $FFFD,U\r","ADAA: 0F F0       CLR   $F0\r","ADAC: 39          RTS   \r","\r","ADAD: 20 0D       BRA   $ADBC\r","\r","* store bend message in sequencer\r","ADAF: 4F          CLRA  \r","ADB0: 20 0A       BRA   $ADBC\r","\r","* store modwheel message in sequencer\r","ADB2: 86 01       LDA   #$01\r","ADB4: 20 06       BRA   $ADBC\r","\r","* store sustain message in sequencer\r","ADB6: 86 03       LDA   #$03\r","ADB8: 20 02       BRA   $ADBC\r","\r","* store note on into sequencer?\r","ADBA: 8A 80       ORA   #$80\r","\r","* store note into sequencer?\r","ADBC: 34 01       PSHS  CC\t* save state\r","ADBE: 1A 50       ORCC  #$50\t* mask interrupts\r","ADC0: DE EE       LDU   $EE\t* some variable\r","ADC2: 11 93 EC    CMPU  $EC\t* some variable\r","ADC5: 25 0E       BCS   $ADD5\t* $80EC<$80EE?\r","ADC7: 35 01       PULS  CC\t* restore state\r","ADC9: 34 04       PSHS  B\t* save B\r","ADCB: BD AB 90    JSR   $AB90\t* something to do with sequencer?\r","ADCE: 86 1A       LDA   #$1A\t* 26\r","ADD0: BD A4 04    JSR   $A404\t* put A in keystroke ringbuffer\r","ADD3: 35 84       PULS  B,PC ;(PUL? PC=RTS)\r","\r","ADD5: ED C4       STD   ,U\t* (U)=A,B\r","ADD7: 96 E7       LDA   $E7\t* sequencer flag\r","\r","ADD9: 81 08       CMPA  #$08\t* 8?\r","ADDB: 26 0C       BNE   $ADE9\t* no, skip\r","ADDD: 96 F0       LDA   $F0\t* some variable\r","ADDF: A7 5F       STA   $FFFF,U\t* (U-1)=A\r","ADE1: 33 43       LEAU  $0003,U * U+=3\r","ADE3: DF EE       STU   $EE\t* some variable\r","ADE5: 0F F0       CLR   $F0\t* some variable\r","ADE7: 20 2C       BRA   $AE15\t* finish\r","\r","ADE9: 81 0A       CMPA  #$0A\t* 10?\r","ADEB: 26 0C       BNE   $ADF9\t* no, skip\r","ADED: 96 F0       LDA   $F0\t* some variable\r","ADEF: A7 5F       STA   $FFFF,U\t* (U-1)=A\r","ADF1: 33 43       LEAU  $0003,U\t* U+=3\r","ADF3: DF EE       STU   $EE\t* some variable\r","ADF5: 0F F0       CLR   $F0\t* some variable\r","ADF7: 20 1C       BRA   $AE15\r","\r","ADF9: 81 06       CMPA  #$06\t* 6?\r","ADFB: 26 18       BNE   $AE15\t* no, finish\r","ADFD: A6 C4       LDA   ,U\t* A=(U)\r","ADFF: 81 83       CMPA  #$83\t* 131?\r","AE01: 25 12       BCS   $AE15\t* lower, finish\r","AE03: 6F 5F       CLR   $FFFF,U\t* (u-1)=0\r","AE05: 33 43       LEAU  $0003,U * U+=3\r","AE07: DF EE       STU   $EE\t* some variable\r","AE09: 34 04       PSHS  B\t* save B\r","AE0B: BD AB 60    JSR   $AB60\t* call\r","AE0E: 86 19       LDA   #$19\t* 25\r","AE10: BD A4 04    JSR   $A404\t* put A in keystroke ringbuffer\r","AE13: 35 04       PULS  B\t* restore B\r","AE15: 35 81       PULS  CC,PC ;(PUL? PC=RTS)\r","\r","*** loops around the filters setting resonance and cutoff to zero\r","\r","zerofilter:\r","AE17: CE E4 18    LDU   #$E418\t\t; first filter, multiplexer\r","AE1A: CC 00 00    LDD   #$0000\t* cutoff 0, resonance 0\r","zerofilter2:\r","AE1D: BD F5 E7    JSR   setfilterdac\t* set filter (increments U)\r","AE20: 11 83 E4 20 CMPU  #$E420\t\t; done all filters?\r","AE24: 26 F7       BNE   zerofilter2\t; no, continue\r","AE26: CE B0 52    LDU   #$B052\t\t* voice table\r","AE29: CC 8A D7    LDD   #$8AD7\t\t* update filter task\r","AE2C: 8E 8B BE    LDX   #$8BBE\t\t* unmask ints and return\r","zerofilter3:\r","AE2F: ED C8 1C    STD   $1C,U\t\t* set voice task\r","AE32: AF C8 2B    STX   $2B,U\t\t; store address of unmask routine\r","AE35: 6F C8 1A    CLR   $1A,U\t\t; zero\r","AE38: 33 C8 4D    LEAU  $4D,U\t\t; add 77 bytes\r","AE3B: 11 83 B2 BA CMPU  #$B2BA\t\t; done all eight voices?\r","AE3F: 25 EE       BCS   zerofilter3\t; no, loop\r","AE41: 39          RTS   \r","\r","* below are some FDC routines that never seem to be used\r","* I suspect they are dead code because some of the jumps make no sense\r","* they may have been prototype versions of ROM routines\r","* they're certainly very similar.\r","* I think these get clobbered by a stack?\r","* Per Rainer Buchty's suggestion this may be better read from $AE44\r","*AE42: AC FF 16 00 CPX   [$1600,S]\r","*AE46: 2B 7C       BMI   $AEC4\t* jumps into the middle of a loop without setup\r","*AE48: 80 03       SUBA  #$03\r","AE44: 16 00 2B    LBRA $AE72\t* lbra rts, possibly from previous routine\r","AE47: 7C 80 03    INC\tfdcsect\t\r","AE4A: B6 80 03    LDA   fdcsect\r","AE4D: 81 06       CMPA  #$06\t* run out of sectors?\r","AE4F: 26 E3       BNE   $AE34\t* must be wrong, jumps to the middle of an instruction!\r","AE51: 7C 80 02    INC   fdctrk\r","AE54: 7C A2 42    INC   $A242\t* this is in the middle of code\r","AE57: B6 80 02    LDA   fdctrk\r","AE5A: 81 50       CMPA  #$50\t* run out of tracks?\r","AE5C: 24 0D       BCC   $AE6B\r","AE5E: BD AE F0    JSR   $AEF0\t* step head in\r","AE61: B6 80 06    LDA   fdcstat\r","AE64: 81 00       CMPA  #$00\r","AE66: 27 03       BEQ   $AE6B\r","AE68: 16 00 07    LBRA  $AE72\r","\r","AE6B: B6 A2 42    LDA   $A242\r","AE6E: 81 01       CMPA  #$01\r","AE70: 26 BF       BNE   $AE31\t* jumps to the middle of an instruction\r","AE72: 39          RTS   \r","\r","* read sector, indentical to ROM code at $f000\r","AE73: B6 80 03    LDA   fdcsect\r","AE76: 97 02       STA   $02\r","AE78: 86 88       LDA   #$88\r","AE7A: B7 80 00    STA   $8000\r","AE7D: 97 00       STA   $00\r","AE7F: 13          SYNC  \r","AE80: 96 03       LDA   $03\r","AE82: A7 80       STA   ,X+\r","AE84: 20 F9       BRA   $AE7F\r","\r","* read sector returning last byte in A\r","* identical to ROM code at $f013\r","AE86: B6 80 03    LDA   fdcsect\r","AE89: 97 02       STA   $02\r","AE8B: 86 88       LDA   #$88\r","AE8D: B7 80 00    STA   $8000\r","AE90: 97 00       STA   $00\r","AE92: 13          SYNC  \r","AE93: 96 03       LDA   $03\r","AE95: 20 FB       BRA   $AE92\r","\r","* write sector\r","* identical to code at $f024\r","AE97: B6 80 03    LDA   fdcsect\r","AE9A: 97 02       STA   $02\r","AE9C: 86 A8       LDA   #$A8\r","AE9E: B7 80 00    STA   $8000\r","AEA1: 97 00       STA   $00\r","AEA3: 13          SYNC  \r","AEA4: A6 80       LDA   ,X+\r","AEA6: 97 03       STA   $03\r","AEA8: 20 F9       BRA   $AEA3\r","\r","* write directory sector\r","* identical to code at $f037\r","AEAA: B6 80 03    LDA   fdcsect\r","AEAD: 97 02       STA   $02\r","AEAF: 86 A8       LDA   #$A8\r","AEB1: B7 80 00    STA   $8000\r","AEB4: 97 00       STA   $00\r","AEB6: 13          SYNC  \r","AEB7: A6 84       LDA   ,X\r","AEB9: 97 03       STA   $03\r","AEBB: 20 F9       BRA   $AEB6\r","\r","* read whole track\r","* identical to code at $f04a\r","AEBD: 86 E8       LDA   #$E8\r","AEBF: B7 80 00    STA   $8000\r","AEC2: 97 00       STA   $00\r","AEC4: 13          SYNC  \r","AEC5: 96 03       LDA   $03\r","AEC7: A7 80       STA   ,X+\r","AEC9: 20 F9       BRA   $AEC4\r","\r","* write whole track\r","* identical to code at $f058\r","AECB: 86 F8       LDA   #$F8\r","AECD: B7 80 00    STA   $8000\r","AED0: 97 00       STA   $00\r","AED2: 13          SYNC  \r","AED3: A6 80       LDA   ,X+\r","AED5: 97 03       STA   $03\r","AED7: 20 F9       BRA   $AED2\r","\r","* seek track 0\r","* identical to code at $f066\r","AED9: 86 0C       LDA   #$0C\r","AEDB: B7 80 00    STA   $8000\r","AEDE: 97 00       STA   $00\r","AEE0: 20 FE       BRA   $AEE0\r","\r","* seek to track\r","* identical to code at $f06f\r","AEE2: B6 80 02    LDA   fdctrk\r","AEE5: 97 03       STA   $03\r","AEE7: 86 1C       LDA   #$1C\r","AEE9: B7 80 00    STA   $8000\r","AEEC: 97 00       STA   $00\r","AEEE: 20 FE       BRA   $AEEE\r","\r","* step head in\r","* identical to code at $f07d\r","AEF0: 86 58       LDA   #$58\r","AEF2: B7 80 00    STA   $8000\r","AEF5: 97 00       STA   $00\r","AEF7: 20 FE       BRA   $AEF7\r","\r","* step head out\r","* identical to code at $f086\r","AEF9: 86 78       LDA   #$78\r","AEFB: B7 80 00    STA   $8000\r","AEFE: 97 00       STA   $00\r","AF00: 20 FE       BRA   $AF00\r","\r","* reset FDC, force interrupt\r","* identical to code at $f08f\r","AF02: 86 D0       LDA   #$D0\r","AF04: B7 80 00    STA   $8000\r","AF07: 97 00       STA   $00\r","AF09: D6 00       LDB   $00\r","AF0B: C5 01       BITB  #$01\r","AF0D: 26 FA       BNE   $AF09\r","AF0F: F7 80 06    STB   fdcstat\r","AF12: 10 8E 00 01 LDY   #$0001\r","AF16: 17 00 01    LBSR  $AF1A\r","AF19: 39          RTS   \r","\r","* delay loop\r","* identical to code at $f0a7\r","AF1A: 12          NOP   \r","AF1B: 12          NOP   \r","AF1C: 12          NOP   \r","AF1D: 12          NOP   \r","AF1E: 31 3F       LEAY  $FFFF,Y\r","AF20: 26 F8       BNE   $AF1A\r","AF22: 39          RTS   \r","\r","* FDC interrupt handler\r","* identical to code at $f0b0\r","AF23: 32 6C       LEAS  $000C,S\r","AF25: D6 00       LDB   $00\r","AF27: F7 80 06    STB   fdcstat\r","AF2A: B6 80 00    LDA   $8000\r","AF2D: 81 88       CMPA  #$88\r","AF2F: 27 07       BEQ   $AF38\r","AF31: B6 80 00    LDA   $8000\r","AF34: 81 E8       CMPA  #$E8\r","AF36: 26 0A       BNE   $AF42\r","AF38: F6 80 06    LDB   fdcstat\r","AF3B: C4 5C       ANDB  #$5C\r","AF3D: F7 80 06    STB   fdcstat\r","AF40: 20 20       BRA   $AF62\r","\r","AF42: B6 80 00    LDA   $8000\r","AF45: 81 A8       CMPA  #$A8\r","AF47: 27 07       BEQ   $AF50\r","AF49: B6 80 00    LDA   $8000\r","AF4C: 81 F8       CMPA  #$F8\r","AF4E: 26 0A       BNE   $AF5A\r","AF50: F6 80 06    LDB   fdcstat\r","AF53: C4 5C       ANDB  #$5C\r","AF55: F7 80 06    STB   fdcstat\r","AF58: 20 08       BRA   $AF62\r","\r","AF5A: F6 80 06    LDB   fdcstat\r","AF5D: C4 18       ANDB  #$18\r","AF5F: F7 80 06    STB   fdcstat\r","AF62: 39          RTS   \r","* end of \"ghost\" disk routines\r","\r","\r","AF63: FF FF FF FF FF FF FF FF FF FF FF FF FF \r","\r","AF70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","AF80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","AF90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","AFA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","AFB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","AFC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","AFD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","AFE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","AFF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF EF \r","B000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B040: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B050: FF FF 00 00 00 00 80 68 00 00 00 00 B4 FE B3 1E \r","B060: EC 7F 02 00 00 10 04 01 00 00 00 00 00 00 00 00 \r","B070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B0A0: 00 00 00 80 68 00 00 00 00 B4 FE B3 1E EC 83 02 \r","B0B0: 00 00 10 04 01 00 00 00 00 00 00 00 00 00 00 00 \r","B0C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B0D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B0E0: 10 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 \r","B0F0: 80 68 00 00 00 00 B4 FE B3 1E EC 87 02 00 00 10 \r","B100: 04 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B120: 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 \r","B130: 00 00 00 00 00 00 00 00 20 00 00 00 00 80 68 00 \r","B140: 00 00 00 B4 FE B3 1E EC 8B 02 00 00 10 04 01 00 \r","B150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B170: 00 00 00 00 00 00 00 00 00 00 30 00 00 00 00 00 \r","B180: 00 00 00 00 00 30 00 00 00 00 80 68 00 00 00 00 \r","B190: B4 FE B3 1E EC 8F 02 00 00 10 04 01 00 00 00 00 \r","B1A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B1B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B1C0: 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 \r","B1D0: 00 00 40 00 00 00 00 80 68 00 00 00 00 B4 FE B3 \r","B1E0: 1E EC 93 02 00 00 10 04 01 00 00 00 00 00 00 00 \r","B1F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B210: 00 00 00 00 50 00 00 00 00 00 00 00 00 00 00 50 \r","B220: 00 00 00 00 80 68 00 00 00 00 B4 FE B3 1E EC 97 \r","B230: 02 00 00 10 04 01 00 00 00 00 00 00 00 00 00 00 \r","B240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B260: 00 60 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 \r","B270: 00 80 68 00 00 00 00 B4 FE B3 1E EC 9B 02 00 00 \r","B280: 10 04 01 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B2A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 \r","B2B0: 00 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 \r","B2C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B2D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B2E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B2F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 \r","B300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r","\r","*** $b31d is the start of the lower parameters\r","\r","B310: 00 00 00 00 00 00 00 00 00 00 00 00 00 32 B3 DE \r","B320: B3 E0 B3 DE B3 E0 00 02 00 00 00 BE 1E 00 00 00 \r","B330: 00 F0 00 00 00 00 B3 FE B4 1E B3 FE B4 1E 00 00 \r","B340: 00 00 00 BE 1E 00 01 00 01 F0 00 00 00 00 B4 1E \r","B350: B4 3E B4 1E B4 3E 00 00 00 00 00 BE 1E 00 01 00 \r","B360: 01 F0 00 00 00 00 B4 3E B4 5E B4 3E B4 5E 00 00 \r","B370: 00 00 00 BE 1E 00 01 00 01 F0 00 00 00 00 B4 5E \r","B380: B4 7E B4 5E B4 7E 00 00 00 00 00 BE 1E 00 01 00 \r","B390: 01 F0 00 00 00 00 B4 7E B4 9E B4 7E B4 9E 00 00 \r","B3A0: 00 00 00 BE 1E 00 01 00 01 F0 00 00 00 00 B4 9E \r","B3B0: B4 BE B4 9E B4 BE 00 00 00 00 00 BE 1E 00 01 00 \r","B3C0: 01 F0 00 00 00 00 B4 BE B4 FE B4 BE B4 FE 00 00 \r","B3D0: 00 00 00 BE 1E 00 01 00 01 F0 00 00 00 00 00 00 \r","B3E0: 01 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B3F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF 40 37 \r","B400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 37 \r","B420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 37 \r","B440: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B450: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B460: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B470: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B4A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B4B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B4C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B4D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B4E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B4F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 0E \r","B500: 00 01 FC 00 00 04 04 00 00 00 01 0C 0C 04 0C 00 \r","B510: 00 00 00 00 02 1E 14 18 0A 00 00 00 00 00 00 00 \r","B520: 00 00 00 0C 00 01 FC 00 00 00 04 00 00 00 01 1F \r","B530: 0A 0C 0C 00 00 00 00 00 01 1F 14 18 19 00 00 00 \r","B540: 00 00 00 00 00 00 00 08 02 01 3C 00 00 00 03 00 \r","B550: 00 00 0A 1F 18 18 18 00 00 00 00 00 02 1E 14 18 \r","B560: 19 00 00 00 00 00 00 00 00 00 00 08 02 01 3C 00 \r","B570: 00 00 03 00 00 00 0A 1F 18 18 18 00 00 00 00 00 \r","\r","*** $b58e is the start of the upper parameters\r","\r","B580: 02 1E 14 18 19 00 00 00 00 00 00 00 00 00 32 B6 \r","B590: 4F B6 51 B6 4F B6 51 00 04 00 00 00 BE 1E 00 01 \r","B5A0: 00 01 F0 00 00 00 00 B6 6F B6 8F B6 6F B6 8F 00 \r","B5B0: 00 00 00 00 BE 1E 00 01 00 01 F0 00 00 00 00 B6 \r","B5C0: 8F B6 AF B6 8F B6 AF 00 00 00 00 00 BE 1E 00 01 \r","B5D0: 00 01 F0 00 00 00 00 B6 AF B6 CF B6 AF B6 CF 00 \r","B5E0: 00 00 00 00 BE 1E 00 01 00 01 F0 00 00 00 00 B6 \r","B5F0: CF B6 EF B6 CF B6 EF 00 00 00 00 00 BE 1E 00 01 \r","B600: 00 01 F0 00 00 00 00 B6 EF B7 0F B6 EF B7 0F 00 \r","B610: 00 00 00 00 BE 1E 00 01 00 01 F0 00 00 00 00 B7 \r","B620: 0F B7 2F B7 0F B7 2F 00 00 00 00 00 BE 1E 00 01 \r","B630: 00 01 F0 00 00 00 00 B7 2F B7 4F B7 2F B7 4F 00 \r","B640: 00 00 00 00 BE 1E 00 01 00 01 F0 00 00 00 00 00 \r","B650: 00 01 01 FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B660: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 40 \r","B670: 3F FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 \r","B690: 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B6A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 \r","B6B0: 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B6C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B6D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B6E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B6F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 \r","B700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B740: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B750: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B760: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 \r","B770: 0C 00 01 FC 00 00 00 04 00 00 00 18 1F 18 18 18 \r","B780: 00 00 00 00 00 05 1E 14 18 18 0A 00 00 00 00 00 \r","B790: 00 00 00 00 0C 00 01 FC 00 00 00 03 00 00 00 01 \r","B7A0: 1F 0A 0A 0A 00 00 00 00 00 01 1F 0A 14 0A 00 00 \r","B7B0: 00 00 00 00 00 00 00 00 08 02 01 3C 00 00 00 03 \r","B7C0: 00 00 00 0A 1F 18 18 18 00 00 00 00 00 02 1E 14 \r","B7D0: 18 19 00 00 00 00 00 00 00 00 00 00 08 02 01 3C \r","B7E0: 00 00 00 03 00 00 00 0A 1F 18 18 18 00 00 00 00 \r","B7F0: 00 02 1E 14 18 19 00 00 00 00 00 00 00 00 00 00\r","\r","* might be sequence data\r","* everything after this point gets clobbered by the sequencer!\r","* TH iss. 32 has a description of the data\r","* B806 contains the address of the first byte of unused memory\r","* B80B is sequence data\r","* events are three byte\r","* 1) 0x80+note = on, note=off\r","* 2) velocity\r","* 3) ticks\r","\r","* bend = 00, sustain = 03, mod = 01\r","\r","B800: 01 39 39 39 B8 0A B8 35 B8 0A 00 C9 40 00 00 40 \r","B810: 00 01 00 00 03 00 18 49 40 00 CB 40 18 4B 40 00 \r","B820: C7 40 18 47 40 00 BB 40 18 3B 40 00 C2 40 60 42 \r","B830: 40 00 80 80 80 00 \r","\r","B836: Mirage Operating System copyrigh\r","B856: t 1984 Ensoniq Corp.   \r","\r","B86D: by Alex Limberis, J. William Mau\r","B88D: chly, John O. Senior and Alan Sm\r","B8AD: ith    \r","\r","B8B4: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF \r","B8C4: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B8D4: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B8E4: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B8F4: FF FF FF FF FF FF FF FF FF FF FF 00 \r","\r","*** put some values in memory\r","* loops around the list below\r","* much fun stack juggling\r","\r","* list at $b987 = ae b9 90 0f af 31 90 1f af d1 90 e2 b0 51 ac 4f\r","* last value points to upper byte of stack\r","* initialises a bunch of stacks?\r","* ends up with the address two bytes below pointed to by the first word containing the second\r","* and the address stored in a table starting at $B2BE\r","\r","B900: CC 80 38    LDD   #$8038\t// once again set up dp\r","B903: 1F 8B       TFR   A,DP\r","B905: 10 8E B2 BE LDY   #$B2BE\t// $b2be is in that big block of data\r","B909: 8E B9 87    LDX   #$B987\t// points to a table of values\r","B90C: 10 EE 81    LDS   ,X++\t// S = $aeb9\r","B90F: EC 81       LDD   ,X++\t// D = $900f\r","B911: 34 06       PSHS  B,A\t// save value in $aeb8!\r","* this will save B first, move S down one, then save A\r","* why do it this way?\r","B913: 10 EF A1    STS   ,Y++\t// save $aeb7 at $b2be\r","B916: 8C B9 97    CMPX  #$B997\t// end of list?\r","B919: 25 F1       BCS   $B90C\t// no, continue\r","B91B: 1C AF       ANDCC #$AF\r","B91D: 7E 88 68    JMP   $8868\t// start?\r","\r","osentry:\r","B920: 10 CE B0 52 LDS   #$B052\t* system stack just below voice table\r","B924: CC 80 38    LDD   #$8038\t* not sure why B is set\r","B927: 1F 8B       TFR   A,DP\t* set DP to variables area\r","B929: BD 87 5E    JSR   $875E\t* build linked list for voices\r","B92C: BD B9 6E    JSR   $B96E\t* sweep filters\r","B92F: BD 89 6B    JSR   $896B\t* handle keyboard controller\r","B932: 7E B9 00    JMP   $B900\r","\r","*** after filter tuning\r","*** grab pitch wheel, compute offset?\r","*** once this has run, assuming the pitch wheel ADC returns $82 we get $61 in $900a\r","B935: 86 18       LDA   #$18\t\r","B937: B7 E2 00    STA   $E200\tstop motor, select pitch wheel\r","B93A: B6 EC E1    LDA   $ECE1\tno idea why we read the control register, starts the ADC?\r","B93D: B6 EC E2    LDA   $ECE2\tread ADC (to be thrown away)\r","B940: 3D          MUL   \r","B941: 3D          MUL   \r","B942: 3D          MUL   \twait for ADC to settle\r","B943: F6 EC E2    LDB   $ECE2\tread ADC\r","B946: F7 90 0E    STB   $900E\tstore value\r","B949: 3D          MUL   \r","B94A: 3D          MUL   \r","B94B: 3D          MUL   \twait\r","B94C: F6 EC E2    LDB   $ECE2\tread ADC\r","B94F: F7 90 0D    STB   $900D\tstore value\r","B952: 3D          MUL   \r","B953: 3D          MUL   \r","B954: 3D          MUL   \twait\r","B955: F6 EC E2    LDB   $ECE2\tread ADC\r","B958: F7 90 0C    STB   $900C\twe have three ADC values\r","B95B: 4F          CLRA  \tclear A\r","B95C: FB 90 0D    ADDB  $900D\tadd previous value to B\r","B95F: 89 00       ADCA  #$00\tcarry into A\r","B961: FB 90 0E    ADDB  $900E\tadd first value into B\r","B964: 89 00       ADCA  #$00\tcarry into A\r","B966: 47          ASRA  \t* 16 bit divide by four\r","B967: 56          RORB  \t\r","B968: 47          ASRA  \t\r","B969: 56          RORB  \t\r","B96A: F7 90 0A    STB   $900A\tsave\r","B96D: 39          RTS   \r","\r","filterthing:\r","*** this appears to do the filter tuning\r","* why is the voice parameter table here given as $b050\r","* and everywhere else $b052?\r","B96E: CE B0 50    LDU   #$B050\t* voice parameter table\r","B971: 8E E4 18    LDX   #$E418\tfirst DAC channel\r","B974: C6 10       LDB   #$10\t\r","B976: BD F5 71    JSR   swponefilt sweep one filter\r","B979: 33 C8 4D    LEAU  $4D,U\t77 bytes, again\r","B97C: 30 01       LEAX  $0001,X\tnext channel\r","B97E: 8C E4 1F    CMPX  #$E41F\tdone?\r","B981: 23 F1       BLS   $B974\tno, loop\r","B983: BD B9 35    JSR   $B935\r","B986: 39          RTS   \r","\r","*** table of values that runs\r","*** ae b9 90 0f af 31 90 1f af d1 90 e2 b0 51 ac 4f\r","\r","B987: AE B9 90 0F AF 31 90 1F AF \r","\r","B990: D1 90 E2 B0 51 AC 4F 00 00 00 00 00 00 00 00 00 \r","B9A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B9B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","B9C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B9D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B9E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","B9F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 \r","BA00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BA10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BA20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BA30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BA40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BA50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BA60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BA70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BA80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BA90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BAA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BAB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BAC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BAD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BAE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BAF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 \r","BB00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BB10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BB20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BB30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BB40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BB50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BB60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BB70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BB80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BB90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BBA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BBB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BBC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BBD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BBE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BBF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 \r","BC00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BC10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BC20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BC30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BC40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BC50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BC60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BC70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BC80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BC90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BCA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BCB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BCC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BCD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BCE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BCF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 \r","BD00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BD10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BD20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BD30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BD40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BD50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BD60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BD70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BD80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BD90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BDA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BDB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r","BDC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BDD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BDE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \r","BDF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 \r","BE00: E1 1E 06 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BE10: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BE20: 1E 1E 1A 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BE30: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BE40: E1 1E 06 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BE50: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BE60: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BE70: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BE80: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BE90: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BEA0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BEB0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 66 81 \r","BEC0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BED0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BEE0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BEF0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 66 C1 \r","BF00: E1 1E 0E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BF10: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BF20: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BF30: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BF40: E1 1E 06 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BF50: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E3 E1 E1 E1 E1 \r","BF60: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 D0 1C D0 08 00 E8 \r","BF70: 02 00 97 30 37 97 6D 46 97 20 20 95 0C 43 94 FB \r","BF80: 00 0B 05 0B 05 02 1E 1E E1 E1 E1 E1 00 80 2E 00 \r","BF90: 00 80 00 00 00 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BFA0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BFB0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 66 A9 \r","BFC0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BFD0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BFE0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 E1 E1 \r","BFF0: 1E 1E 1E 1E 1E 1E 1E 1E E1 E1 E1 E1 E1 E1 66 C1 \r","\r"],"stylingDirectivescsv":null,"csvError":null,"dependabotInfo":{"showConfigurationBanner":false,"configFilePath":null,"networkDependabotPath":"/gordonjcp/miragetools/network/updates","dismissConfigurationNoticePath":"/settings/dismiss-notice/dependabot_configuration_notice","configurationNoticeDismissed":null,"repoAlertsPath":"/gordonjcp/miragetools/security/dependabot","repoSecurityAndAnalysisPath":"/gordonjcp/miragetools/settings/security_analysis","repoOwnerIsOrg":false,"currentUserCanAdminRepo":false},"displayName":"mos32.txt","displayUrl":"https://github.com/gordonjcp/miragetools/blob/master/docs/mos32.txt?raw=true","headerInfo":{"blobSize":"227 KB","deleteInfo":{"deleteTooltip":"You must be signed in to make or propose changes"},"editInfo":{"editTooltip":"You must be signed in to make or propose changes"},"ghDesktopPath":"https://desktop.github.com","gitLfsPath":null,"onBranch":true,"shortPath":"ff69c1e","siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fgordonjcp%2Fmiragetools%2Fblob%2Fmaster%2Fdocs%2Fmos32.txt","isCSV":false,"isRichtext":false,"toc":null,"lineInfo":{"truncatedLoc":"6556","truncatedSloc":"5900"},"mode":"file"},"image":false,"isCodeownersFile":null,"isValidLegacyIssueTemplate":false,"issueTemplateHelpUrl":"https://docs.github.com/articles/about-issue-and-pull-request-templates","issueTemplate":null,"discussionTemplate":null,"language":"Text","languageID":372,"large":false,"loggedIn":false,"newDiscussionPath":"/gordonjcp/miragetools/discussions/new","newIssuePath":"/gordonjcp/miragetools/issues/new","planSupportInfo":{"repoIsFork":null,"repoOwnedByCurrentUser":null,"requestFullPath":"/gordonjcp/miragetools/blob/master/docs/mos32.txt","showFreeOrgGatedFeatureMessage":null,"showPlanSupportBanner":null,"upgradeDataAttributes":null,"upgradePath":null},"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_dockerfile","dismissStackNoticePath":"/settings/dismiss-notice/publish_stack_from_file","releasePath":"/gordonjcp/miragetools/releases/new?marketplace=true","showPublishActionBanner":false,"showPublishStackBanner":false},"renderImageOrRaw":false,"richText":null,"renderedFileInfo":null,"tabSize":8,"topBannersInfo":{"overridingGlobalFundingFile":false,"globalPreferredFundingPath":null,"repoOwner":"gordonjcp","repoName":"miragetools","showInvalidCitationWarning":false,"citationHelpUrl":"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files","showDependabotConfigurationBanner":false,"actionsOnboardingTip":null},"truncated":false,"viewable":true,"workflowRedirectUrl":null,"symbols":{"timedOut":false,"notAnalyzed":true,"symbols":[]}},"copilotAccessInfo":null,"csrf_tokens":{"/gordonjcp/miragetools/branches":{"post":"6jbXDLZPfwjtCXAHV02AoscX0xlzl84BRp1UCrnY_U_Zv-bfiWRanauR_h4iY8i7Luye-2t6qO4YiLzTVmDHCQ"}}},"title":"miragetools/docs/mos32.txt at master · gordonjcp/miragetools","locale":"en"}